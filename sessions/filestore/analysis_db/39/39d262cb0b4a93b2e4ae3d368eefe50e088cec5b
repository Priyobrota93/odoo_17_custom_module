
/*********************************************************************
*  Filepath: /base/static/tests/test_ir_model_fields_translation.js  *
*  Lines: 55                                                         *
*********************************************************************/
odoo.define('@base/../tests/test_ir_model_fields_translation', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
function checkLoginColumn(translation) {
    return [
        stepUtils.showAppsMenuItem(), {
            content: "Settings",
            trigger: 'a[data-menu-xmlid="base.menu_administration"]',
            run: 'click',
        }, {
            content: "Open Users & Companies",
            trigger: '[data-menu-xmlid="base.menu_users"]',
            run: "click",
        }, {
            content: "Open Users",
            trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
            run: "click",
        }, {
            content: `Login column should be ${translation}`,
            trigger: `[data-name="login"] span:contains("${translation}")`,
            isCheck: true,
        }
    ]
}

registry.category("web_tour.tours").add('ir_model_fields_translation_en_tour', {
    test: true,
    url: '/web',
    steps: () => checkLoginColumn('Login')
});

registry.category("web_tour.tours").add('ir_model_fields_translation_en_tour2', {
    test: true,
    url: '/web',
    steps: () => checkLoginColumn('Login2')
});

registry.category("web_tour.tours").add('ir_model_fields_translation_fr_tour', {
    test: true,
    url: '/web',
    steps: () => checkLoginColumn('Identifiant')
});

registry.category("web_tour.tours").add('ir_model_fields_translation_fr_tour2', {
    test: true,
    url: '/web',
    steps: () => checkLoginColumn('Identifiant2')
});

return __exports;
});
;

/***************************************************
*  Filepath: /web/static/tests/helpers/cleanup.js  *
*  Lines: 121                                      *
***************************************************/
odoo.define('@web/../tests/helpers/cleanup', [], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

// -----------------------------------------------------------------------------
// Cleanup
// -----------------------------------------------------------------------------

const cleanups = [];

/**
 * Register a cleanup callback that will be executed whenever the current test
 * is done.
 *
 * - the cleanups will be executed in reverse order
 * - they will be executed even if the test fails/crashes
 *
 * @param {Function} callback
 */
__exports.registerCleanup = registerCleanup; function registerCleanup(callback) {
    cleanups.push(callback);
}

if (window.QUnit) {
    QUnit.on("OdooAfterTestHook", (info) => {
        if (QUnit.config.debug) {
            return;
        }
        let cleanup;
        // note that this calls the cleanup callbacks in reverse order!
        while ((cleanup = cleanups.pop())) {
            try {
                cleanup(info);
            } catch (error) {
                console.error(error);
            }
        }
    });

    // -----------------------------------------------------------------------------
    // Check leftovers
    // -----------------------------------------------------------------------------

    /**
     * List of elements tolerated in the body after a test. The property "keep"
     * prevents the element from being removed (typically: qunit suite elements).
     */
    const validElements = [
        // always in the body:
        { tagName: "DIV", attr: "id", value: "qunit", keep: true },
        { tagName: "DIV", attr: "id", value: "qunit-fixture", keep: true },
        // shouldn't be in the body after a test but are tolerated:
        { tagName: "SCRIPT", attr: "id", value: "" },
        { tagName: "DIV", attr: "class", value: "o_notification_manager" },
        { tagName: "DIV", attr: "class", value: "tooltip fade bs-tooltip-auto" },
        { tagName: "DIV", attr: "class", value: "tooltip fade bs-tooltip-auto show" },
        { tagName: "DIV", attr: "class", value: "tooltip tooltip-field-info fade bs-tooltip-auto" },
        {
            tagName: "DIV",
            attr: "class",
            value: "tooltip tooltip-field-info fade bs-tooltip-auto show",
        },
        { tagName: "SPAN", attr: "class", value: "select2-hidden-accessible" },

        // Due to a Document Kanban bug (already present in 12.0)
        { tagName: "DIV", attr: "class", value: "ui-helper-hidden-accessible" },
        {
            tagName: "UL",
            attr: "class",
            value: "ui-menu ui-widget ui-widget-content ui-autocomplete ui-front",
        },
        {
            tagName: "UL",
            attr: "class",
            value: "ui-menu ui-widget ui-widget-content ui-autocomplete dropdown-menu ui-front", // many2ones
        },
    ];

    /**
     * After each test, we check that there is no leftover in the DOM.
     *
     * Note: this event is not QUnit standard, we added it for this specific use case.
     * As a payload, an object with keys 'moduleName' and 'testName' is provided. It
     * is used to indicate the test that left elements in the DOM, when it happens.
     */
    QUnit.on("OdooAfterTestHook", function (info) {
        if (QUnit.config.debug) {
            return;
        }
        const failed = info.testReport.getStatus() === "failed";
        const toRemove = [];
        // check for leftover elements in the body
        for (const bodyChild of document.body.children) {
            const tolerated = validElements.find(
                (e) => e.tagName === bodyChild.tagName && bodyChild.getAttribute(e.attr) === e.value
            );
            if (!failed && !tolerated) {
                QUnit.pushFailure(
                    `Body still contains undesirable elements:\n${bodyChild.outerHTML}`
                );
            }
            if (!tolerated || !tolerated.keep) {
                toRemove.push(bodyChild);
            }
        }
        // cleanup leftovers in #qunit-fixture
        const qunitFixture = document.getElementById("qunit-fixture");
        if (qunitFixture.children.length) {
            toRemove.push(...qunitFixture.children);
        }
        // remove unwanted elements if not in debug
        for (const el of toRemove) {
            el.remove();
        }
        document.body.classList.remove("modal-open");
    });
}

return __exports;
});
;

/*************************************************
*  Filepath: /web/static/tests/helpers/utils.js  *
*  Lines: 1106                                   *
*************************************************/
odoo.define('@web/../tests/helpers/utils', ['@web/core/assets', '@web/core/browser/browser', '@web/core/browser/feature_detection', '@web/core/network/download', '@web/core/utils/concurrency', '@web/core/utils/patch', '@web/core/utils/ui', '@web/core/l10n/translation', '@web/../tests/helpers/cleanup', '@odoo/owl'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { templates } = require("@web/core/assets");
const { browser } = require("@web/core/browser/browser");
const { isMacOS } = require("@web/core/browser/feature_detection");
const { download } = require("@web/core/network/download");
const { Deferred } = require("@web/core/utils/concurrency");
const { patch } = require("@web/core/utils/patch");
const { isVisible } = require("@web/core/utils/ui");
const { _t } = require("@web/core/l10n/translation");
const { registerCleanup } = require("@web/../tests/helpers/cleanup");

const {
    App,
    onError,
    onMounted,
    onPatched,
    onRendered,
    onWillDestroy,
    onWillPatch,
    onWillRender,
    onWillStart,
    onWillUnmount,
    onWillUpdateProps,
    useComponent,
} = require("@odoo/owl");

/**
 * @typedef {keyof HTMLElementEventMap | keyof WindowEventMap} EventType
 *
 * @typedef {Side | `${Side}-${Side}` | { x?: number, y?: number }} Position
 *
 * @typedef {"bottom" | "left" | "right" | "top"} Side
 *
 * @typedef TriggerEventOptions
 * @property {boolean} [skipVisibilityCheck=false]
 * @property {boolean} [sync=false]
 */

/**
 * Patch the native Date object
 *
 * Note that it will be automatically unpatched at the end of the test
 *
 * @param {number} [year]
 * @param {number} [month]
 * @param {number} [day]
 * @param {number} [hours]
 * @param {number} [minutes]
 * @param {number} [seconds]
 * @param {number} [ms=0]
 */
__exports.patchDate = patchDate; function patchDate(year, month, day, hours, minutes, seconds, ms = 0) {
    var RealDate = window.Date;
    var actualDate = new RealDate();

    // By default, RealDate uses the browser offset, so we must replace it with the offset fixed in luxon.
    var fakeDate = new RealDate(year, month, day, hours, minutes, seconds, ms);
    if (!(luxon.Settings.defaultZone instanceof luxon.FixedOffsetZone)) {
        throw new Error("luxon.Settings.defaultZone must be a FixedOffsetZone");
    }
    const browserOffset = -fakeDate.getTimezoneOffset();
    const patchedOffset = luxon.Settings.defaultZone.offset();
    const offsetDiff = patchedOffset - browserOffset;
    const correctedMinutes = fakeDate.getMinutes() - offsetDiff;
    fakeDate.setMinutes(correctedMinutes);

    var timeInterval = actualDate.getTime() - fakeDate.getTime();

    // eslint-disable-next-line no-global-assign
    window.Date = (function (NativeDate) {
        function Date(Y, M, D, h, m, s, ms) {
            var length = arguments.length;
            let date;
            if (arguments.length > 0) {
                date =
                    length == 1 && String(Y) === Y // isString(Y)
                        ? // We explicitly pass it through parse:
                          new NativeDate(Date.parse(Y))
                        : // We have to manually make calls depending on argument
                        // length here
                        length >= 7
                        ? new NativeDate(Y, M, D, h, m, s, ms)
                        : length >= 6
                        ? new NativeDate(Y, M, D, h, m, s)
                        : length >= 5
                        ? new NativeDate(Y, M, D, h, m)
                        : length >= 4
                        ? new NativeDate(Y, M, D, h)
                        : length >= 3
                        ? new NativeDate(Y, M, D)
                        : length >= 2
                        ? new NativeDate(Y, M)
                        : length >= 1
                        ? new NativeDate(Y)
                        : new NativeDate();
                // Prevent mixups with unfixed Date object
                date.constructor = Date;
                return date;
            } else {
                date = new NativeDate();
                var time = date.getTime();
                time -= timeInterval;
                date.setTime(time);
                return date;
            }
        }

        // Copy any custom methods a 3rd party library may have added
        for (var key in NativeDate) {
            Date[key] = NativeDate[key];
        }

        // Copy "native" methods explicitly; they may be non-enumerable
        // exception: 'now' uses fake date as reference
        Date.now = function () {
            var date = new NativeDate();
            var time = date.getTime();
            time -= timeInterval;
            return time;
        };
        Date.UTC = NativeDate.UTC;
        Date.prototype = NativeDate.prototype;
        Date.prototype.constructor = Date;

        // Upgrade Date.parse to handle simplified ISO 8601 strings
        Date.parse = NativeDate.parse;
        return Date;
    })(Date);

    registerCleanup(() => {
        window.Date = RealDate;
    });
}

/**
 * Applies a fixed time zone to luxon based on an offset to the UTC time zone.
 *
 * @param {number} offset the number of minutes ahead or behind the UTC time zone
 *                          +120 => UTC+2
 *                          -120 => UTC-2
 */
__exports.patchTimeZone = patchTimeZone; function patchTimeZone(offset) {
    patchWithCleanup(luxon.Settings, { defaultZone: luxon.FixedOffsetZone.instance(offset) });
}

/**
 *
 * @param {Object} obj object to patch
 * @param {Object} patchValue the actual patch description
 */
__exports.patchWithCleanup = patchWithCleanup; function patchWithCleanup(obj, patchValue) {
    const unpatch = patch(obj, patchValue);
    registerCleanup(() => {
        unpatch();
    });
}

/**
 * @returns {Element}
 */
__exports.getFixture = getFixture; function getFixture() {
    if (!window.QUnit) {
        return document;
    }
    if (QUnit.config.debug) {
        return document.body;
    } else {
        return document.getElementById("qunit-fixture");
    }
}

__exports.nextTick = nextTick; async function nextTick() {
    await new Promise((resolve) => window.requestAnimationFrame(resolve));
    await new Promise((resolve) => setTimeout(resolve));
}

__exports.makeDeferred = makeDeferred; function makeDeferred() {
    return new Deferred();
}

__exports.findElement = findElement; function findElement(el, selector) {
    let target = el;
    if (selector) {
        const els = el.querySelectorAll(selector);
        if (els.length === 0) {
            throw new Error(`No element found (selector: ${selector})`);
        }
        if (els.length > 1) {
            throw new Error(`Found ${els.length} elements, instead of 1 (selector: ${selector})`);
        }
        target = els[0];
    }
    return target;
}

//-----------------------------------------------------------------------------
// Event init attributes mappers
//-----------------------------------------------------------------------------

/** @param {EventInit} [args] */
const mapBubblingEvent = (args) => ({ ...args, bubbles: true });

/** @param {EventInit} [args] */
const mapNonBubblingEvent = (args) => ({ ...args, bubbles: false });

/** @param {EventInit} [args={}] */
const mapBubblingPointerEvent = (args = {}) => ({
    clientX: args.pageX,
    clientY: args.pageY,
    ...args,
    bubbles: true,
    cancelable: true,
    view: window,
});

/** @param {EventInit} [args] */
const mapNonBubblingPointerEvent = (args) => ({
    ...mapBubblingPointerEvent(args),
    bubbles: false,
    cancelable: false,
});

/** @param {EventInit} [args={}] */
const mapCancelableTouchEvent = (args = {}) => ({
    ...args,
    bubbles: true,
    cancelable: true,
    composed: true,
    rotation: 0.0,
    touches: args.touches ? [...args.touches.map((e) => new Touch(e))] : undefined,
    view: window,
    zoom: 1.0,
});

/** @param {EventInit} [args] */
const mapNonCancelableTouchEvent = (args) => ({
    ...mapCancelableTouchEvent(args),
    cancelable: false,
});

/** @param {EventInit} [args] */
const mapKeyboardEvent = (args) => ({
    ...args,
    bubbles: true,
    cancelable: true,
});

/**
 * @template {typeof Event} T
 * @param {EventType} eventType
 * @returns {[T, (attrs: EventInit) => EventInit]}
 */
const getEventConstructor = (eventType) => {
    switch (eventType) {
        // Mouse events
        case "auxclick":
        case "click":
        case "contextmenu":
        case "dblclick":
        case "mousedown":
        case "mouseup":
        case "mousemove":
        case "mouseover":
        case "mouseout": {
            return [MouseEvent, mapBubblingPointerEvent];
        }
        case "mouseenter":
        case "mouseleave": {
            return [MouseEvent, mapNonBubblingPointerEvent];
        }
        // Pointer events
        case "pointerdown":
        case "pointerup":
        case "pointermove":
        case "pointerover":
        case "pointerout": {
            return [PointerEvent, mapBubblingPointerEvent];
        }
        case "pointerenter":
        case "pointerleave": {
            return [PointerEvent, mapNonBubblingPointerEvent];
        }
        // Focus events
        case "focusin": {
            return [FocusEvent, mapBubblingEvent];
        }
        case "focus":
        case "blur": {
            return [FocusEvent, mapNonBubblingEvent];
        }
        // Clipboard events
        case "cut":
        case "copy":
        case "paste": {
            return [ClipboardEvent, mapBubblingEvent];
        }
        // Keyboard events
        case "keydown":
        case "keypress":
        case "keyup": {
            return [KeyboardEvent, mapKeyboardEvent];
        }
        // Drag events
        case "drag":
        case "dragend":
        case "dragenter":
        case "dragstart":
        case "dragleave":
        case "dragover":
        case "drop": {
            return [DragEvent, mapBubblingEvent];
        }
        // Input events
        case "input": {
            return [InputEvent, mapBubblingEvent];
        }
        // Composition events
        case "compositionstart":
        case "compositionend": {
            return [CompositionEvent, mapBubblingEvent];
        }
        // UI events
        case "scroll": {
            return [UIEvent, mapNonBubblingEvent];
        }
        // Touch events
        case "touchstart":
        case "touchend":
        case "touchmove": {
            return [TouchEvent, mapCancelableTouchEvent];
        }
        case "touchcancel": {
            return [TouchEvent, mapNonCancelableTouchEvent];
        }
        // Default: base Event constructor
        default: {
            return [Event, mapBubblingEvent];
        }
    }
};

/**
 * @template {EventType} T
 * @param {Element} el
 * @param {string | null | undefined | false} selector
 * @param {T} eventType
 * @param {EventInit} [eventInit]
 * @param {TriggerEventOptions} [options={}]
 * @returns {GlobalEventHandlersEventMap[T] | Promise<GlobalEventHandlersEventMap[T]>}
 */
__exports.triggerEvent = triggerEvent; function triggerEvent(el, selector, eventType, eventInit, options = {}) {
    const errors = [];
    const target = findElement(el, selector);

    // Error handling
    if (typeof eventType !== "string") {
        errors.push("event type must be a string");
    }
    if (!target) {
        errors.push("cannot find target");
    } else if (!options.skipVisibilityCheck && !isVisible(target)) {
        errors.push("target is not visible");
    }
    if (errors.length) {
        throw new Error(
            `Cannot trigger event${eventType ? ` "${eventType}"` : ""}${
                selector ? ` (with selector "${selector}")` : ""
            }: ${errors.join(" and ")}`
        );
    }

    // Actual dispatch
    const [Constructor, processParams] = getEventConstructor(eventType);
    const event = new Constructor(eventType, processParams(eventInit));
    target.dispatchEvent(event);

    if (window.QUnit && QUnit.config.debug) {
        const group = `%c[${event.type.toUpperCase()}]`;
        console.groupCollapsed(group, "color: #b52c9b");
        console.log(target, event);
        console.groupEnd(group, "color: #b52c9b");
    }

    if (options.sync) {
        return event;
    } else {
        return nextTick().then(() => event);
    }
}

/**
 * @param {Element} el
 * @param {string | null | undefined | false} selector
 * @param {(EventType | [EventType, EventInit])[]} [eventDefs]
 * @param {TriggerEventOptions} [options={}]
 */
__exports.triggerEvents = triggerEvents; function triggerEvents(el, selector, eventDefs, options = {}) {
    const events = [...eventDefs].map((eventDef) => {
        const [eventType, eventInit] = Array.isArray(eventDef) ? eventDef : [eventDef, {}];
        return triggerEvent(el, selector, eventType, eventInit, options);
    });
    if (options.sync) {
        return events;
    } else {
        return nextTick().then(() => events);
    }
}

/**
 * Triggers a scroll event on the given target
 *
 * If the target cannot be scrolled or an axis has reached
 * the end of the scrollable area, the event can be transmitted
 * to its nearest parent until it can be triggered
 *
 * @param {Element} target target of the scroll event
 * @param {Object} coordinates
 * @param {number} coordinates.left coordinates to scroll horizontally
 * @param {number} coordinates.top coordinates to scroll vertically
 * @param {boolean} canPropagate states if the scroll can propagate to a scrollable parent
 */
__exports.triggerScroll = triggerScroll; async function triggerScroll(
    target,
    coordinates = { left: null, top: null },
    canPropagate = true
) {
    const isScrollable =
        (target.scrollHeight > target.clientHeight && target.clientHeight > 0) ||
        (target.scrollWidth > target.clientWidth && target.clientWidth > 0);
    if (!isScrollable && !canPropagate) {
        return;
    }
    if (isScrollable) {
        const canScrollFrom = {
            left:
                coordinates.left > target.scrollLeft
                    ? target.scrollLeft + target.clientWidth < target.scrollWidth
                    : target.scrollLeft > 0,
            top:
                coordinates.top > target.scrollTop
                    ? target.scrollTop + target.clientHeight < target.scrollHeight
                    : target.scrollTop > 0,
        };
        const scrollCoordinates = {};
        Object.entries(coordinates).forEach(([key, value]) => {
            if (value !== null && canScrollFrom[key]) {
                scrollCoordinates[key] = value;
                delete coordinates[key];
            }
        });
        target.scrollTo(scrollCoordinates);
        await triggerEvent(target, null, "scroll");
        if (!canPropagate || !Object.entries(coordinates).length) {
            return;
        }
    }
    target.parentElement
        ? triggerScroll(target.parentElement, coordinates)
        : triggerEvent(window, null, "scroll");
    await nextTick();
}

__exports.click = click; function click(
    el,
    selector,
    { mouseEventInit = {}, skipDisabledCheck = false, skipVisibilityCheck = false } = {}
) {
    if (!skipDisabledCheck && el.disabled) {
        throw new Error("Can't click on a disabled button");
    }
    return triggerEvents(
        el,
        selector,
        ["pointerdown", "mousedown", "focus", "pointerup", "mouseup", ["click", mouseEventInit]],
        { skipVisibilityCheck }
    );
}

__exports.clickCreate = clickCreate; function clickCreate(htmlElement) {
    if (
        htmlElement.querySelectorAll(
            ".o_control_panel_main_buttons .d-none.d-xl-inline-flex .o_form_button_create"
        ).length
    ) {
        return click(
            htmlElement,
            ".o_control_panel_main_buttons .d-none.d-xl-inline-flex .o_form_button_create"
        );
    } else if (
        htmlElement.querySelectorAll(
            ".o_control_panel_main_buttons .d-none.d-xl-inline-flex .o_list_button_create"
        ).length
    ) {
        return click(
            htmlElement,
            ".o_control_panel_main_buttons .d-none.d-xl-inline-flex .o_list_button_create"
        );
    } else {
        throw new Error("No edit button found to be clicked.");
    }
}

__exports.clickEdit = clickEdit; function clickEdit(htmlElement) {
    if (htmlElement.querySelectorAll(".o_list_button_edit").length) {
        return click(htmlElement, ".o_list_button_edit");
    } else {
        throw new Error("No edit button found to be clicked.");
    }
}

__exports.clickSave = clickSave; async function clickSave(htmlElement) {
    if (htmlElement.querySelectorAll(".o_form_status_indicator").length) {
        await mouseEnter(htmlElement, ".o_form_status_indicator");
    }
    if (htmlElement.querySelectorAll(".o_form_button_save").length) {
        return click(htmlElement, ".o_form_button_save");
    }
    const listSaveButtons = htmlElement.querySelectorAll(".o_list_button_save");
    if (listSaveButtons.length) {
        return listSaveButtons.length >= 2 ? click(listSaveButtons[1]) : click(listSaveButtons[0]);
    } else {
        throw new Error("No save button found to be clicked.");
    }
}

__exports.clickDiscard = clickDiscard; async function clickDiscard(htmlElement) {
    if (htmlElement.querySelectorAll(".o_form_status_indicator").length) {
        await mouseEnter(htmlElement, ".o_form_status_indicator");
    }
    if (htmlElement.querySelectorAll(".o_form_button_cancel").length) {
        return click(htmlElement, ".o_form_button_cancel");
    } else if ($(htmlElement).find(".o_list_button_discard:visible").length) {
        return click($(htmlElement).find(".o_list_button_discard:visible").get(0));
    } else {
        throw new Error("No discard button found to be clicked.");
    }
}

/**
 * Trigger pointerenter and mouseenter events on the given target. If no
 * coordinates are given, the event is located by default
 * in the middle of the target to simplify the test process
 *
 * @param {Element} el
 * @param {string} selector
 * @param {Object} coordinates position of the mouseenter event
 */
__exports.mouseEnter = mouseEnter; async function mouseEnter(el, selector, coordinates) {
    const target = el.querySelector(selector) || el;
    const atPos = coordinates || {
        clientX: target.getBoundingClientRect().left + target.getBoundingClientRect().width / 2,
        clientY: target.getBoundingClientRect().top + target.getBoundingClientRect().height / 2,
    };
    return triggerEvents(target, null, ["pointerenter", "mouseenter"], atPos);
}

/**
 * Trigger pointerleave and mouseleave events on the given target.
 *
 * @param {Element} el
 * @param {string} selector
 */
__exports.mouseLeave = mouseLeave; async function mouseLeave(el, selector) {
    const target = el.querySelector(selector) || el;
    return triggerEvents(target, null, ["pointerleave", "mouseleave"]);
}

__exports.editInput = editInput; async function editInput(el, selector, value) {
    const input = findElement(el, selector);
    if (!(input instanceof HTMLInputElement || input instanceof HTMLTextAreaElement)) {
        throw new Error("Only 'input' and 'textarea' elements can be edited with 'editInput'.");
    }
    if (
        !["text", "textarea", "email", "search", "color", "number", "file", "tel"].includes(
            input.type
        )
    ) {
        throw new Error(`Type "${input.type}" not supported by 'editInput'.`);
    }

    const eventOpts = {};
    if (input.type === "file") {
        const files = Array.isArray(value) ? value : [value];
        const dataTransfer = new DataTransfer();
        for (const file of files) {
            if (!(file instanceof File)) {
                throw new Error(`File input value should be one or several File objects.`);
            }
            dataTransfer.items.add(file);
        }
        input.files = dataTransfer.files;
        eventOpts.skipVisibilityCheck = true;
    } else {
        input.value = value;
    }

    await triggerEvents(input, null, ["input", "change"], eventOpts);

    if (input.type === "file") {
        // Need to wait for the file to be loaded by the input
        await nextTick();
        await nextTick();
    }
}

__exports.editSelect = editSelect; function editSelect(el, selector, value) {
    const select = findElement(el, selector);
    if (select.tagName !== "SELECT") {
        throw new Error("Only select tag can be edited with selectInput.");
    }
    select.value = value;
    return triggerEvent(select, null, "change");
}

__exports.editSelectMenu = editSelectMenu; async function editSelectMenu(el, selector, value) {
    const dropdown = el.querySelector(selector);
    await click(dropdown.querySelector(".dropdown-toggle"));
    for (const item of Array.from(dropdown.querySelectorAll(".dropdown-item"))) {
        if (item.textContent === value) {
            return click(item);
        }
    }
}

/**
 * Triggers an hotkey properly disregarding the operating system.
 *
 * @param {string} hotkey
 * @param {boolean} addOverlayModParts
 * @param {KeyboardEventInit} eventAttrs
 */
__exports.triggerHotkey = triggerHotkey; async function triggerHotkey(hotkey, addOverlayModParts = false, eventAttrs = {}) {
    eventAttrs.key = hotkey.split("+").pop();

    if (/shift/i.test(hotkey)) {
        eventAttrs.shiftKey = true;
    }

    if (/control/i.test(hotkey)) {
        if (isMacOS()) {
            eventAttrs.metaKey = true;
        } else {
            eventAttrs.ctrlKey = true;
        }
    }

    if (/alt/i.test(hotkey) || addOverlayModParts) {
        if (isMacOS()) {
            eventAttrs.ctrlKey = true;
        } else {
            eventAttrs.altKey = true;
        }
    }

    if (!("bubbles" in eventAttrs)) {
        eventAttrs.bubbles = true;
    }

    const [keydownEvent, keyupEvent] = await triggerEvents(
        document.activeElement,
        null,
        [
            ["keydown", eventAttrs],
            ["keyup", eventAttrs],
        ],
        { skipVisibilityCheck: true }
    );

    return { keydownEvent, keyupEvent };
}

__exports.mockDownload = mockDownload; function mockDownload(cb) {
    patchWithCleanup(download, { _download: cb });
}

const hushConsole = __exports.hushConsole = Object.create(null);
for (const propName of Object.keys(window.console)) {
    hushConsole[propName] = () => {};
}

__exports.mockSendBeacon = mockSendBeacon; function mockSendBeacon(mock) {
    patchWithCleanup(navigator, {
        sendBeacon: (url, blob) => {
            return mock(url, blob) !== false;
        },
    });
}

__exports.mockTimeout = mockTimeout; function mockTimeout() {
    const timeouts = new Map();
    let currentTime = 0;
    let id = 1;
    patchWithCleanup(browser, {
        setTimeout(fn, delay = 0) {
            timeouts.set(id, { fn, scheduledFor: delay + currentTime, id });
            return id++;
        },
        clearTimeout(id) {
            timeouts.delete(id);
        },
    });
    return {
        execRegisteredTimeouts() {
            for (const { fn } of timeouts.values()) {
                fn();
            }
            timeouts.clear();
        },
        async advanceTime(duration) {
            // wait here so all microtasktick scheduled in this frame can be
            // executed and possibly register their own timeout
            await nextTick();
            currentTime += duration;
            for (const { fn, scheduledFor, id } of timeouts.values()) {
                if (scheduledFor <= currentTime) {
                    fn();
                    timeouts.delete(id);
                }
            }
            // wait here to make sure owl can update the UI
            await nextTick();
        },
    };
}

__exports.mockAnimationFrame = mockAnimationFrame; function mockAnimationFrame() {
    const callbacks = new Map();
    let currentTime = 0;
    let id = 1;
    patchWithCleanup(browser, {
        requestAnimationFrame(fn) {
            callbacks.set(id, { fn, scheduledFor: 16 + currentTime, id });
            return id++;
        },
        cancelAnimationFrame(id) {
            callbacks.delete(id);
        },
        performance: { now: () => currentTime },
    });
    return {
        execRegisteredAnimationFrames() {
            for (const { fn } of callbacks.values()) {
                fn(currentTime);
            }
            callbacks.clear();
        },
        async advanceFrame(count = 1) {
            // wait here so all microtasktick scheduled in this frame can be
            // executed and possibly register their own timeout
            await nextTick();
            currentTime += 16 * count;
            for (const { fn, scheduledFor, id } of callbacks.values()) {
                if (scheduledFor <= currentTime) {
                    fn(currentTime);
                    callbacks.delete(id);
                }
            }
            // wait here to make sure owl can update the UI
            await nextTick();
        },
    };
}

__exports.mount = mount; async function mount(Comp, target, config = {}) {
    let { props, env } = config;
    env = env || {};
    const configuration = {
        env,
        templates,
        test: true,
        props,
    };
    if (env.services && "localization" in env.services) {
        configuration.translateFn = _t;
    }
    const app = new App(Comp, configuration);
    registerCleanup(() => app.destroy());
    return app.mount(target);
}

__exports.destroy = destroy; function destroy(comp) {
    comp.__owl__.app.destroy();
}

__exports.findChildren = findChildren; function findChildren(comp, predicate = (e) => e) {
    const queue = [];
    [].unshift.apply(queue, Object.values(comp.__owl__.children));

    while (queue.length > 0) {
        const curNode = queue.pop();
        if (predicate(curNode)) {
            return curNode;
        }
        [].unshift.apply(queue, Object.values(curNode.component.__owl__.children));
    }
}

// partial replacement of t-ref on component
__exports.useChild = useChild; function useChild() {
    const node = useComponent().__owl__;
    const setChild = () => {
        const componentNode = Object.values(node.children)[0];
        node.component.child = componentNode.component;
    };
    onMounted(setChild);
    onPatched(setChild);
}

__exports.useLogLifeCycle = useLogLifeCycle; function useLogLifeCycle(logFn, name = "") {
    const component = useComponent();
    let loggedName = `${component.constructor.name}`;
    if (name) {
        loggedName = `${component.constructor.name} ${name}`;
    }
    onError(() => {
        logFn(`onError ${loggedName}`);
    });
    onMounted(() => {
        logFn(`onMounted ${loggedName}`);
    });
    onPatched(() => {
        logFn(`onPatched ${loggedName}`);
    });
    onRendered(() => {
        logFn(`onRendered ${loggedName}`);
    });
    onWillDestroy(() => {
        logFn(`onWillDestroy ${loggedName}`);
    });
    onWillPatch(() => {
        logFn(`onWillPatch ${loggedName}`);
    });
    onWillRender(() => {
        logFn(`onWillRender ${loggedName}`);
    });
    onWillStart(() => {
        logFn(`onWillStart ${loggedName}`);
    });
    onWillUnmount(() => {
        logFn(`onWillUnmount ${loggedName}`);
    });
    onWillUpdateProps(() => {
        logFn(`onWillUpdateProps ${loggedName}`);
    });
}

/**
 * Returns the list of nodes containing n2 (included) that do not contain n1.
 *
 * @param {Node} n1
 * @param {Node} n2
 * @returns {Node[]}
 */
function getDifferentParents(n1, n2) {
    const parents = [n2];
    while (parents[0].parentNode) {
        const parent = parents[0].parentNode;
        if (parent.contains(n1)) {
            break;
        }
        parents.unshift(parent);
    }
    return parents;
}

/**
 * Helper performing a drag and drop sequence.
 *
 * - 'from' is used to determine the element on which the drag will start;
 * - 'target' will determine the element on which the first one will be dropped.
 *
 * The first element will be dragged by its center, and will be dropped on the
 * bottom-right inner pixel of the target element. This behavior covers both
 * cases of appending the first element to the end of a list (toSelector =
 * target list) or moving it at the position of another element, effectively
 * placing the first element before the second (toSelector = other element).
 *
 * A position can be given to drop the first element above, below, or on the
 * side of the second (default is inside, as specified above).
 *
 * Note that only the last event is awaited, since all the others are
 * considered to be synchronous.
 *
 * @param {Element | string} from
 * @param {Element | string} to
 * @param {Position} [position]
 */
__exports.dragAndDrop = dragAndDrop; async function dragAndDrop(from, to, position) {
    const { drop } = await drag(from);
    await drop(to, position);
}

/**
 * Helper performing a drag.
 *
 * - the 'from' selector is used to determine the element on which the drag will
 *  start;
 * - the 'target' selector will determine the element on which the dragged element will be
 * moved.
 *
 * Returns a drop function
 *
 * @param {Element | string} from
 */
__exports.drag = drag; async function drag(from, pointerType = "mouse") {
    const assertIsDragging = (fn, endDrag) => {
        return {
            async [fn.name](...args) {
                if (dragEndReason) {
                    throw new Error(
                        `Cannot execute drag helper '${fn.name}': drag sequence has been ended by '${dragEndReason}'.`
                    );
                }
                await fn(...args);
                if (endDrag) {
                    dragEndReason = fn.name;
                }
            },
        }[fn.name];
    };

    const cancel = assertIsDragging(async function cancel() {
        await triggerEvent(window, null, "keydown", { key: "Escape" });
    }, true);

    /**
     * @param {Element | string} [to]
     * @param {Position} [position]
     */
    const drop = assertIsDragging(async function drop(to, position) {
        if (to) {
            await moveTo(to, position);
        }
        await triggerEvent(target || source, null, "pointerup", targetPosition);
    }, true);

    /**
     * @param {Element | string} selector
     */
    const getEl = (selector) =>
        selector instanceof Element ? selector : fixture.querySelector(selector);

    /**
     * @param {Position} [position]
     */
    const getTargetPosition = (position) => {
        const tRect = target.getBoundingClientRect();
        const tPos = {
            clientX: Math.floor(tRect.x),
            clientY: Math.floor(tRect.y),
        };
        if (position && typeof position === "object") {
            // x and y coordinates start from the element's initial coordinates
            tPos.clientX += position.x || 0;
            tPos.clientY += position.y || 0;
        } else {
            const positions = typeof position === "string" ? position.split("-") : [];

            // X position
            if (positions.includes("left")) {
                tPos.clientX -= 1;
            } else if (positions.includes("right")) {
                tPos.clientX += Math.ceil(tRect.width) + 1;
            } else {
                tPos.clientX += Math.floor(tRect.width / 2);
            }

            // Y position
            if (positions.includes("top")) {
                tPos.clientY -= 1;
            } else if (positions.includes("bottom")) {
                tPos.clientY += Math.ceil(tRect.height) + 1;
            } else {
                tPos.clientY += Math.floor(tRect.height / 2);
            }
        }
        return tPos;
    };

    /**
     * @param {Element | string} [to]
     * @param {Position} [position]
     */
    const moveTo = assertIsDragging(async function moveTo(to, position) {
        target = getEl(to);
        if (!target) {
            return;
        }

        // Recompute target position
        targetPosition = getTargetPosition(position);

        // Move, enter and drop the element on the target
        await triggerEvent(source, null, "pointermove", targetPosition);

        // "pointerenter" is fired on every parent of `target` that do not contain
        // `from` (typically: different parent lists).
        for (const parent of getDifferentParents(source, target)) {
            triggerEvent(parent, null, "pointerenter", targetPosition);
        }
        await nextTick();

        return dragHelpers;
    }, false);

    const dragHelpers = { cancel, drop, moveTo };
    const fixture = getFixture();

    const source = getEl(from instanceof Element ? from : fixture.querySelector(from));
    const sourceRect = source.getBoundingClientRect();

    let dragEndReason = null;
    let target;
    let targetPosition;

    // Pointer down on main target
    await triggerEvent(source, null, "pointerdown", {
        pointerType,
        clientX: sourceRect.x + sourceRect.width / 2,
        clientY: sourceRect.y + sourceRect.height / 2,
    });

    return dragHelpers;
}

__exports.clickDropdown = clickDropdown; async function clickDropdown(target, fieldName) {
    const dropdownInput = target.querySelector(`[name='${fieldName}'] .dropdown input`);
    dropdownInput.focus();
    await nextTick();
    await click(dropdownInput);
}

__exports.clickOpenedDropdownItem = clickOpenedDropdownItem; async function clickOpenedDropdownItem(target, fieldName, itemContent) {
    const dropdowns = target.querySelectorAll(`[name='${fieldName}'] .dropdown .dropdown-menu`);
    if (dropdowns.length === 0) {
        throw new Error(`No dropdown found for field ${fieldName}`);
    } else if (dropdowns.length > 1) {
        throw new Error(`Found ${dropdowns.length} dropdowns for field ${fieldName}`);
    }
    const dropdownItems = dropdowns[0].querySelectorAll("li");
    const indexToClick = Array.from(dropdownItems)
        .map((html) => html.textContent)
        .indexOf(itemContent);
    if (indexToClick === -1) {
        throw new Error(`The element '${itemContent}' does not exist in the dropdown`);
    }
    await click(dropdownItems[indexToClick]);
}

__exports.selectDropdownItem = selectDropdownItem; async function selectDropdownItem(target, fieldName, itemContent) {
    await clickDropdown(target, fieldName);
    await clickOpenedDropdownItem(target, fieldName, itemContent);
}

__exports.getNodesTextContent = getNodesTextContent; function getNodesTextContent(nodes) {
    return Array.from(nodes).map((n) => n.textContent);
}

/**
 * Click to open the dropdown on a many2one
 */
__exports.clickOpenM2ODropdown = clickOpenM2ODropdown; async function clickOpenM2ODropdown(el, fieldName, selector) {
    const m2oSelector = `${selector || ""} .o_field_many2one[name=${fieldName}] input`;
    const matches = el.querySelectorAll(m2oSelector);
    if (matches.length !== 1) {
        throw new Error(
            `cannot open m2o: selector ${selector} has been found ${matches.length} instead of 1`
        );
    }

    await click(matches[0]);
    return matches[0];
}

/**
 * Click on the active (highlighted) selection in a m2o dropdown.
 */
// TO FIX
__exports.clickM2OHighlightedItem = clickM2OHighlightedItem; async function clickM2OHighlightedItem(el, fieldName, selector) {
    const m2oSelector = `${selector || ""} .o_field_many2one[name=${fieldName}] input`;
    // const $dropdown = $(m2oSelector).autocomplete('widget');
    const matches = el.querySelectorAll(m2oSelector);
    if (matches.length !== 1) {
        throw new Error(
            `cannot open m2o: selector ${selector} has been found ${matches.length} instead of 1`
        );
    }
    // clicking on an li (no matter which one), will select the focussed one
    return click(matches[0].parentElement.querySelector("li"));
}

// X2Many
__exports.addRow = addRow; async function addRow(target, selector) {
    await click(target.querySelector(`${selector ? selector : ""} .o_field_x2many_list_row_add a`));
}

__exports.removeRow = removeRow; async function removeRow(target, index) {
    await click(target.querySelectorAll(".o_list_record_remove")[index]);
}

return __exports;
});
;

/*****************************************
*  Filepath: /web/static/tests/utils.js  *
*  Lines: 724                            *
*****************************************/
odoo.define('@web/../tests/utils', ['@web/core/utils/ui', '@web/../tests/helpers/cleanup', '@web/../tests/helpers/utils'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { isVisible } = require("@web/core/utils/ui");
const { registerCleanup } = require("@web/../tests/helpers/cleanup");
const {
    click: webClick,
    getFixture,
    makeDeferred,
    triggerEvents: webTriggerEvents,
} = require("@web/../tests/helpers/utils");

/**
 * Create a file object, which can be used for drag-and-drop.
 *
 * @param {Object} data
 * @param {string} data.name
 * @param {string} data.content
 * @param {string} data.contentType
 * @returns {Promise<Object>} resolved with file created
 */
__exports.createFile = createFile; function createFile(data) {
    // Note: this is only supported by Chrome, and does not work in Incognito mode
    return new Promise(function (resolve, reject) {
        var requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
        if (!requestFileSystem) {
            throw new Error("FileSystem API is not supported");
        }
        requestFileSystem(window.TEMPORARY, 1024 * 1024, function (fileSystem) {
            fileSystem.root.getFile(data.name, { create: true }, function (fileEntry) {
                fileEntry.createWriter(function (fileWriter) {
                    fileWriter.onwriteend = function (e) {
                        fileSystem.root.getFile(data.name, {}, function (fileEntry) {
                            fileEntry.file(function (file) {
                                resolve(file);
                            });
                        });
                    };
                    fileWriter.write(new Blob([data.content], { type: data.contentType }));
                });
            });
        });
    });
}

/**
 * Create a fake object 'dataTransfer', linked to some files,
 * which is passed to drag and drop events.
 *
 * @param {Object[]} files
 * @returns {Object}
 */
function createFakeDataTransfer(files) {
    return {
        dropEffect: "all",
        effectAllowed: "all",
        files,
        items: [],
        types: ["Files"],
    };
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then clicks on it.
 *
 * @param {string} selector
 * @param {ContainsOptions} [options] forwarded to `contains`
 * @param {boolean} [options.shiftKey]
 */
__exports.click = click; async function click(selector, options = {}) {
    const { shiftKey } = options;
    delete options.shiftKey;
    await contains(selector, { click: { shiftKey }, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then dragenters `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.dragenterFiles = dragenterFiles; async function dragenterFiles(selector, files, options) {
    await contains(selector, { dragenterFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then dragovers `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.dragoverFiles = dragoverFiles; async function dragoverFiles(selector, files, options) {
    await contains(selector, { dragoverFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then drops `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.dropFiles = dropFiles; async function dropFiles(selector, files, options) {
    await contains(selector, { dropFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then inputs `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.inputFiles = inputFiles; async function inputFiles(selector, files, options) {
    await contains(selector, { inputFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then pastes `files` on it.
 *
 * @param {string} selector
 * @param {Object[]} files
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.pasteFiles = pasteFiles; async function pasteFiles(selector, files, options) {
    await contains(selector, { pasteFiles: files, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then focuses on it.
 *
 * @param {string} selector
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.focus = focus; async function focus(selector, options) {
    await contains(selector, { setFocus: true, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then inserts the given `content`.
 *
 * @param {string} selector
 * @param {string} content
 * @param {ContainsOptions} [options] forwarded to `contains`
 * @param {boolean} [options.replace=false]
 */
__exports.insertText = insertText; async function insertText(selector, content, options = {}) {
    const { replace = false } = options;
    delete options.replace;
    await contains(selector, { ...options, insertText: { content, replace } });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then sets its `scrollTop` to the given value.
 *
 * @param {string} selector
 * @param {number|"bottom"} scrollTop
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.scroll = scroll; async function scroll(selector, scrollTop, options) {
    await contains(selector, { setScroll: scrollTop, ...options });
}

/**
 * Waits until exactly one element matching the given `selector` is present in
 * `options.target` and then triggers `event` on it.
 *
 * @param {string} selector
 * @param {(import("@web/../tests/helpers/utils").EventType|[import("@web/../tests/helpers/utils").EventType, EventInit])[]} events
 * @param {ContainsOptions} [options] forwarded to `contains`
 */
__exports.triggerEvents = triggerEvents; async function triggerEvents(selector, events, options) {
    await contains(selector, { triggerEvents: events, ...options });
}

function log(ok, message) {
    if (window.QUnit) {
        QUnit.assert.ok(ok, message);
    } else {
        if (ok) {
            console.log(message);
        } else {
            console.error(message);
        }
    }
}

let hasUsedContainsPositively = false;
if (window.QUnit) {
    QUnit.testStart(() => (hasUsedContainsPositively = false));
}
/**
 * @typedef {[string, ContainsOptions]} ContainsTuple tuple representing params of the contains
 *  function, where the first element is the selector, and the second element is the options param.
 * @typedef {Object} ContainsOptions
 * @property {ContainsTuple} [after] if provided, the found element(s) must be after the element
 *  matched by this param.
 * @property {ContainsTuple} [before] if provided, the found element(s) must be before the element
 *  matched by this param.
 * @property {Object} [click] if provided, clicks on the first found element
 * @property {ContainsTuple|ContainsTuple[]} [contains] if provided, the found element(s) must
 *  contain the provided sub-elements.
 * @property {number} [count=1] numbers of elements to be found to declare the contains check
 *  as successful. Elements are counted after applying all other filters.
 * @property {Object[]} [dragenterFiles] if provided, dragenters the given files on the found element
 * @property {Object[]} [dragoverFiles] if provided, dragovers the given files on the found element
 * @property {Object[]} [dropFiles] if provided, drops the given files on the found element
 * @property {Object[]} [inputFiles] if provided, inputs the given files on the found element
 * @property {{content:string, replace:boolean}} [insertText] if provided, adds to (or replace) the
 *  value of the first found element by the given content.
 * @property {ContainsTuple} [parent] if provided, the found element(s) must have as
 *  parent the node matching the parent parameter.
 * @property {Object[]} [pasteFiles] if provided, pastes the given files on the found element
 * @property {number|"bottom"} [scroll] if provided, the scrollTop of the found element(s)
 *  must match.
 *  Note: when using one of the scrollTop options, it is advised to ensure the height is not going
 *  to change soon, by checking with a preceding contains that all the expected elements are in DOM.
 * @property {boolean} [setFocus] if provided, focuses the first found element.
 * @property {boolean} [shadowRoot] if provided, targets the shadowRoot of the found elements.
 * @property {number|"bottom"} [setScroll] if provided, sets the scrollTop on the first found
 *  element.
 * @property {HTMLElement} [target=getFixture()]
 * @property {string[]} [triggerEvents] if provided, triggers the given events on the found element
 * @property {string} [text] if provided, the textContent of the found element(s) or one of their
 *  descendants must match. Use `textContent` option for a match on the found element(s) only.
 * @property {string} [textContent] if provided, the textContent of the found element(s) must match.
 *  Prefer `text` option for a match on the found element(s) or any of their descendants, usually
 *  allowing for a simpler and less specific selector.
 * @property {string} [value] if provided, the input value of the found element(s) must match.
 *  Note: value changes are not observed directly, another mutation must happen to catch them.
 * @property {boolean} [visible] if provided, the found element(s) must be (in)visible
 */
class Contains {
    /**
     * @param {string} selector
     * @param {ContainsOptions} [options={}]
     */
    constructor(selector, options = {}) {
        this.selector = selector;
        this.options = options;
        this.options.count ??= 1;
        this.options.targetParam = this.options.target;
        this.options.target ??= getFixture();
        let selectorMessage = `${this.options.count} of "${this.selector}"`;
        if (this.options.visible !== undefined) {
            selectorMessage = `${selectorMessage} ${
                this.options.visible ? "visible" : "invisible"
            }`;
        }
        if (this.options.targetParam) {
            selectorMessage = `${selectorMessage} inside a specific target`;
        }
        if (this.options.parent) {
            selectorMessage = `${selectorMessage} inside a specific parent`;
        }
        if (this.options.contains) {
            selectorMessage = `${selectorMessage} with a specified sub-contains`;
        }
        if (this.options.text !== undefined) {
            selectorMessage = `${selectorMessage} with text "${this.options.text}"`;
        }
        if (this.options.textContent !== undefined) {
            selectorMessage = `${selectorMessage} with textContent "${this.options.textContent}"`;
        }
        if (this.options.value !== undefined) {
            selectorMessage = `${selectorMessage} with value "${this.options.value}"`;
        }
        if (this.options.scroll !== undefined) {
            selectorMessage = `${selectorMessage} with scroll "${this.options.scroll}"`;
        }
        if (this.options.after !== undefined) {
            selectorMessage = `${selectorMessage} after a specified element`;
        }
        if (this.options.before !== undefined) {
            selectorMessage = `${selectorMessage} before a specified element`;
        }
        this.selectorMessage = selectorMessage;
        if (this.options.contains && !Array.isArray(this.options.contains[0])) {
            this.options.contains = [this.options.contains];
        }
        if (this.options.count) {
            hasUsedContainsPositively = true;
        } else if (!hasUsedContainsPositively) {
            throw new Error(
                `Starting a test with "contains" of count 0 for selector "${this.selector}" is useless because it might immediately resolve. Start the test by checking that an expected element actually exists.`
            );
        }
        /** @type {string} */
        this.successMessage = undefined;
        /** @type {function} */
        this.executeError = undefined;
    }

    /**
     * Starts this contains check, either immediately resolving if there is a
     * match, or registering appropriate listeners and waiting until there is a
     * match or a timeout (resolving or rejecting respectively).
     *
     * Success or failure messages will be logged with QUnit as well.
     *
     * @returns {Promise}
     */
    run() {
        this.done = false;
        this.def = makeDeferred();
        this.scrollListeners = new Set();
        this.onScroll = () => this.runOnce("after scroll");
        if (!this.runOnce("immediately")) {
            this.timer = setTimeout(
                () => this.runOnce("Timeout of 5 seconds", { crashOnFail: true }),
                5000
            );
            this.observer = new MutationObserver((mutations) => {
                try {
                    this.runOnce("after mutations");
                } catch (e) {
                    this.def.reject(e); // prevents infinite loop in case of programming error
                }
            });
            this.observer.observe(this.options.target, {
                attributes: true,
                childList: true,
                subtree: true,
            });
            registerCleanup(() => {
                if (!this.done) {
                    this.runOnce("Test ended", { crashOnFail: true });
                }
            });
        }
        return this.def;
    }

    /**
     * Runs this contains check once, immediately returning the result (or
     * undefined), and possibly resolving or rejecting the main promise
     * (and printing QUnit log) depending on options.
     * If undefined is returned it means the check was not successful.
     *
     * @param {string} whenMessage
     * @param {Object} [options={}]
     * @param {boolean} [options.crashOnFail=false]
     * @param {boolean} [options.executeOnSuccess=true]
     * @returns {HTMLElement[]|undefined}
     */
    runOnce(whenMessage, { crashOnFail = false, executeOnSuccess = true } = {}) {
        const res = this.select();
        if (res?.length === this.options.count || crashOnFail) {
            // clean before doing anything else to avoid infinite loop due to side effects
            this.observer?.disconnect();
            clearTimeout(this.timer);
            for (const el of this.scrollListeners ?? []) {
                el.removeEventListener("scroll", this.onScroll);
            }
            this.done = true;
        }
        if (res?.length === this.options.count) {
            this.successMessage = `Found ${this.selectorMessage} (${whenMessage})`;
            if (executeOnSuccess) {
                this.executeAction(res[0]);
            }
            return res;
        } else {
            this.executeError = () => {
                let message = `Failed to find ${this.selectorMessage} (${whenMessage}).`;
                message = res
                    ? `${message} Found ${res.length} instead.`
                    : `${message} Parent not found.`;
                if (this.parentContains) {
                    if (this.parentContains.successMessage) {
                        log(true, this.parentContains.successMessage);
                    } else {
                        this.parentContains.executeError();
                    }
                }
                log(false, message);
                this.def?.reject(new Error(message));
                for (const childContains of this.childrenContains || []) {
                    if (childContains.successMessage) {
                        log(true, childContains.successMessage);
                    } else {
                        childContains.executeError();
                    }
                }
            };
            if (crashOnFail) {
                this.executeError();
            }
        }
    }

    /**
     * Executes the action(s) given to this constructor on the found element,
     * prints the success messages, and resolves the main deferred.

     * @param {HTMLElement} el
     */
    executeAction(el) {
        let message = this.successMessage;
        if (this.options.click) {
            message = `${message} and clicked it`;
            webClick(el, undefined, {
                mouseEventInit: this.options.click,
                skipDisabledCheck: true,
                skipVisibilityCheck: true,
            });
        }
        if (this.options.dragenterFiles) {
            message = `${message} and dragentered ${this.options.dragenterFiles.length} file(s)`;
            const ev = new Event("dragenter", { bubbles: true });
            Object.defineProperty(ev, "dataTransfer", {
                value: createFakeDataTransfer(this.options.dragenterFiles),
            });
            el.dispatchEvent(ev);
        }
        if (this.options.dragoverFiles) {
            message = `${message} and dragovered ${this.options.dragoverFiles.length} file(s)`;
            const ev = new Event("dragover", { bubbles: true });
            Object.defineProperty(ev, "dataTransfer", {
                value: createFakeDataTransfer(this.options.dragoverFiles),
            });
            el.dispatchEvent(ev);
        }
        if (this.options.dropFiles) {
            message = `${message} and dropped ${this.options.dropFiles.length} file(s)`;
            const ev = new Event("drop", { bubbles: true });
            Object.defineProperty(ev, "dataTransfer", {
                value: createFakeDataTransfer(this.options.dropFiles),
            });
            el.dispatchEvent(ev);
        }
        if (this.options.inputFiles) {
            message = `${message} and inputted ${this.options.inputFiles.length} file(s)`;
            // could not use _createFakeDataTransfer as el.files assignation will only
            // work with a real FileList object.
            const dataTransfer = new window.DataTransfer();
            for (const file of this.options.inputFiles) {
                dataTransfer.items.add(file);
            }
            el.files = dataTransfer.files;
            /**
             * Changing files programatically is not supposed to trigger the event but
             * it does in Chrome versions before 73 (which is on runbot), so in that
             * case there is no need to make a manual dispatch, because it would lead to
             * the files being added twice.
             */
            const versionRaw = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
            const chromeVersion = versionRaw ? parseInt(versionRaw[2], 10) : false;
            if (!chromeVersion || chromeVersion >= 73) {
                el.dispatchEvent(new Event("change"));
            }
        }
        if (this.options.insertText !== undefined) {
            message = `${message} and inserted text "${this.options.insertText.content}" (replace: ${this.options.insertText.replace})`;
            el.focus();
            if (this.options.insertText.replace) {
                el.value = "";
                el.dispatchEvent(new window.KeyboardEvent("keydown", { key: "Backspace" }));
                el.dispatchEvent(new window.KeyboardEvent("keyup", { key: "Backspace" }));
                el.dispatchEvent(new window.InputEvent("input"));
            }
            for (const char of this.options.insertText.content) {
                el.value += char;
                el.dispatchEvent(new window.KeyboardEvent("keydown", { key: char }));
                el.dispatchEvent(new window.KeyboardEvent("keyup", { key: char }));
                el.dispatchEvent(new window.InputEvent("input"));
            }
            el.dispatchEvent(new window.InputEvent("change"));
        }
        if (this.options.pasteFiles) {
            message = `${message} and pasted ${this.options.pasteFiles.length} file(s)`;
            const ev = new Event("paste", { bubbles: true });
            Object.defineProperty(ev, "clipboardData", {
                value: createFakeDataTransfer(this.options.pasteFiles),
            });
            el.dispatchEvent(ev);
        }
        if (this.options.setFocus) {
            message = `${message} and focused it`;
            el.focus();
        }
        if (this.options.setScroll !== undefined) {
            message = `${message} and set scroll to "${this.options.setScroll}"`;
            el.scrollTop =
                this.options.setScroll === "bottom" ? el.scrollHeight : this.options.setScroll;
        }
        if (this.options.triggerEvents) {
            message = `${message} and triggered "${this.options.triggerEvents.join(", ")}" events`;
            webTriggerEvents(el, null, this.options.triggerEvents, {
                skipVisibilityCheck: true,
            });
        }
        if (this.parentContains) {
            log(true, this.parentContains.successMessage);
        }
        log(true, message);
        for (const childContains of this.childrenContains) {
            log(true, childContains.successMessage);
        }
        this.def?.resolve();
    }

    /**
     * Returns the found element(s) according to this constructor setup.
     * If undefined is returned it means the parent cannot be found
     *
     * @returns {HTMLElement[]|undefined}
     */
    select() {
        const target = this.selectParent();
        if (!target) {
            return;
        }
        const baseRes = [...target.querySelectorAll(this.selector)]
            .map((el) => (this.options.shadowRoot ? el.shadowRoot : el))
            .filter((el) => el);
        /** @type {Contains[]} */
        this.childrenContains = [];
        const res = baseRes.filter((el, currentIndex) => {
            let condition =
                (this.options.textContent === undefined ||
                    el.textContent.trim() === this.options.textContent) &&
                (this.options.value === undefined || el.value === this.options.value) &&
                (this.options.scroll === undefined ||
                    (this.options.scroll === "bottom"
                        ? Math.abs(el.scrollHeight - el.clientHeight - el.scrollTop) <= 1
                        : Math.abs(el.scrollTop - this.options.scroll) <= 1));
            if (condition && this.options.text !== undefined) {
                if (
                    el.textContent.trim() !== this.options.text &&
                    [...el.querySelectorAll("*")].every(
                        (el) => el.textContent.trim() !== this.options.text
                    )
                ) {
                    condition = false;
                }
            }
            if (condition && this.options.contains) {
                for (const param of this.options.contains) {
                    const childContains = new Contains(param[0], { ...param[1], target: el });
                    if (
                        !childContains.runOnce(`as child of el ${currentIndex + 1})`, {
                            executeOnSuccess: false,
                        })
                    ) {
                        condition = false;
                    }
                    this.childrenContains.push(childContains);
                }
            }
            if (condition && this.options.visible !== undefined) {
                if (isVisible(el) !== this.options.visible) {
                    condition = false;
                }
            }
            if (condition && this.options.after) {
                const afterContains = new Contains(this.options.after[0], {
                    ...this.options.after[1],
                    target,
                });
                const afterEl = afterContains.runOnce(`as "after"`, {
                    executeOnSuccess: false,
                })?.[0];
                if (
                    !afterEl ||
                    !(el.compareDocumentPosition(afterEl) & Node.DOCUMENT_POSITION_PRECEDING)
                ) {
                    condition = false;
                }
                this.childrenContains.push(afterContains);
            }
            if (condition && this.options.before) {
                const beforeContains = new Contains(this.options.before[0], {
                    ...this.options.before[1],
                    target,
                });
                const beforeEl = beforeContains.runOnce(`as "before"`, {
                    executeOnSuccess: false,
                })?.[0];
                if (
                    !beforeEl ||
                    !(el.compareDocumentPosition(beforeEl) & Node.DOCUMENT_POSITION_FOLLOWING)
                ) {
                    condition = false;
                }
                this.childrenContains.push(beforeContains);
            }
            return condition;
        });
        if (
            this.options.scroll !== undefined &&
            this.scrollListeners &&
            baseRes.length === this.options.count &&
            res.length !== this.options.count
        ) {
            for (const el of baseRes) {
                if (!this.scrollListeners.has(el)) {
                    this.scrollListeners.add(el);
                    el.addEventListener("scroll", this.onScroll);
                }
            }
        }
        return res;
    }

    /**
     * Returns the found element that should act as the target (parent) for the
     * main selector.
     * If undefined is returned it means the parent cannot be found.
     *
     * @returns {HTMLElement|undefined}
     */
    selectParent() {
        if (this.options.parent) {
            this.parentContains = new Contains(this.options.parent[0], {
                ...this.options.parent[1],
                target: this.options.target,
            });
            return this.parentContains.runOnce(`as parent`, { executeOnSuccess: false })?.[0];
        }
        return this.options.target;
    }
}

/**
 * Waits until `count` elements matching the given `selector` are present in
 * `options.target`.
 *
 * @param {string} selector
 * @param {ContainsOptions} [options]
 * @returns {Promise}
 */
__exports.contains = contains; async function contains(selector, options) {
    await new Contains(selector, options).run();
}

const stepState = {
    expectedSteps: null,
    deferred: null,
    timeout: null,
    currentSteps: [],

    clear() {
        clearTimeout(this.timeout);
        this.timeout = null;
        this.deferred = null;
        this.currentSteps = [];
        this.expectedSteps = null;
    },

    check({ crashOnFail = false } = {}) {
        const success =
            this.expectedSteps.length === this.currentSteps.length &&
            this.expectedSteps.every((s, i) => s === this.currentSteps[i]);
        if (!success && !crashOnFail) {
            return;
        }
        QUnit.config.current.assert.verifySteps(this.expectedSteps);
        if (success) {
            this.deferred.resolve();
        } else {
            this.deferred.reject(new Error("Steps do not match."));
        }
        this.clear();
    },
};

if (window.QUnit) {
    QUnit.testStart(() =>
        registerCleanup(() => {
            if (stepState.expectedSteps) {
                stepState.check({ crashOnFail: true });
            } else {
                stepState.clear();
            }
        })
    );
}

/**
 * Indicate the completion of a test step. This step must then be verified by
 * calling `assertSteps`.
 *
 * @param {string} step
 */
__exports.step = step; function step(step) {
    stepState.currentSteps.push(step);
    QUnit.config.current.assert.step(step);
    if (stepState.expectedSteps) {
        stepState.check();
    }
}

/**
 * Wait for the given steps to be executed or for the timeout to be reached.
 *
 * @param {string[]} steps
 */
__exports.assertSteps = assertSteps; function assertSteps(steps) {
    if (stepState.expectedSteps) {
        stepState.check({ crashOnFail: true });
    }
    stepState.expectedSteps = steps;
    stepState.deferred = makeDeferred();
    stepState.timeout = setTimeout(() => stepState.check({ crashOnFail: true }), 2000);
    stepState.check();
    return stepState.deferred;
}

return __exports;
});
;

/********************************************************************
*  Filepath: /mail/static/tests/tours/activity_date_format_tour.js  *
*  Lines: 49                                                        *
********************************************************************/
odoo.define('@mail/../tests/tours/activity_date_format_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("mail_activity_date_format", {
    test: true,
    steps: () => [
        {
            trigger: "button:contains('Activities')",
        },
        {
            trigger: "input[id*='activity_type_id']",
            run: "click",
        },
        {
            trigger: ".dropdown-item:contains('To-Do')",
        },
        {
            trigger: "div[name='summary'] input",
            run: "text Go Party",
        },
        {
            trigger: "button:contains('Schedule')",
        },
        {
            trigger: ".o-mail-Activity:contains('Go Party')",
        },
        {
            trigger: ".fa-info-circle",
            run: "click",
        },
        // Format expected from the server for 9 AM at the first day of 2024 is date_format = "%d/%b/%y", time_format = "%I:%M:%S %p".
        {
            trigger: ".o-mail-Activity-details tr:contains('Created') td:contains('01/Jan/24 09:00:00 AM')",
            isCheck: true,
        },
        {
            // Default due date is 5 days after creation date.
            trigger: ".o-mail-Activity-details tr:contains('Due on') td:contains('06/Jan/24')",
            isCheck: true,
        }
    ],
});

return __exports;
});
;

/************************************************************************
*  Filepath: /mail/static/tests/tours/discuss_channel_as_guest_tour.js  *
*  Lines: 34                                                            *
************************************************************************/
odoo.define('@mail/../tests/tours/discuss_channel_as_guest_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("discuss_channel_as_guest_tour.js", {
        test: true,
        steps: () => [
            {
                content: "Channel secret token has been hidden on welcome page",
                trigger: ".o-mail-WelcomePage",
                run() {
                    if (!window.location.pathname.startsWith("/discuss/channel")) {
                        console.error("Channel secret token is still present in URL.");
                    }
                },
            },
            {
                content: "Click join",
                trigger: "button[title='Join Channel']",
                extraTrigger: ".o-mail-Thread",
            },
            {
                content: "Check that we are on channel page",
                trigger: ".o-mail-Thread",
                run() {},
            },
        ],
    });

return __exports;
});
;

/**********************************************************************
*  Filepath: /mail/static/tests/tours/discuss_channel_public_tour.js  *
*  Lines: 159                                                         *
**********************************************************************/
odoo.define('@mail/../tests/tours/discuss_channel_public_tour', ['@web/core/registry', '@web/../tests/utils'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");
const { click, contains, createFile, inputFiles } = require("@web/../tests/utils");

registry.category("web_tour.tours").add("discuss_channel_public_tour.js", {
    test: true,
    steps: () => [
        {
            trigger: ".o-mail-DiscussPublic",
            extraTrigger: ".o-mail-Thread",
            run() {},
        },
        {
            content: "Check that we are on channel page",
            trigger: ".o-mail-Thread",
            run() {
                if (!window.location.pathname.startsWith("/discuss/channel")) {
                    console.error("Channel secret token is still present in URL.");
                }
                const { missing, failed, unloaded } = odoo.loader.findErrors();
                if ([missing, failed, unloaded].some((arr) => arr.length)) {
                    console.error(
                        "Couldn't load all JS modules.",
                        JSON.stringify({ missing, failed, unloaded })
                    );
                }
                document.body.classList.add("o_discuss_channel_public_modules_loaded");
            },
            extraTrigger: ".o_discuss_channel_public_modules_loaded",
        },
        {
            content: "Wait for all modules loaded check in previous step",
            trigger: ".o_discuss_channel_public_modules_loaded",
            run() {},
        },
        {
            content: "Write something in composer",
            trigger: ".o-mail-Composer-input",
            run: "text cheese",
        },
        {
            content: "Add one file in composer",
            trigger: ".o-mail-Composer button[aria-label='Attach files']",
            async run() {
                await inputFiles(".o-mail-Composer-coreMain .o_input_file", [
                    await createFile({
                        content: "hello, world",
                        contentType: "text/plain",
                        name: "text.txt",
                    }),
                ]);
            },
        },
        {
            content: "Check the earlier provided attachment is listed",
            trigger: '.o-mail-AttachmentCard[title="text.txt"]',
            extra_trigger: ".o-mail-AttachmentCard:not(.o-isUploading)", // waiting the attachment to be uploaded
            run() {},
        },
        {
            content: "Send message",
            trigger: ".o-mail-Composer-send:enabled",
        },
        {
            content: "Check message is shown",
            trigger: '.o-mail-Message-body:contains("cheese")',
            run() {},
        },
        {
            content: "Check message contains the attachment",
            trigger: '.o-mail-Message .o-mail-AttachmentCard:contains("text.txt")',
            run() {},
        },
        {
            content: "Click on more menu",
            trigger: ".o-mail-Message [title='Expand']",
        },
        {
            content: "Click on edit",
            trigger: ".o-mail-Message [title='Edit']",
        },
        {
            content: "Edit message",
            trigger: ".o-mail-Message .o-mail-Composer-input",
            run: "text vegetables",
        },
        {
            content: "Add one more file in composer",
            trigger: ".o-mail-Message .o-mail-Composer button[aria-label='Attach files']",
            async run() {
                inputFiles(".o-mail-Message .o-mail-Composer-coreMain .o_input_file", [
                    await createFile({
                        content: "hello 2",
                        contentType: "text/plain",
                        name: "extra.txt",
                    }),
                ]);
            },
        },
        {
            content: "Check the earlier provided extra attachment is listed",
            trigger: '.o-mail-Message .o-mail-Composer .o-mail-AttachmentCard[title="extra.txt"]',
            extra_trigger:
                ".o-mail-Message .o-mail-Composer .o-mail-AttachmentCard:not(.o-isUploading)", // waiting the attachment to be uploaded
            run() {},
        },
        {
            content: "Save edited message",
            trigger: ".o-mail-Message a:contains(save)",
        },
        {
            content: "Check message is edited",
            trigger: '.o-mail-Message-body:contains("vegetables")',
            run() {},
        },
        {
            content: "Check edited message contains the first attachment",
            trigger: '.o-mail-Message .o-mail-AttachmentCard:contains("text.txt")',
            run() {},
        },
        {
            content: "Check edited message contains the extra attachment",
            trigger: '.o-mail-Message .o-mail-AttachmentCard:contains("extra.txt")',
            async run() {
                await click(".o-mail-AttachmentCard-unlink", {
                    parent: [".o-mail-AttachmentCard", { text: "extra.txt" }],
                });
                await click(".btn", { text: "Ok", parent: [".modal", { text: "Confirmation" }] });
                await contains(".o-mail-AttachmentCard", { text: "extra.txt", count: 0 });
            },
        },
        {
            content: "Open search panel",
            trigger: "button[title='Search Messages']",
        },
        {
            content: "Search for the attachment name",
            trigger: ".o_searchview_input",
            run: "text text.txt",
        },
        {
            content: "Trigger the search",
            trigger: "button[aria-label='Search button']",
        },
        {
            content: "Check that searched message contains the attachment",
            trigger:
                '.o-mail-SearchMessagesPanel .o-mail-Message .o-mail-AttachmentCard:contains("text.txt")',
            run() {},
        },
    ],
});

return __exports;
});
;

/***************************************************************
*  Filepath: /mail/static/tests/tours/discuss_channel_tour.js  *
*  Lines: 104                                                  *
***************************************************************/
odoo.define('@mail/../tests/tours/discuss_channel_tour', ['@web/core/l10n/translation', '@web/core/registry', '@odoo/owl'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { _t } = require("@web/core/l10n/translation");
const { registry } = require("@web/core/registry");

const { markup } = require("@odoo/owl");

registry.category("web_tour.tours").add("discuss_channel_tour", {
    url: "/web#action=mail.action_discuss",
    sequence: 80,
    steps: () => [
        {
            trigger: ".o-mail-DiscussSidebarCategory-channel .o-mail-DiscussSidebarCategory-add",
            content: markup(
                _t(
                    "<p>Channels make it easy to organize information across different topics and groups.</p> <p>Try to <b>create your first channel</b> (e.g. sales, marketing, product XYZ, after work party, etc).</p>"
                )
            ),
            position: "bottom",
        },
        {
            trigger: ".o-discuss-ChannelSelector input",
            content: markup(_t("<p>Create a channel here.</p>")),
            position: "bottom",
            auto: true,
            run: function (actions) {
                var t = new Date().getTime();
                actions.text("SomeChannel_" + t, this.$anchor);
            },
        },
        {
            trigger: ".o-discuss-ChannelSelector-list",
            extra_trigger: ".o-discuss-ChannelSelector-suggestion",
            content: markup(_t("<p>Create a public or private channel.</p>")),
            position: "right",
            run() {
                document.querySelector(".o-discuss-ChannelSelector-suggestion").click();
            },
        },
        {
            trigger: ".o-mail-Composer-input",
            content: markup(
                _t(
                    "<p><b>Write a message</b> to the members of the channel here.</p> <p>You can notify someone with <i>'@'</i> or link another channel with <i>'#'</i>. Start your message with <i>'/'</i> to get the list of possible commands.</p>"
                )
            ),
            position: "top",
            width: 350,
            run: function (actions) {
                var t = new Date().getTime();
                actions.text("SomeText_" + t, this.$anchor);
            },
        },
        {
            trigger: ".o-mail-Composer-send:enabled",
            content: _t("Post your message on the thread"),
            position: "top",
        },
        {
            trigger: ".o-mail-Message",
            content: _t("Click on your message"),
            position: "top",
        },
        {
            trigger: ".o-mail-Message [title='Expand']",
            content: _t("Expand options"),
            position: "top",
        },
        {
            trigger: ".o-mail-Message [title='Mark as Todo']",
            content: markup(
                _t("Messages can be <b>starred</b> to remind you to check back later.")
            ),
            position: "bottom",
        },
        {
            trigger: "button:contains(Starred)",
            content: _t(
                "Once a message has been starred, you can come back and review it at any time here."
            ),
            position: "bottom",
        },
        {
            trigger: ".o-mail-DiscussSidebarCategory-chat .o-mail-DiscussSidebarCategory-add",
            content: markup(
                _t(
                    "<p><b>Chat with coworkers</b> in real-time using direct messages.</p><p><i>You might need to invite users from the Settings app first.</i></p>"
                )
            ),
            position: "bottom",
        },
        {
            trigger: ".o-discuss-ChannelSelector",
            auto: true,
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/******************************************************************************
*  Filepath: /mail/static/tests/tours/mail_activity_schedule_from_chatter.js  *
*  Lines: 61                                                                  *
******************************************************************************/
odoo.define('@mail/../tests/tours/mail_activity_schedule_from_chatter', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("mail_activity_schedule_from_chatter", {
    test: true,
    steps: () => [
        {
            trigger: "button:contains('Activities')",
        },
        {
            trigger: "input[id*='activity_type_id']",
            run: "click",
        },
        {
            trigger: ".dropdown-item:contains('Call')",
        },
        {
            trigger: "input[id*='activity_type_id']:propValue('Call')",
            run: () => {},
        },
        {
            extra_trigger: "button:contains('Schedule')",
            trigger: "input[id*='activity_type_id']",
            run: "click",
        },
        {
            trigger: ".dropdown-item:contains('To-Do')",
        },
        {
            trigger: "div[name='summary'] input",
            run: "text Play Mario Party",
        },
        {
            trigger: "button:contains('Schedule')",
        },
        {
            trigger: ".o-mail-Activity:contains('Play Mario Party')",
        },
        {
            trigger: "button:contains('Activities')",
        },
        {
            trigger: "div[name='summary'] input",
            run: "text Play Mario Kart",
        },
        {
            trigger: "button:contains('Mark as Done')",
        },
        {
            trigger: ".o-mail-Message:contains('Play Mario Kart')",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/******************************************************************
*  Filepath: /mail/static/tests/tours/mail_composer_test_tour.js  *
*  Lines: 134                                                     *
******************************************************************/
odoo.define('@mail/../tests/tours/mail_composer_test_tour', ['@web/core/registry', '@web/../tests/utils'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");
const { contains, createFile, inputFiles } = require("@web/../tests/utils");

/**
 * This tour depends on data created by python test in charge of launching it.
 * It is not intended to work when launched from interface. It is needed to test
 * an action (action manager) which is not possible to test with QUnit.
 * @see mail/tests/test_mail_composer.py
 */
registry.category("web_tour.tours").add("mail/static/tests/tours/mail_composer_test_tour.js", {
    test: true,
    steps: () => [
        {
            content: "Wait for the chatter to be fully loaded",
            trigger: ".o-mail-Chatter",
            async run() {
                await contains(".o-mail-Message", { count: 1 });
            },
        },
        {
            content: "Click on Send Message",
            trigger: "button:contains(Send message)",
        },
        {
            content: "Write something in composer",
            trigger: ".o-mail-Composer-input",
            run: "text blahblah @Not",
        },
        {
            content: "Mention a partner",
            trigger: ".o-mail-Composer-suggestion:contains(Not A Demo User)",
        },
        {
            content: "Add one file in composer",
            trigger: ".o-mail-Composer button[aria-label='Attach files']",
            async run() {
                await inputFiles(".o-mail-Composer-coreMain .o_input_file", [
                    await createFile({
                        content: "hello, world",
                        contentType: "text/plain",
                        name: "text.txt",
                    }),
                ]);
            },
        },
        {
            content: "Open full composer",
            trigger: "button[aria-label='Full composer']",
            extra_trigger: ".o-mail-AttachmentCard:not(.o-isUploading)", // waiting the attachment to be uploaded
        },
        {
            content: "Check composer keeps open after pushing Escape",
            trigger: ".o_mail_composer_form_view",
            run: () => {
                window.dispatchEvent(
                    new KeyboardEvent("keydown", {
                        bubbles: true,
                        key: "Escape",
                    })
                );
            },
        },
        {
            content: "Check the earlier provided attachment is listed",
            trigger: '.o_attachment[title="text.txt"]',
            run() {},
        },
        {
            content: "Check subject is autofilled",
            trigger: '[name="subject"] input',
            run() {
                const subjectValue = document.querySelector('[name="subject"] input').value;
                if (subjectValue !== "Jane") {
                    console.error(
                        `Full composer should have "Jane" in subject input (actual: ${subjectValue})`
                    );
                }
            },
        },
        {
            content: "Check composer content is kept",
            trigger: '.o_field_html[name="body"]',
            run() {
                const bodyContent = document.querySelector(
                    '.o_field_html[name="body"]'
                ).textContent;
                if (!bodyContent.includes("blahblah @Not A Demo User")) {
                    console.error(
                        `Full composer should contain text from small composer ("blahblah @Not A Demo User") in body input (actual: ${bodyContent})`
                    );
                }
                const mentionLink = document.querySelector(
                    '.o_field_html[name="body"] a'
                ).textContent;
                if (!mentionLink.includes("@Not A Demo User")) {
                    console.error(
                        `Full composer should contain mention link from small composer ("@Not A Demo User") in body input)`
                    );
                }
            },
        },
        {
            content: "Open templates",
            trigger: '.o_field_widget[name="template_id"] input',
        },
        {
            content: "Check a template is listed",
            in_modal: false,
            trigger: '.ui-autocomplete .ui-menu-item a:contains("Test template")',
            run() {},
        },
        {
            content: "Send message",
            trigger: ".o_mail_send",
        },
        {
            content: "Check message is shown",
            trigger: '.o-mail-Message-body:contains("blahblah @Not A Demo User")',
        },
        {
            content: "Check message contains the attachment",
            trigger: '.o-mail-Message .o-mail-AttachmentCard:contains("text.txt")',
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/***********************************************************************
*  Filepath: /mail/static/tests/tours/mail_message_load_order_tour.js  *
*  Lines: 76                                                           *
***********************************************************************/
odoo.define('@mail/../tests/tours/mail_message_load_order_tour', ['@web/core/registry', '@web/../tests/utils'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");
const { contains, scroll } = require("@web/../tests/utils");

registry.category("web_tour.tours").add("mail_message_load_order_tour", {
    test: true,
    steps: () => [
        {
            trigger: ".o-mail-DiscussSidebarChannel:contains(MyTestChannel)",
            run: "click",
        },
        {
            trigger: ".o-mail-Thread .o-mail-Message",
            async run() {
                await contains(".o-mail-Thread .o-mail-Message", { count: 30 });
                await contains(".o-mail-Thread", { scroll: "bottom" });
            },
        },
        {
            trigger: "*[title='Pinned Messages']",
            run: "click",
        },
        {
            trigger: ".o-mail-MessageCard-jump",
            run: "click",
        },
        {
            // Messages depends on FETCH_LIMIT (currently set to 30) in
            // the thread service. Thus, at first load the message range
            // will be (31 - 60). This trigger ensures the next messages
            // are fetched after jumping to the message.
            trigger: ".o-mail-Thread .o-mail-Message:first:not(:contains(31))",
            async run() {
                await contains(".o-mail-Thread .o-mail-Message", { count: 16 });
                await contains(".o-mail-Thread", { scroll: 0 });
                // ensure 1 - 16 are loaded in order: 15 below and the
                // one we're loading messages around.
                const messages = Array.from(
                    document.querySelectorAll(".o-mail-Thread .o-mail-Message-content")
                ).map((el) => el.innerText);
                for (let i = 0; i < 16; i++) {
                    if (messages[i] !== (i + 1).toString()) {
                        throw new Error("Wrong message order after loading around");
                    }
                }
                await scroll(".o-mail-Thread", "bottom");
            },
        },
        {
            // After jumping to the pinned message, the message range
            // was (1 -16): 15 before (but none were found), 15 after
            // and the pinned message itself. This trigger ensures the
            // next messages are fetched after scrolling to the bottom.
            trigger: ".o-mail-Thread .o-mail-Message:contains(17)",
            async run() {
                await contains(".o-mail-Thread .o-mail-Message", { count: 46 });
                // ensure 1 - 46  are loaded in order.
                const messages = Array.from(
                    document.querySelectorAll(".o-mail-Thread .o-mail-Message-content")
                ).map((el) => el.innerText);
                for (let i = 0; i < 46; i++) {
                    if (messages[i] !== (i + 1).toString()) {
                        throw new Error("Wrong message order after loading after");
                    }
                }
            },
        },
    ],
});

return __exports;
});
;

/*********************************************************************************
*  Filepath: /mail/static/tests/tours/mail_template_dynamic_placeholder_tour.js  *
*  Lines: 184                                                                    *
*********************************************************************************/
odoo.define('@mail/../tests/tours/mail_template_dynamic_placeholder_tour', ['@web/core/registry', '@web/../tests/utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");
const { contains } = require("@web/../tests/utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("mail_template_dynamic_placeholder_tour", {
    test: true,
    url: "/web",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: 'Go into the Setting "app"',
            trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
        },
        {
            content: "Open email templates",
            trigger: 'button[name="open_mail_templates"]',
        },
        {
            content: "Create a new email template",
            trigger: "button.o_list_button_add",
        },
        {
            content: 'Insert # inside "Subject" input',
            trigger: 'div[name="subject"] input[type="text"]',
            async run(actions) {
                actions.text(`no_model_id #`, this.$anchor);
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { bubbles: true, key: "#" })
                );
                await contains("div[name='subject'] input[type='text']", {
                    value: "no_model_id #",
                });
                await contains(".o_notification", {
                    text: "You need to select a model before opening the dynamic placeholder selector.",
                });
            },
        },
        {
            content: 'Select "Contact" model',
            trigger: 'div[name="model_id"] input[type="text"]',
            run: "text Contact",
        },
        {
            content: "Wait for the autocomplete RPC",
            trigger: 'div[name="model_id"] .ui-autocomplete:contains("Contact")',
            isCheck: true,
        },
        {
            content: "Click on contact",
            trigger: 'div[name="model_id"] .ui-autocomplete',
            run: async function () {
                const contact = Array.from(
                    document.querySelectorAll(
                        'div[name="model_id"] .ui-autocomplete .dropdown-item'
                    )
                ).find((el) => el.textContent === "Contact");
                await contact.click();
            },
        },
        {
            content: "Wait for the drop down to disappear",
            trigger: 'div[name="model_id"] .o-autocomplete:not(:has(.ui-autocomplete))',
            run: async () => {
                // Ensure the system has registered a correct model value before
                // we try to open the DPH.
                // It seems that the autocomplete validation can be very slow.
                await new Promise((r) => setTimeout(r, 200));
            },
        },
        {
            content: 'Retry insert # inside "Subject" input',
            trigger: 'div[name="subject"] input[type="text"]',
            run(actions) {
                actions.text(`yes_model_id #`, this.$anchor);
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { bubbles: true, key: "#" })
                );
            },
        },
        {
            content: "Check if the dynamic placeholder popover is opened",
            trigger: "div.o_model_field_selector_popover",
            isCheck: true,
        },
        {
            content: "filter the dph result",
            trigger: "div.o_model_field_selector_popover_search input[type='text']",
            run: "text name",
        },
        {
            content: "Click on the first entry of the dynamic placeholder",
            trigger: 'div.o_model_field_selector_popover li:first-child button:contains("Name")',
        },
        {
            content: "Enter a default value",
            trigger:
                'div.o_model_field_selector_popover .o_model_field_selector_default_value_input input[type="text"]',
            run: "text defValue",
        },
        {
            content: "Click on the the dynamic placeholder default value",
            trigger: "div.o_model_field_selector_popover li:first-child button",
        },
        {
            content: "Wait for the popover to disappear",
            trigger: "body:not(:has(.o_model_field_selector_popover))",
        },
        {
            content: "Check if subject value was correclty updated",
            trigger: 'div[name="subject"] input[type="text"]',
            run() {
                const subjectValue = this.$anchor[0].value;
                const correctValue = "yes_model_id {{object.name or '''defValue'''}}";
                if (subjectValue !== correctValue) {
                    console.error(
                        `Email template should have "${correctValue}" in subject input (actual: ${subjectValue})`
                    );
                }
            },
        },
        {
            content: "Insert tesxt inside editable",
            trigger: ".note-editable.odoo-editor-editable",
            run(actions) {
                actions.text(`/`, this.$anchor);
                document.querySelector(".note-editable").dispatchEvent(
                    new InputEvent("input", {
                        inputType: "insertText",
                        data: "/",
                    })
                );
            },
        },
        {
            content: "Click on the the dynamic placeholder commandBar options",
            trigger: "div.oe-powerbox-commandWrapper:contains(Dynamic Placeholder)",
        },
        {
            content: "Check if the dynamic placeholder popover is opened",
            trigger: "div.o_model_field_selector_popover",
        },
        {
            content: "filter the dph result",
            trigger: "div.o_model_field_selector_popover_search input[type='text']",
            run: "text name",
        },
        {
            content: "Click on the first entry of the dynamic placeholder",
            trigger: 'div.o_model_field_selector_popover li:first-child button:contains("Name")',
        },
        {
            content: "Enter a default value",
            trigger:
                'div.o_model_field_selector_popover .o_model_field_selector_default_value_input input[type="text"]',
            run: "text defValue",
        },
        {
            content: "Click on the the dynamic placeholder default value",
            trigger: "div.o_model_field_selector_popover li:first-child button",
        },
        {
            content: "Ensure the editable contain the dynamic placeholder t tag",
            trigger:
                ".note-editable.odoo-editor-editable t[t-out=\"object.name or '''defValue'''\"]",
        },
        {
            content: "Discard form changes",
            trigger: "button.o_form_button_cancel",
        },
        {
            content: "Wait for the form view to disappear",
            trigger: "body:not(:has(.o_form_sheet))",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/***********************************************************************
*  Filepath: /mail/static/tests/tours/user_modify_own_profile_tour.js  *
*  Lines: 41                                                           *
***********************************************************************/
odoo.define('@mail/../tests/tours/user_modify_own_profile_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

/**
 * Verify that a user can modify their own profile information.
 */
registry.category("web_tour.tours").add("mail/static/tests/tours/user_modify_own_profile_tour.js", {
    test: true,
    steps: () => [
        {
            content: "Open user account menu",
            trigger: ".o_user_menu button",
        },
        {
            content: "Open preferences / profile screen",
            trigger: "[data-menu=settings]",
        },
        {
            content: "Update the email address",
            trigger: 'div[name="email"] input',
            run: "text updatedemail@example.com",
        },
        {
            content: "Save the form",
            trigger: 'button[name="preference_save"]',
            extra_trigger: "body.modal-open",
        },
        {
            content: "Wait until the modal is closed",
            isCheck: true,
            trigger: "body:not(.modal-open)",
        },
    ],
});

return __exports;
});
;

/***************************************************
*  Filepath: /portal/static/tests/tours/portal.js  *
*  Lines: 39                                       *
***************************************************/
odoo.define('@portal/../tests/tours/portal', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('portal_load_homepage', {
    test: true,
    url: '/my',
    steps: () => [
        {
            content: "Check portal is loaded",
            trigger: 'a[href*="/my/account"]:contains("Edit"):first',
        },
        {
            content: "Load my account details",
            trigger: 'input[value="Joel Willis"]',
            isCheck: true,
        },
        {
            content: 'type a different phone number',
            trigger: 'input[name="phone"]',
            run: 'text +1 555 666 7788',
        },
        {
            content: "Submit the form",
            trigger: 'button[type=submit]',
        },
        {
            content: "Check that we are back on the portal",
            trigger: 'a[href*="/my/account"]:contains("Edit"):first',
            isCheck: true,
        }
    ]
});

return __exports;
});
;

/*************************************************************
*  Filepath: /account/static/tests/tours/tax_group_tests.js  *
*  Lines: 135                                                *
*************************************************************/
odoo.define('@account/../tests/tours/tax_group_tests', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('account_tax_group', {
    test: true,
    url: "/web",
    steps: () => [stepUtils.showAppsMenuItem(),
    {
        id: 'account_menu_click',
        content: "Go to Invoicing",
        trigger: '.o_app[data-menu-xmlid="account.menu_finance"]',
    },
    {
        content: "Go to Vendors",
        trigger: 'span:contains("Vendors")',
    },
    {
        content: "Go to Bills",
        trigger: 'a:contains("Bills")',
    },
    {
        extra_trigger: '.o_breadcrumb .text-truncate:contains("Bills")',
        content: "Create new bill",
        trigger: '.o_control_panel_main_buttons .d-none .o_list_button_add',
    },
    // Set a vendor
    {
        content: "Add vendor",
        trigger: 'div.o_field_widget.o_field_res_partner_many2one[name="partner_id"] div input',
        run: 'text Account Tax Group Partner',
    },
    {
        content: "Valid vendor",
        trigger: '.ui-menu-item a:contains("Account Tax Group Partner")',
    },
    // Add First product
    {
        content: "Add items",
        trigger: 'div[name="invoice_line_ids"] .o_field_x2many_list_row_add a:contains("Add a line")',
    },
    {
        content: "Select input",
        trigger: 'div[name="invoice_line_ids"] .o_selected_row .o_list_many2one[name="product_id"] input',
    },
    {
        content: "Type item",
        trigger: 'div[name="invoice_line_ids"] .o_selected_row .o_list_many2one[name="product_id"] input',
        run: "text Account Tax Group Product",
    },
    {
        content: "Valid item",
        trigger: '.ui-menu-item-wrapper:contains("Account Tax Group Product")',
    },
    // Save account.move
    {
        content: "Save the account move",
        trigger: '.o_form_button_save',
    },
    ...stepUtils.saveForm(),
    // Edit tax group amount
    {
        content: "Edit tax group amount",
        trigger: '.o_tax_group_edit',
    },
    {
        content: "Modify the input value",
        trigger: '.o_tax_group_edit_input input',
        run: function (actions) {
            $('.o_tax_group_edit_input input').val(200);
            $('.o_tax_group_edit_input input').select();
            $('.o_tax_group_edit_input input').blur();
        },
    },
    // Check new value for total (with modified tax_group_amount).
    {
        content: "Valid total amount",
        trigger: 'span[name="amount_total"]:contains("800")',
    },
    // Modify the quantity of the object
    {
        content: "Select item quantity",
        trigger: 'div[name="invoice_line_ids"] tbody tr.o_data_row .o_list_number[name="quantity"]',
    },
    {
        content: "Change item quantity",
        trigger: 'div[name="invoice_line_ids"] tbody tr.o_data_row .o_list_number[name="quantity"] input',
        run: 'text 2',
    },
    {
        content: "Valid the new value",
        trigger: 'div[name="invoice_line_ids"] tbody tr.o_data_row .o_list_number[name="quantity"] input',
        run: function (actions) {
            let keydownEvent = jQuery.Event('keydown');
            keydownEvent.key = "Enter";
            this.$anchor.trigger(keydownEvent);
        },
    },
    // Save form
    {
        content: "Save the account move",
        trigger: '.o_form_button_save',
    },
    ...stepUtils.saveForm(),
    // Check new tax group value
    {
        content: "Check new value of tax group",
        trigger: '.o_tax_group_amount_value:contains("120")',
    },
    {
        content: "Edit tax value",
        trigger: '.o_tax_group_edit_input input',
        run: 'text 2'
    },
    {
        content: "Check new value of total",
        trigger: '.oe_subtotal_footer_separator:contains("1,202")',
    },
    {
        content: "Discard changes",
        trigger: '.o_form_button_cancel',
    },
    {
        content: "Check tax value is reset",
        trigger: '.o_tax_group_amount_value:contains("120")',
        isCheck: true,
    },
]});

return __exports;
});
;

/*********************************************************
*  Filepath: /sale/static/tests/tours/sale_signature.js  *
*  Lines: 54                                             *
*********************************************************/
odoo.define('@sale/../tests/tours/sale_signature', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

// This tour relies on data created on the Python test.
registry.category("web_tour.tours").add('sale_signature', {
    test: true,
    url: '/my/quotes',
    steps: () => [
    {
        content: "open the test SO",
        trigger: 'a:containsExact("test SO")',
    },
    {
        content: "click sign",
        trigger: 'a:contains("Sign")',
    },
    {
        content: "check submit is enabled",
        trigger: '.o_portal_sign_submit:enabled',
        run: function () {},
    },
    {
        content: "click select style",
        trigger: '.o_web_sign_auto_select_style button',
    },
    {
        content: "click style 4",
        trigger: '.o_web_sign_auto_select_style .dropdown-item:eq(3)',
    },
    {
        content: "click submit",
        trigger: '.o_portal_sign_submit:enabled',
    },
    {
        content: "check it's confirmed",
        trigger: '#quote_content:contains("Thank You")',
    }, {
        trigger: '#quote_content',
        run: function () {
            window.location.href = window.location.origin + '/web';
        },  // Avoid race condition at the end of the tour by returning to the home page.
    },
    {
        trigger: 'nav',
        run: function() {},
    }
]});

return __exports;
});
;

/*****************************************************************
*  Filepath: /project/static/tests/tours/personal_stage_tour.js  *
*  Lines: 86                                                     *
*****************************************************************/
odoo.define('@project/../tests/tours/personal_stage_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('personal_stage_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
}, {
    content: "Open Pig Project",
    trigger: '.o_kanban_record:contains("Pig")',
}, {
    // Default is grouped by stage, user should not be able to create/edit a column
    content: "Check that there is no create column",
    trigger: "body:not(.o_column_quick_create)",
    run: function () {},
}, {
    content: "Check that there is no create column",
    trigger: "body:not(.o_column_edit)",
    run: function () {},
}, {
    content: "Check that there is no create column",
    trigger: "body:not(.o_column_delete)",
    run: function () {},
}, {
    content: "Go to tasks",
    trigger: 'button[data-menu-xmlid="project.menu_project_management"]',
},{
    content: "Go to my tasks", // My tasks is grouped by personal stage by default
    trigger: 'a[data-menu-xmlid="project.menu_project_management_my_tasks"]',
}, {
    content: "Check that we can create a new stage",
    trigger: '.o_column_quick_create .o_quick_create_folded'
}, {
    content: "Create a new personal stage",
    trigger: 'input.form-control',
    run: 'text Never',
}, {
    content: "Confirm create",
    trigger: '.o_kanban_add',
}, {
    content: "Check that column exists",
    trigger: '.o_kanban_header:contains("Never")',
    run: function () {},
}, {
    content: 'Open column edit dropdown',
    trigger: '.o_kanban_header:eq(0)',
    run: function () {
        document.querySelector('.o_kanban_config.dropdown .dropdown-toggle').dispatchEvent(new Event('click'));
    },
}, {
    content: "Try editing inbox",
    trigger: ".dropdown-item.o_column_edit",
}, {
    content: "Change title",
    trigger: 'div.o_field_char[name="name"] input',
    run: 'text  (Todo)',
}, {
    content: "Save changes",
    trigger: '.btn-primary:contains("Save")',
}, {
    content: "Check that column was updated",
    trigger: '.o_kanban_header:contains("Todo")',
}, {
    content: "Create a personal task from the quick create form",
    trigger: '.o-kanban-button-new',
}, {
    content: "Create a new personal task",
    trigger: 'input.o_input:not(.o_searchview_input)',
    run: 'text New Test Task',
}, {
    content: "Confirm create",
    trigger: '.o_kanban_add',
}, {
    content: "Check that task exists",
    trigger: '.o_kanban_record_title:contains("New Test Task")',
    run: function () {},
}]});

return __exports;
});
;

/*************************************************************************
*  Filepath: /project/static/tests/tours/project_burndown_chart_tour.js  *
*  Lines: 83                                                             *
*************************************************************************/
odoo.define('@project/../tests/tours/project_burndown_chart_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('burndown_chart_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
}, {
    content: 'Open "Burndown Chart Test" project menu',
    trigger: '.o_kanban_record:contains("Burndown Chart Test") .o_dropdown_kanban .dropdown-toggle',
}, {
    content: `Open "Burndown Chart Test" project's "Burndown Chart" view`,
    trigger: '.o_kanban_record:contains("Burndown Chart Test") .o_kanban_manage_reporting div[role="menuitem"] a:contains("Burndown Chart")',
}, {
    content: 'The sort buttons are not rendered',
    trigger: '.o_graph_renderer:not(:has(.btn-group[role=toolbar][aria-label="Sort graph"]))',
    extra_trigger: '.o_graph_renderer',
}, {
    content: 'Remove the project search "Burndown Chart Test"',
    trigger: '.o_searchview_facet:contains("Burndown Chart Test") .o_facet_remove',
}, {
    content: 'Search Burndown Chart',
    trigger: 'input.o_searchview_input',
    run: `text Burndown`,
}, {
    content: 'Validate search',
    trigger: '.o_searchview_autocomplete .o_menu_item:contains("Project")',
}, {
    content: 'Remove the group by "Date: Month > Stage"',
    trigger: '.o_searchview_facet:contains("Date: Month") .o_facet_remove',
}, {
    content: 'A "The Burndown Chart must be grouped by Date and Stage" notification is shown when trying to remove the group by "Date: Month > Stage"',
    trigger: '.o_notification_manager .o_notification:contains("The Burndown Chart must be grouped by Date and Stage") button.o_notification_close',
}, {
    content: 'Open the search panel menu',
    trigger: '.o_control_panel .o_searchview_dropdown_toggler',
}, {
    content: 'The Stage group menu item is invisible',
    trigger: '.o_group_by_menu:not(:has(.o_menu_item:contains("Stage")))',
}, {
    content: 'Open the Date group by sub menu',
    trigger: '.o_group_by_menu button.o_menu_item:contains("Date")',
}, {
    content: 'Click on the selected Date sub menu',
    trigger: '.o_group_by_menu button.o_menu_item:contains("Date") + * .dropdown-item.selected',
    run: function () {
        this.$anchor[0].dispatchEvent(new Event('click'));
    },
}, {
    content: 'A "The Burndown Chart must be grouped by Date" notification is shown when trying to remove the group by "Date: Month > Stage"',
    trigger: '.o_notification_manager .o_notification:contains("The Burndown Chart must be grouped by Date") button.o_notification_close',
}, {
    content: 'Open the search panel menu',
    trigger: '.o_control_panel .o_searchview_dropdown_toggler',
}, {
    content: 'Open the Date filter sub menu',
    trigger: '.o_filter_menu button.o_menu_item:contains("Date")',
}, {
    content: 'Click on the first Date filter sub menu',
    trigger: '.o_filter_menu .o_menu_item:contains("Date") + * .dropdown-item:first-child',
    run: function () {
        this.$anchor[0].dispatchEvent(new Event('click'));
    },
}, {
    content: 'Close the Date filter menu',
    trigger: '.o_graph_renderer',
}, {
    content: 'Open the search panel menu',
    trigger: '.o_control_panel .o_searchview_dropdown_toggler',
}, {
    content: 'The comparison menu is not rendered',
    trigger: ':not(:has(.o_comparison_menu))',
    isCheck: true,
}]});

return __exports;
});
;

/******************************************************************
*  Filepath: /project/static/tests/tours/project_sharing_tour.js  *
*  Lines: 162                                                     *
******************************************************************/
odoo.define('@project/../tests/tours/project_sharing_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

const projectSharingSteps = [...stepUtils.goToAppSteps("project.menu_main_pm", 'Go to the Project App.'), {
    trigger: '.o_kanban_record:contains("Project Sharing") .o_dropdown_kanban .dropdown-toggle',
    content: 'Open the project dropdown.'
}, {
    trigger: '.o_kanban_record:contains("Project Sharing") .dropdown-menu a:contains("Share")',
    content: 'Start editing the project.',
}, {
    trigger: 'div.o_field_radio[name="access_mode"] div.o_radio_item > input[data-value="edit"]',
    content: 'Select "Edit" as Access mode in the "Share Project" wizard.',
}, {
    trigger: '.o_field_many2many_tags_email[name=partner_ids] input',
    extra_trigger: 'label[for=partner_ids_0]:contains("Invite People")',
    content: 'Select the user portal as collaborator to the "Project Sharing" project.',
    run: 'text Georges',
}, {
    trigger: '.ui-autocomplete a.dropdown-item:contains("Georges")',
    in_modal: false,
}, {
    trigger: 'footer > button[name="action_share_record"]',
    content: 'Confirm the project sharing with this portal user.',
}, {
    trigger: '.o_web_client',
    content: 'Go to project portal view to select the "Project Sharing" project',
    run: function () {
        window.location.href = window.location.origin + '/my/projects';
    },
}, {
    id: 'project_sharing_feature',
    trigger: 'table > tbody > tr a:has(span:contains(Project Sharing))',
    content: 'Select "Project Sharing" project to go to project sharing feature for this project.',
}, {
    trigger: 'iframe .o_project_sharing',
    content: 'Wait the project sharing feature be loaded',
    run: function () {},
}, {
    trigger: 'iframe button.o-kanban-button-new',
    content: 'Click "Create" button',
    run: 'click',
}, {
    trigger: 'iframe .o_kanban_quick_create .o_field_widget[name="name"] input',
    content: 'Create Task',
    run: 'text Test Create Task',
}, {
    trigger: 'iframe .o_kanban_quick_create .o_kanban_edit',
    content: 'Go to the form view of this new task',
}, {
    trigger: 'iframe div[name="stage_id"] div.o_statusbar_status button[aria-checked="false"]:contains(Done)',
    content: 'Change the stage of the task.',
}, {
    trigger: 'iframe .o_portal_chatter_composer_input .o_portal_chatter_composer_body textarea',
    content: 'Write a message in the chatter of the task',
    run: 'text I create a new task for testing purpose.',
}, {
    trigger: 'iframe .o_portal_chatter_composer_input .o_portal_chatter_composer_body button[name="send_message"]',
    content: 'Send the message',
}, {
    trigger: 'iframe ol.breadcrumb > li.o_back_button > a:contains(Project Sharing)',
    content: 'Go back to the kanban view',
}, {
    trigger: 'iframe .o_searchview_dropdown_toggler',
    content: 'open the search panel menu',
}, {
    trigger: 'iframe .o_filter_menu .dropdown-item:first-child',
    content: 'click on the first item in the filter menu',
}, {
    trigger: 'iframe .o_group_by_menu .dropdown-item:first-child',
    content: 'click on the first item in the group by menu',
}, {
    trigger: 'iframe .o_favorite_menu .o_add_favorite',
    content: 'open accordion "save current search" in favorite menu',
}, {
    trigger: 'iframe .o_favorite_menu .o_accordion_values .o_save_favorite',
    content: 'click to "save" button in favorite menu',
}, {
    trigger: 'iframe .o_filter_menu .dropdown-item:first-child',
    content: 'click on the first item in the filter menu',
}, {
    trigger: 'iframe .o_group_by_menu .dropdown-item:first-child',
    content: 'click on the first item in the group by menu',
}, {
    trigger: 'iframe .o_favorite_menu .o_accordion_values .o_save_favorite',
    content: 'click to "save" button in favorite menu',
}, {
    trigger: 'iframe button.o_switch_view.o_list',
    content: 'Go to the list view',
}, {
    extra_trigger: 'iframe .o_list_view',
    trigger: 'iframe .o_optional_columns_dropdown_toggle',
}, {
    trigger: 'iframe .o_optional_columns_dropdown .dropdown-item:contains("Milestone")',
    isCheck: true,
}, {
    trigger: 'iframe .o_list_view',
    content: 'Check the list view',
    isCheck: true,
}];

registry.category("web_tour.tours").add('project_sharing_tour', {
    test: true,
    url: '/web',
    steps: () => {
        return projectSharingSteps;
    } 
});

registry.category("web_tour.tours").add("portal_project_sharing_tour", {
    test: true,
    url: "/my/projects",
    steps: () => {
        // The begining of the project sharing feature
        const projectSharingStepIndex = projectSharingSteps.findIndex(s => s?.id === 'project_sharing_feature');
        return projectSharingSteps.slice(projectSharingStepIndex, projectSharingSteps.length);
    }
});

registry.category("web_tour.tours").add("portal_project_sharing_tour_with_disallowed_milestones", {
    test: true,
    url: "/my/projects",
    steps: () => [
        {
            id: 'project_sharing_feature',
            trigger: 'table > tbody > tr a:has(span:contains(Project Sharing))',
            content: 'Select "Project Sharing" project to go to project sharing feature for this project.',
        },
        {
            trigger: 'iframe .o_project_sharing',
            content: 'Wait the project sharing feature be loaded',
            isCheck: true,
        },
        {
            trigger: 'iframe button.o_switch_view.o_list',
            content: 'Go to the list view',
        },
        {
            extra_trigger: 'iframe .o_list_view',
            trigger: 'iframe .o_optional_columns_dropdown_toggle',
        },
        {
            extra_trigger: 'iframe .o_optional_columns_dropdown .dropdown-item',
            trigger: 'iframe .o_optional_columns_dropdown',
            run: function() {
                const optionalFields = Array.from(this.$anchor[0].ownerDocument.querySelectorAll(".dropdown-item"))
                    .map(e => e.textContent);

                if (optionalFields.includes("Milestone")) {
                    throw new Error("the Milestone field should be absent as allow_milestones is set to False");
                }
            }
        },
    ]
});

return __exports;
});
;

/****************************************************************************
*  Filepath: /project/static/tests/tours/project_tags_filter_tour_tests.js  *
*  Lines: 54                                                                *
****************************************************************************/
odoo.define('@project/../tests/tours/project_tags_filter_tour_tests', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function changeFilter(filterName) {
    return [
        {
            trigger: '.o_control_panel_actions .o_searchview_dropdown_toggler',
            content: 'open searchview menu',
        },
        {
            trigger: `.o_favorite_menu .dropdown-item span:contains("${filterName}")`,
        },
        {
            trigger: '.o_control_panel_actions .o_searchview_dropdown_toggler',
            content: 'close searchview menu',
        },
    ];
}

registry.category("web_tour.tours").add('project_tags_filter_tour',
    {
        test: true,
        url: '/web',
        steps: () => [stepUtils.showAppsMenuItem(),{
    trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
},
...changeFilter("Corkscrew tail tag filter"),
{
    trigger: '.o_kanban_group:has(.o_kanban_header:has(span:contains("pig"))) .o_kanban_record:has(span:contains("Pigs"))',
    extra_trigger: '.o_kanban_group:has(.o_kanban_header:has(span:contains("goat"))):not(:has(.o_kanban_record))',
    content: 'check that the corkscrew tail filter has taken effect',
    run: () => {},
}, ...changeFilter("horned tag filter"),
{
    trigger: '.o_kanban_group:has(.o_kanban_header:has(span:contains("goat"))) .o_kanban_record:has(span:contains("Goats"))',
    extra_trigger: '.o_kanban_group:has(.o_kanban_header:has(span:contains("pig"))):not(:has(.o_kanban_record))',
    content: 'check that the horned filter has taken effect',
    run: () => {},
}, ...changeFilter("4 Legged tag filter"),
{
    trigger: '.o_kanban_group:has(.o_kanban_header:has(span:contains("goat"))) .o_kanban_record:has(span:contains("Goats"))',
    extra_trigger: '.o_kanban_group:has(.o_kanban_header:has(span:contains("pig"))) .o_kanban_record:has(span:contains("Pigs"))',
    content: 'check that the 4 legged filter has taken effect',
    run: () => {},
},
]});

return __exports;
});
;

/**********************************************************
*  Filepath: /project/static/tests/tours/project_tour.js  *
*  Lines: 87                                              *
**********************************************************/
odoo.define('@project/../tests/tours/project_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('project_test_tour', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(), {
        trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
    }, {
        trigger: '.o-kanban-button-new',
        extra_trigger: '.o_project_kanban',
        width: 200,
    }, {
        trigger: '.o_project_name input',
        run: 'text New Project',
        id: 'project_creation',
    }, {
        trigger: '.o_open_tasks',
        run: function (actions) {
            actions.auto('.modal:visible .btn.btn-primary');
        },
    }, {
        trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
        run: function (actions) {
            actions.text("New", this.$anchor.find("input"));
        },
    }, {
        trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
        auto: true,
    }, {
        trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
        extra_trigger: '.o_kanban_group',
        run: function (actions) {
            actions.text("Done", this.$anchor.find("input"));
        },
    }, {
        trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
        auto: true,
    }, {
        trigger: '.o-kanban-button-new',
        extra_trigger: '.o_kanban_group:eq(0)'
    }, {
        trigger: '.o_kanban_quick_create div.o_field_char[name=display_name] input',
        extra_trigger: '.o_kanban_project_tasks',
        run: 'text New task'
    }, {
        trigger: '.o_kanban_quick_create .o_kanban_add',
        extra_trigger: '.o_kanban_project_tasks',
        id: "quick_create_tasks",
    }, {
        trigger: '.o_field_text[name="name"] textarea',
        content: 'Set task name',
        run: 'text New task',
    }, {
        trigger: 'div[name="user_ids"].o_field_many2many_tags_avatar input',
        content: 'Assign the task to you',
        run: 'click',
    }, {
        trigger: 'ul.ui-autocomplete a .o_avatar_many2x_autocomplete',
        content: 'Assign the task to you',
    }, {
        trigger: 'a[name="sub_tasks_page"]',
        content: 'Open sub-tasks notebook section',
        run: 'click',
    }, {
        trigger: '.o_field_subtasks_one2many .o_list_renderer a[role="button"]',
        content: 'Add a subtask',
        run: 'click',
    }, {
        trigger: '.o_field_subtasks_one2many div[name="name"] input',
        content: 'Set subtask name',
        run: 'text new subtask'
    }, {
        trigger: 'button[special="save"]',
        extra_trigger: '.o_field_many2many_tags_avatar .o_m2m_avatar',
        content: 'Save task',
    },
]});

return __exports;
});
;

/***********************************************************************
*  Filepath: /project/static/tests/tours/project_update_tour_tests.js  *
*  Lines: 189                                                          *
***********************************************************************/
odoo.define('@project/../tests/tours/project_update_tour_tests', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function openProjectUpdateAndReturnToTasks(view, viewClass) {
    return [{
            trigger: '.o_project_updates_breadcrumb',
            content: 'Open Project Update from view : ' + view,
            extra_trigger: `.${viewClass}`,
        }, {
            trigger: ".o-kanban-button-new",
            content: "Create a new update from project task view : " + view,
            extra_trigger: '.o_project_update_kanban_view',
        }, {
            trigger: "button.o_form_button_cancel",
            content: "Discard project update from project task view : " + view,
        }, {
            trigger: ".o_switch_view.o_list",
            content: "Go to list of project update from view " + view,
        }, {
            trigger: '.o_back_button',
            content: 'Go back to the task view : ' + view,
            // extra_trigger: '.o_list_view', // FIXME: [XBO] uncomment it when the sample data will be displayed after discarding the creation of a project update record.
        }, {
            trigger: `.${viewClass}`,
            content: 'Check the task view : ' + view,
            isCheck: true,
        }
    ];
}

registry.category("web_tour.tours").add('project_update_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
}, {
    trigger: '.o-kanban-button-new',
    extra_trigger: '.o_project_kanban',
    width: 200,
}, {
    trigger: '.o_project_name input',
    run: 'text New Project'
}, {
    trigger: '.o_open_tasks',
    run: function (actions) {
        actions.auto('.modal:visible .btn.btn-primary');
    },
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
    run: function (actions) {
        actions.text("New", this.$anchor.find("input"));
    },
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
    auto: true,
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
    extra_trigger: '.o_kanban_group',
    run: function (actions) {
        actions.text("Done", this.$anchor.find("input"));
    },
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
    auto: true,
}, {
    trigger: '.o-kanban-button-new',
    extra_trigger: '.o_kanban_group:eq(0)'
}, {
    trigger: '.o_kanban_quick_create div.o_field_char[name=display_name] input',
    extra_trigger: '.o_kanban_project_tasks',
    run: 'text New task'
}, {
    trigger: '.o_kanban_quick_create .o_kanban_add',
    extra_trigger: '.o_kanban_project_tasks'
}, {
    trigger: '.o-kanban-button-new',
    extra_trigger: '.o_kanban_group:eq(0)'
}, {
    trigger: '.o_kanban_quick_create div.o_field_char[name=display_name] input',
    extra_trigger: '.o_kanban_project_tasks',
    run: 'text Second task'
}, {
    trigger: '.o_kanban_quick_create .o_kanban_add',
    extra_trigger: '.o_kanban_project_tasks'
}, {
    trigger: '.o_kanban_group:nth-child(2) .o_kanban_header',
    run: function () {
        document.querySelector('.o_kanban_group:nth-child(2) .o_kanban_config.dropdown .dropdown-toggle').dispatchEvent(new Event('click'));
    }
}, {
    trigger: ".dropdown-item.o_column_edit",
}, {
    trigger: ".o_field_widget[name=fold] input",
}, {
    trigger: ".modal-footer button",
}, {
    trigger: ".o_kanban_record .oe_kanban_content",
    extra_trigger: '.o_kanban_project_tasks',
    run: "drag_and_drop .o_kanban_group:eq(1) ",
}, {
    trigger: ".o_project_updates_breadcrumb",
    content: 'Open Updates'
}, {
    trigger: ".o_add_milestone a",
    content: "Add a first milestone"
}, {
    trigger: "div.o_field_widget[name=name] input",
    run: 'text New milestone'
}, {
    trigger: "input[data-field=deadline]",
    run: 'text 12/12/2099'
}, {
    trigger: ".modal-footer .o_form_button_save"
}, {
    trigger: ".o_add_milestone a",
}, {
    trigger: "div.o_field_widget[name=name] input",
    run: 'text Second milestone'
}, {
    trigger: "input[data-field=deadline]",
    run: 'text 12/12/2022'
}, {
    trigger: ".modal-footer .o_form_button_save"
}, {
    trigger: ".o_rightpanel_milestone:eq(1) .o_milestone_detail",
}, {
    trigger: "input[data-field=deadline]",
    run: 'text 12/12/2100'
}, {
    trigger: ".modal-footer .o_form_button_save"
}, {
    trigger: ".o-kanban-button-new",
    content: "Create a new update"
}, {
    trigger: "div.o_field_widget[name=name] input",
    run: 'text New update'
}, {
    trigger: ".o_form_button_save"
}, {
    trigger: ".o_field_widget[name='description'] h1:contains('Activities')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] h3:contains('Milestones')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] div[name='milestone'] ul li:contains('(12/12/2099 => 12/12/2100)')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] div[name='milestone'] ul li:contains('(due 12/12/2022)')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] div[name='milestone'] ul li:contains('(due 12/12/2100)')",
    run: function () {},
}, {
    trigger: '.o_back_button',
    content: 'Go back to the kanban view the project',
}, {
    trigger: '.o_switch_view.o_list',
    content: 'Open List View of Project Updates',
}, {
    trigger: '.o_back_button',
    content: 'Go back to the kanban view the project',
    extra_trigger: '.o_list_view',
}, {
    trigger: '.o_switch_view.o_graph',
    content: 'Open Graph View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Graph", "o_graph_view"), {
    trigger: '.o_switch_view.o_list',
    content: 'Open List View of Tasks',
    extra_trigger: '.o_graph_view',
}, ...openProjectUpdateAndReturnToTasks("List", "o_list_view"), {
    trigger: '.o_switch_view.o_pivot',
    content: 'Open Pivot View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Pivot", "o_pivot_view"), {
    trigger: '.o_switch_view.o_calendar',
    content: 'Open Calendar View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Calendar", "o_calendar_view"), {
    trigger: '.o_switch_view.o_activity',
    content: 'Open Activity View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Activity", "o_activity_view"),
]});

return __exports;
});
;

/**********************************************************************
*  Filepath: /contacts/static/tests/tours/debug_menu_set_defaults.js  *
*  Lines: 77                                                          *
**********************************************************************/
odoo.define('@contacts/../tests/tours/debug_menu_set_defaults', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
    const { registry } = require("@web/core/registry");
    const { stepUtils } = require("@web_tour/tour_service/tour_utils");

    registry.category("web_tour.tours").add('debug_menu_set_defaults', {
        test: true,
        url: '/web?debug=1',
        steps: () => [
            ...stepUtils.goToAppSteps('contacts.menu_contacts', "Open the contacts menu"),
            {
                content: "Create a new contact",
                trigger: '.o-kanban-button-new',
            },
            {
                content: "Check that Company is checked by default, and not Individual",
                trigger: '.o_field_widget[name="company_type"] input[data-value="company"]:checked',
                run: function () {},
            },
            {
                content: "Select the individual radio button",
                trigger: '.o_field_widget[name="company_type"] input[data-value="person"]',
            },
            {
                content: "Open the debug menu",
                trigger: '.o_debug_manager button',
            },
            {
                content: "Click the Set Defaults menu",
                trigger: '.o_debug_manager .dropdown-item:contains(Set Defaults)',
            },
            {
                content: "Choose Company Type = Individual",
                trigger: '#formview_default_fields',
                run: function () {
                    const element_field = document.querySelector('select#formview_default_fields');
                    element_field.value = 'company_type';
                    element_field.dispatchEvent(new Event("change"));
                },
            },
            {
                content: "Check that there are conditions",
                trigger: '#formview_default_conditions',
            },
            {
                content: "Save the new default",
                trigger: 'footer button:contains(Save default)',
            },
            {
                content: "Discard the contact creation",
                trigger: 'button.o_form_button_cancel',
            },
            {
                trigger: '.o_action_manager > .o_kanban_view .o-kanban-button-new',
            },
            {
                content: "Check that Individual is checked instead of Company",
                trigger: '.o_field_widget[name="company_type"] input[data-value="person"]:checked',
                run: function () {},
            },
            {
                content: "Discard the contact creation",
                trigger: 'button.o_form_button_cancel',
            },
            {
                content: "Wait for discard",
                trigger: '.o_control_panel .o-kanban-button-new',
                run() {},
            },
        ]
    });

return __exports;
});
;

/*******************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mailing_campaign.js  *
*  Lines: 67                                                       *
*******************************************************************/
odoo.define('@mass_mailing/../tests/tours/mailing_campaign', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category('web_tour.tours').add('mailing_campaign', {
    test: true,
    url: '/web',
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: 'Select the "Email Marketing" app',
            trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
        },
        {
            content: 'Select "Campaings" Navbar item',
            trigger: '.o_nav_entry[data-menu-xmlid="mass_mailing.menu_email_campaigns"]',
        },
        {
            content: 'Select "Newsletter" campaign',
            trigger: '.oe_kanban_card:contains("Newsletter")',
        },
        {
            content: 'Add a line (create new mailing)',
            trigger: '.o_field_x2many_list_row_add a',
        },
        {
            content: 'Pick the basic theme',
            trigger: 'iframe',
            run(actions) {
                // For some reason the selectors inside the iframe cannot be triggered.
                const link = this.$anchor[0].contentDocument.querySelector('#basic');
                actions.click(link);
            }
        },
        {
            content: 'Fill in Subject',
            trigger: '#subject_0',
            run: 'text TestFromTour',
        },
        {
            content: 'Fill in Mailing list',
            trigger: '#contact_list_ids_0',
            run: 'text Newsletter',
        },
        {
            content: 'Pick "Newsletter" option',
            trigger: '.o_input_dropdown a:contains(Newsletter)',
        },
        {
            content: 'Save form',
            trigger: '.o_form_button_save',
        },
        {
            content: 'Check that newly created record is on the list',
            trigger: '[name="mailing_mail_ids"] td[name="subject"]:contains("TestFromTour")',
            run: () => null,
        },
        ...stepUtils.saveForm(),
    ]
});

return __exports;
});
;

/*****************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mailing_editor.js  *
*  Lines: 64                                                     *
*****************************************************************/
odoo.define('@mass_mailing/../tests/tours/mailing_editor', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('mailing_editor', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
}, {
    trigger: 'button.o_list_button_add',
}, {
    trigger: 'div[name="contact_list_ids"] .o_input_dropdown input[type="text"]',
}, {
    trigger: 'div[name="contact_list_ids"] .ui-state-active'
}, {
    content: 'choose the theme "empty" to edit the mailing with snippets',
    trigger: '[name="body_arch"] iframe #empty',
}, {
    content: 'wait for the editor to be rendered',
    trigger: '[name="body_arch"] iframe .o_editable[data-editor-message="DRAG BUILDING BLOCKS HERE"]',
    run: () => {},
}, {
    content: 'drag the "Title" snippet from the design panel and drop it in the editor',
    trigger: '[name="body_arch"] iframe #email_designer_default_body [name="Title"] .oe_snippet_thumbnail',
    run: function (actions) {
        actions.drag_and_drop_native('[name="body_arch"] iframe .o_editable', this.$anchor);
    }
}, {
    content: 'wait for the snippet menu to finish the drop process',
    trigger: '[name="body_arch"] iframe #email_designer_header_elements:not(:has(.o_we_already_dragging))',
    run: () => {}
}, {
    content: 'verify that the title was inserted properly in the editor',
    trigger: '[name="body_arch"] iframe .o_editable h1',
    run: () => {},
}, {
    trigger: 'button.o_form_button_save',
}, {
    content: 'verify that the save failed (since the field "subject" was not set and it is required)',
    trigger: 'label.o_field_invalid',
    run: () => {},
}, {
    content: 'verify that the edited mailing body was not lost during the failed save',
    trigger: '[name="body_arch"] iframe .o_editable h1',
    run: () => {},
}, {
    trigger: 'input#subject_0',
    run: 'text TestFromTour',
}, {
    trigger: '.o_form_view', // blur previous input
},
...stepUtils.saveForm(),
{
    trigger: 'iframe .o_editable',
    run: () => {},
}]});

return __exports;
});
;

/***********************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mailing_editor_theme.js  *
*  Lines: 152                                                          *
***********************************************************************/
odoo.define('@mass_mailing/../tests/tours/mailing_editor_theme', ['@web/core/registry', '@web_tour/tour_service/tour_utils', '@web_editor/js/editor/odoo-editor/src/utils/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
    
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
const { boundariesIn, setSelection } = require("@web_editor/js/editor/odoo-editor/src/utils/utils");

registry.category("web_tour.tours").add('mailing_editor_theme', {
    test: true,
    url: '/web',
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Select the 'Email Marketing' app.",
            trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
        },
        {
            content: "Click on the create button to create a new mailing.",
            trigger: 'button.o_list_button_add',
        },
        {
            content: "Fill in Subject",
            trigger: '#subject_0',
            run: 'text Test Basic Theme',
        },
        {
            content: "Fill in Mailing list",
            trigger: '#contact_list_ids_0',
            run: 'text Newsletter',
        },
        {
            content: "Pick 'Newsletter' option",
            trigger: '.o_input_dropdown a:contains(Newsletter)',
        },
        {
            content: "Pick the basic theme",
            trigger: 'iframe #basic',
            extra_trigger: 'iframe .o_mail_theme_selector_new',
        },
        {
            content: "Make sure the snippets menu is hidden",
            trigger: 'iframe html:has(#oe_snippets.d-none)',
            run: () => null, // no click, just check
        },
        {
            content: "Click on the New button to create another mailing",
            trigger: 'button.o_form_button_create',
        },
        {
            content: "Fill in Subject",
            trigger: '#subject_0',
            extra_trigger: 'iframe .o_mail_theme_selector_new',
            run: 'text Test Newsletter Theme',
        },
        {
            content: "Fill in Mailing list",
            trigger: '#contact_list_ids_0',
            run: 'text Newsletter',
        },
        {
            content: "Pick 'Newsletter' option",
            trigger: '.o_input_dropdown a:contains(Newsletter)',
        },
        {
            content: "Pick the newsletter theme",
            trigger: 'iframe #newsletter',
        },
        {
            content: "Make sure the snippets menu is displayed",
            trigger: 'iframe #oe_snippets',
            run: () => null, // no click, just check
        },
        {
            content: 'Save form',
            trigger: '.o_form_button_save',
        },
        {
            content: 'Go back to previous mailing',
            trigger: 'button.o_pager_previous',
        },
        {
            content: "Make sure the snippets menu is hidden",
            trigger: 'iframe html:has(#oe_snippets.d-none)',
            run: () => null,
        },
        {
            content: "Add some content to be selected afterwards",
            trigger: 'iframe p',
            run: 'text content',
        },
        {
            content: "Select text",
            trigger: 'iframe p:contains(content)',
            run() {
                setSelection(...boundariesIn(this.$anchor[0]), false);
            }
        },
        {
            content: "Make sure the floating toolbar is visible",
            trigger: '#toolbar.oe-floating[style*="visible"]',
            run: () => null,
        },
        {
            content: "Open the color picker",
            trigger: '#toolbar #oe-text-color',
        },
        {
            content: "Pick a color",
            trigger: '#toolbar button[data-color="o-color-1"]',
        },
        {
            content: "Check that color was applied",
            trigger: 'iframe p font.text-o-color-1',
            run: () => null,
        },
        {
            content: 'Save changes',
            trigger: '.o_form_button_save',
        },
        {
            content: "Go to 'Mailings' list view",
            trigger: '.breadcrumb a:contains(Mailings)'
        },
        {
            content: "Open newly created mailing",
            trigger: 'td:contains("Test Basic Theme")',
        },
        {
            content: "Make sure the snippets menu is hidden",
            trigger: 'iframe html:has(#oe_snippets.d-none)',
            run: () => null,
        },
        {
            content: "Select content",
            trigger: 'iframe p:contains(content)',
            run() {
                setSelection(...boundariesIn(this.$anchor[0]), false);
            }
        },
        {
            content: "Make sure the floating toolbar is visible",
            trigger: '#toolbar.oe-floating[style*="visible"]',
            run: () => null,
        },
        ...stepUtils.discardForm(),
    ]
});

return __exports;
});
;

/*******************************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mailing_portal_unsubscribe_from_document.js  *
*  Lines: 116                                                                              *
*******************************************************************************************/
odoo.define('@mass_mailing/../tests/tours/mailing_portal_unsubscribe_from_document', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

/*
 * Tour: unsubscribe from a mailing done on documents (aka not on contacts or
 * mailing lists). We assume email is not member of any mailing list in this test.
 */
registry.category("web_tour.tours").add('mailing_portal_unsubscribe_from_document', {
    test: true,
    steps: () => [
        {
            content: "Confirmation unsubscribe is done",
            trigger: "div#o_mailing_subscription_info span:contains('You are no longer part of our services and will not be contacted again.')",
        }, {
            content: "No warning should be displayed",
            trigger: "div#o_mailing_subscription_form_blocklisted:not(:has(p:contains('You will not receive any news from those mailing lists you are a member of')))",
        }, {
            contnet: "Warning will not receive anything anymore",
            trigger: "div#o_mailing_subscription_form_blocklisted p:contains('You will not hear from us anymore.')",
        }, {
            content: "Feedback textarea not displayed (see data)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
        }, {
            content: "Choose 'Other' reason",
            trigger: "fieldset label:contains('Other')",
        }, {
            content: "This should display the Feedback area",
            trigger: "div#o_mailing_portal_subscription textarea",
            isCheck: true,
        }, {
            content: "Write feedback reason",
            trigger: "textarea[name='feedback']",
            run: "text My feedback",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
        }, {
            content: "Revert exclusion list",
            trigger: "div#button_blocklist_remove",
        }, {
            content: "Confirmation exclusion list is removed",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email removed from our blocklist')",
        }, {
            content: "Now exclude me (again)",
            trigger: "div#button_blocklist_add",
        }, {
            content: "Confirmation exclusion is done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email added to our blocklist')",
            isCheck: true,
        },
    ],
});


/*
 * Tour: unsubscribe from a mailing done on documents (aka not on contacts or
 * mailing lists). We assume email is member of mailing lists in this test.
 */
registry.category("web_tour.tours").add('mailing_portal_unsubscribe_from_document_with_lists', {
    test: true,
    steps: () => [
        {
            content: "Confirmation unsubscribe is done",
            trigger: "div#o_mailing_subscription_info span:contains('You are no longer part of our services and will not be contacted again.')",
        }, {
            content: "Display warning about mailing lists",
            trigger: "div#o_mailing_subscription_form_blocklisted p:contains('You will not receive any news from those mailing lists you are a member of')",
        }, {
            content: "Warning should contain reference to memberships",
            trigger: "div#o_mailing_subscription_form_blocklisted li strong:contains('List1')",
        }, {
            content: "Feedback textarea not displayed (see data)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
        }, {
            content: "Choose 'Other' reason",
            trigger: "fieldset label:contains('Other')",
        }, {
            content: "This should display the Feedback area",
            trigger: "div#o_mailing_portal_subscription textarea",
            isCheck: true,
        }, {
            content: "Write feedback reason",
            trigger: "textarea[name='feedback']",
            run: "text My feedback",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
        }, {
            content: "Revert exclusion list",
            trigger: "div#button_blocklist_remove",
        }, {
            content: "Confirmation exclusion list is removed",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email removed from our blocklist')",
        }, {
            content: "Now exclude me (again)",
            trigger: "div#button_blocklist_add",
        }, {
            content: "Confirmation exclusion is done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email added to our blocklist')",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/***************************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mailing_portal_unsubscribe_from_list.js  *
*  Lines: 159                                                                          *
***************************************************************************************/
odoo.define('@mass_mailing/../tests/tours/mailing_portal_unsubscribe_from_list', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

/*
 * Tour: unsubscribe from a mailing done on lists (aka playing with opt-out flag
 * instead of directly blocking emails).
 */
registry.category("web_tour.tours").add('mailing_portal_unsubscribe_from_list', {
    test: true,
    steps: () => [
        {
            content: "Confirmation unsubscribe is done",
            trigger: "div#o_mailing_subscription_info span:contains('You are no longer part of the List1, List2 mailing list')",
        }, {
            content: "Feedback textarea not displayed (see data)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
        }, {
            content: "Choose 'Other' reason",
            trigger: "fieldset label:contains('Other')",
        }, {
            content: "Write feedback reason",
            trigger: "textarea[name='feedback']",
            run: "text My feedback",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
        }, {
            content: "Now exclude me",
            trigger: "div#button_blocklist_add",
        }, {
            content: "Confirmation exclusion is done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email added to our blocklist')",
            isCheck: true,
        },
    ],
});


/*
 * Tour: unsubscribe from a mailing done on lists (aka playing with opt-out flag
 * instead of directly blocking emails), then play with list subscriptions and
 * blocklist addition / removal. This is mainly an extended version of the tour
 * hereabove, easing debug and splitting checks.
 */
registry.category("web_tour.tours").add('mailing_portal_unsubscribe_from_list_with_update', {
    test: true,
    steps: () => [
        {
            content: "Confirmation unsubscribe is done",
            trigger: "div#o_mailing_subscription_info span:contains('You are no longer part of the List1, List2 mailing list')",
        }, {
            content: "List1 is present, just opt-outed",
            trigger: "ul#o_mailing_subscription_form_lists li.list-group-item:contains('List1') span:contains('Not subscribed')",
        }, {
            content: "List3 is present, opt-outed (test starting data)",
            trigger: "ul#o_mailing_subscription_form_lists li.list-group-item:contains('List3') span:contains('Not subscribed')",
        }, {
            content: "List2 is proposed (not member -> proposal to join)",
            trigger: "ul#o_mailing_subscription_form_lists_additional li.list-group-item:contains('List2')",
        }, {
            content: "List4 is not proposed (not member but not private)",
            trigger: "ul#o_mailing_subscription_form_lists_additional:not(:has(li.list-group-item:contains('List4')))",
        }, {
            content: "Feedback textarea not displayed (see data)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
        }, {
            content: "Choose 'Other' reason",
            trigger: "fieldset label:contains('Other')",
        }, {
            content: "Write feedback reason",
            trigger: "textarea[name='feedback']",
            run: "text My feedback",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
        }, {
            content: "Now exclude me",
            trigger: "div#button_blocklist_add",
        }, {
            content: "Confirmation exclusion is done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email added to our blocklist')",
        }, {
            content: "This should disable the 'Update my subscriptions' (Apply changes) button",
            trigger: "div#o_mailing_subscription_blocklist:not(button#button_form_send)",
            isCheck: true,
        }, {
            content: "Revert exclusion list",
            trigger: "div#button_blocklist_remove",
        }, {
            content: "Confirmation exclusion list is removed",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email removed from our blocklist')",
        },  {
            content: "'Update my subscriptions' button usable again",
            trigger: "button#button_form_send:not([disabled])",
            isCheck: true,
        }, {
            content: "Choose the mailing list 3 to come back",
            trigger: "ul#o_mailing_subscription_form_lists input[title='List3']",
        }, {
            content: "Add list 2",
            trigger: "ul#o_mailing_subscription_form_lists_additional input[title='List2']",
        }, {
            content: "Update subscription",
            trigger: "button#button_form_send",
        }, {
            content: "Confirmation changes are done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Membership updated')",
        }, {
            content: "List 3 is noted as subscribed again",
            trigger: "ul#o_mailing_subscription_form_lists li.list-group-item:contains('List3') span:contains('Subscribed')",
        }, {
            content: "List 2 has joined the subscriptions",
            trigger: "ul#o_mailing_subscription_form_lists li.list-group-item:contains('List2') span:contains('Subscribed')",
        }, {
            content: "No list in proposals",
            trigger: "div#o_mailing_subscription_form_manage:not(:has(ul#o_mailing_subscription_form_lists_additional))",
        }, {
            content: "Feedback area is not displayed (nothing opt-out or no blocklist done, no feedback required)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
            extra_trigger: "div#o_mailing_portal_subscription:not(fieldset)",
        }, {
            content: "Now exclude me (again)",
            trigger: "div#button_blocklist_add",
        }, {
            content: "Confirmation exclusion is done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email added to our blocklist')",
        }, {
            content: "Should display warning about mailing lists",
            trigger: "div#o_mailing_subscription_form_blocklisted p:contains('You will not receive any news from those mailing lists you are a member of')",
        }, {
            content: "Warning should contain reference to memberships",
            trigger: "div#o_mailing_subscription_form_blocklisted li strong:contains('List2')",
            extra_trigger: "div#o_mailing_subscription_form_blocklisted li strong:contains('List3')",
        }, {
            content: "Give a reason for blocklist (first one)",
            trigger: "fieldset input.o_mailing_subscription_opt_out_reason:first",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
            isCheck: true,
        }
    ],
});

return __exports;
});
;

/*************************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mailing_portal_unsubscribe_from_my.js  *
*  Lines: 117                                                                        *
*************************************************************************************/
odoo.define('@mass_mailing/../tests/tours/mailing_portal_unsubscribe_from_my', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

/*
 * Tour: use 'my' portal page of mailing to manage mailing lists subscription
 * as well as manage blocklist (add / remove my own email from block list).
 */
registry.category("web_tour.tours").add('mailing_portal_unsubscribe_from_my', {
    test: true,
    steps: () => [
       {
            content: "List1 is present, opt-in member",
            trigger: "ul#o_mailing_subscription_form_lists li.list-group-item:contains('List1') span:contains('Subscribed')",
        }, {
            content: "List3 is present, opt-outed (test starting data)",
            trigger: "ul#o_mailing_subscription_form_lists li.list-group-item:contains('List3') span:contains('Not subscribed')",
        }, {
            content: "List2 is proposed (not member -> proposal to join)",
            trigger: "ul#o_mailing_subscription_form_lists_additional li.list-group-item:contains('List2')",
        }, {
            content: "List4 is not proposed (not member but not private)",
            trigger: "ul#o_mailing_subscription_form_lists_additional:not(:has(li.list-group-item:contains('List4')))",
        },{
            content: "List5 is not proposed (not member and not public)",
            trigger: "body:not(:has(li.list-group-item:contains('List5')))",
        }, {
            content: "Feedback area is not displayed (nothing done, no feedback required)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
            extra_trigger: "div#o_mailing_portal_subscription:not(fieldset)",
        }, {
            content: "List3: come back (choose to opt-in instead of opt-out)",
            trigger: "ul#o_mailing_subscription_form_lists input[title='List3']",
        }, {
            content: "List2: join (opt-in, not already member)",
            trigger: "ul#o_mailing_subscription_form_lists_additional input[title='List2']",
        }, {
            content: "List1: opt-out",
            trigger: "ul#o_mailing_subscription_form_lists input[title='List1']",
        }, {
            content: "Update subscription",
            trigger: "button#button_form_send",
        }, {
            content: "Confirmation changes are done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Membership updated')",
        }, {
            content: "Should make feedback reasons choice appear (feedback still not displayed, linked to reasons)",
            trigger: "div#o_mailing_portal_subscription fieldset",
            extra_trigger: "div#o_mailing_portal_subscription:not(textarea)",
        }, {
            content: "Choose first reason, which should not display feedback (see data)",
            trigger: "fieldset input.o_mailing_subscription_opt_out_reason:first",
        }, {
            content: "Feedback textarea not displayed (see data)",
            trigger: "div#o_mailing_portal_subscription:not(textarea)",
        }, {
            content: "Choose 'Other' reason",
            trigger: "fieldset label:contains('Other')",
        }, {
            content: "This should display the Feedback area",
            trigger: "div#o_mailing_portal_subscription textarea",
            isCheck: true,
        }, {
            content: "Write feedback reason",
            trigger: "textarea[name='feedback']",
            run: "text My feedback",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
        }, {
            content: "Once sent feedback area is readonly",
            trigger: "fieldset input.o_mailing_subscription_opt_out_reason[disabled]",
            extra_trigger: "textarea[disabled]",
            isCheck: true,
        }, {
            content: "Now exclude me",
            trigger: "div#button_blocklist_add",
        }, {
            content: "Confirmation exclusion is done",
            trigger: "div#o_mailing_subscription_update_info span:contains('Email added to our blocklist')",
        }, {
            content: "This should disable the 'Update my subscriptions' (Apply changes) button",
            trigger: "div#o_mailing_subscription_blocklist:not(button#button_form_send)",
            isCheck: true,
        }, {
            content: "This should enabled Feedback again",
            trigger: "div#o_mailing_portal_subscription textarea",
            isCheck: true,
        }, {
            content: "Display warning about mailing lists",
            trigger: "div#o_mailing_subscription_form_blocklisted p:contains('You will not receive any news from those mailing lists you are a member of')",
        }, {
            content: "Warning should contain reference to memberships",
            trigger: "div#o_mailing_subscription_form_blocklisted li strong:contains('List2')",
            extra_trigger: "div#o_mailing_subscription_form_blocklisted li strong:contains('List3')",
        }, {
            content: "Give a reason for blocklist (first one)",
            trigger: "fieldset input.o_mailing_subscription_opt_out_reason:first",
        }, {
            content: "Hit Send",
            trigger: "button#button_feedback",
        }, {
            content: "Confirmation feedback is sent",
            trigger: "div#o_mailing_subscription_feedback_info span:contains('Sent. Thanks you for your feedback!')",
            isCheck: true,
        }
    ],
});

return __exports;
});
;

/*************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/mass_mailing_code_view.js  *
*  Lines: 72                                                             *
*************************************************************************/
odoo.define('@mass_mailing/../tests/tours/mass_mailing_code_view', ['@odoo/owl', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { markup } = require("@odoo/owl");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('mass_mailing_code_view_tour', {
    url: '/web?debug=tests',
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
        }, {
            trigger: 'button.o_list_button_add',
        }, {
            trigger: 'input#subject_0',
            content: markup('Pick the <b>email subject</b>.'),
            position: 'bottom',
            run: 'text Test'
        }, {
            trigger: 'div[name="contact_list_ids"] .o_input_dropdown input[type="text"]',
            content: 'Click on the dropdown to open it and then start typing to search.',
        }, {
            trigger: 'div[name="contact_list_ids"] .ui-state-active',
            content: 'Select item from dropdown',
            run: 'click',
        }, {
            trigger: 'div[name="body_arch"] iframe #default',
            content: markup('Choose this <b>theme</b>.'),
            run: 'click',
        }, {
            trigger: 'iframe .o_codeview_btn',
            content: markup('Click here to switch to <b>code view</b>'),
            run: 'click'
        }, {
            trigger: 'iframe .o_codeview',
            content: ('Remove all content from codeview'),
            run: function () {
                const iframe = document.querySelector('.wysiwyg_iframe');
                const iframeDocument = iframe.contentWindow.document;
                let element = iframeDocument.querySelector(".o_codeview");
                element.value = '';
            }
        }, {
            trigger: 'iframe .o_codeview_btn',
            content: markup('Click here to switch back from <b>code view</b>'),
            run: 'click'
        }, {
            trigger: '[name="body_arch"] iframe .o_mail_wrapper_td',
            content: 'Verify that the dropable zone was not removed',
            run: () => {},
        }, {
            trigger: '[name="body_arch"] iframe #email_designer_default_body [name="Title"] .oe_snippet_thumbnail',
            content: 'Drag the "Title" snippet from the design panel and drop it in the editor',
            run: function (actions) {
                actions.drag_and_drop_native('[name="body_arch"] iframe .o_editable', this.$anchor);
            }
        }, {
            trigger: '[name="body_arch"] iframe .o_editable h1',
            content: 'Verify that the title was inserted properly in the editor',
            run: () => {},
        },
        ...stepUtils.discardForm(),
    ]
});

return __exports;
});
;

/*****************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/snippets_mailing_menu_tabs.js  *
*  Lines: 59                                                                 *
*****************************************************************************/
odoo.define('@mass_mailing/../tests/tours/snippets_mailing_menu_tabs', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('snippets_mailing_menu_tabs', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(), {
        content: "Select the 'Email Marketing' app.",
        trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
    },
    {
        content: "Click on the create button to create a new mailing.",
        trigger: 'button.o_list_button_add',
    },
    {
        content: "Click on the 'Start From Scratch' template.",
        trigger: 'iframe #empty',
    },
    {
        content: "Click on the 'Design' tab.",
        trigger: 'iframe .o_we_customize_design_btn',
    },
    {
        content: "Click on the empty 'DRAG BUILDING BLOCKS HERE' area.",
        trigger: 'iframe .oe_structure.o_mail_no_options',
    },
    {
        content: "Click on the 'Design' tab.",
        trigger: 'iframe .o_we_customize_design_btn',
    },
    {
        content: "Verify that the customize panel is not empty.",
        trigger: 'iframe .o_we_customize_panel .snippet-option-DesignTab',
        run: () => null, // it's a check
    },
    {
        content: "Click on the style tab.",
        trigger: 'iframe .o_we_customize_snippet_btn',
    },
    {
        content: "Click on the 'Design' tab.",
        trigger: 'iframe .o_we_customize_design_btn',
    },
    {
        content: "Verify that the customize panel is not empty.",
        trigger: 'iframe .o_we_customize_panel .snippet-option-DesignTab',
        run: () => null, // it's a check
    },
    ...stepUtils.discardForm(),
]});

return __exports;
});
;

/********************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/snippets_mailing_menu_toolbar.js  *
*  Lines: 84                                                                    *
********************************************************************************/
odoo.define('@mass_mailing/../tests/tours/snippets_mailing_menu_toolbar', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('snippets_mailing_menu_toolbar', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(), {
        content: "Select the 'Email Marketing' app.",
        trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
    },
    {
        content: "Click on the create button to create a new mailing.",
        trigger: 'button.o_list_button_add',
    },
    {
        content: "Wait for the theme selector to load.",
        trigger: 'iframe .o_mail_theme_selector_new',
    },
    {
        content: "Make sure there does not exist a floating toolbar",
        trigger: 'iframe',
        run: function () {
            const iframeDocument = this.$anchor[0].contentDocument;
            if (iframeDocument.querySelector('#toolbar.oe-floating')) {
                console.error('There should not be a floating toolbar in the iframe');
            }
        },
    },
    {
        content: "Make sure the empty template is an option on non-mobile devices.",
        trigger: 'iframe #empty',
        run: () => null,
    },
    {
        content: "Click on the default 'welcome' template.",
        trigger: 'iframe #default',
    },
    { // necessary to wait for the cursor to be placed in the first p
      // and to avoid leaving the page before the selection is added
        content: "Wait for template selection event to be over.",
        trigger: 'iframe .o_editable.theme_selection_done',
    },
    {
        content: "Make sure the snippets menu is not hidden",
        trigger: 'iframe #oe_snippets:not(.d-none)',
        run: () => null,
    },
    {
        content: "Wait for .s_text_block to be populated",
        trigger: 'iframe .s_text_block p',
        run: () => null,
    },
    {
        content: "Click and select p block inside the editor",
        trigger: 'iframe',
        run: function () {
            const iframeWindow = this.$anchor[0].contentWindow;
            const iframeDocument = iframeWindow.document;
            const p = iframeDocument.querySelector('.s_text_block p');
            p.click();
            const selection = iframeWindow.getSelection();
            const range = iframeDocument.createRange();
            range.selectNodeContents(p);
            selection.removeAllRanges();
            selection.addRange(range);
        },
    },
    {
        content: "Make sure the toolbar is there",
        trigger: 'iframe #oe_snippets .o_we_customize_panel #toolbar',
        run: () => null,
    },
    ...stepUtils.discardForm(),
    ],
});

return __exports;
});
;

/***************************************************************************************
*  Filepath: /mass_mailing/static/tests/tours/snippets_mailing_menu_toolbar_mobile.js  *
*  Lines: 75                                                                           *
***************************************************************************************/
odoo.define('@mass_mailing/../tests/tours/snippets_mailing_menu_toolbar_mobile', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('snippets_mailing_menu_toolbar_mobile', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(), {
        content: "Select the 'Email Marketing' app.",
        trigger: '.o_app[data-menu-xmlid="mass_mailing.mass_mailing_menu_root"]',
    },
    {
        content: "Click on the create button to create a new mailing.",
        trigger: 'button.o_list_button_add',
        mobile: true,
    },
    {
        content: "Check templates available in theme selector",
        trigger: 'iframe .o_mail_theme_selector_new',
        run: function () {
            if (this.$anchor[0].querySelector('#empty')) {
                console.error('The empty template should not be visible on mobile.');
            }
        },
        mobile: true,
    },
    {
        content: "Make sure the toolbar isn't floating",
        trigger: 'iframe',
        run: function () {
            const iframeDocument = this.$anchor[0].contentDocument;
            if (iframeDocument.querySelector('#toolbar.oe-floating')) {
                console.error('There should not be a floating toolbar in the iframe');
            }
        },
        mobile: true,
    },
    {
        content: "Click on the 'Start From Scratch' template.",
        trigger: 'iframe #default',
        mobile: true,
    },
    {
        content: "Select an editable element",
        trigger: 'iframe .s_text_block',
        mobile: true,
    },
    {
        content: "Make sure the snippets menu is hidden",
        trigger: 'iframe',
        run: function () {
            const iframeDocument = this.$anchor[0].contentDocument;
            if (!iframeDocument.querySelector('#oe_snippets.d-none')) {
                console.error('The snippet menu should be hidden');
            }
        },
        mobile: true,
    },
    {
        content: "Make sure the toolbar is there",
        trigger: 'iframe #toolbar.oe-floating',
        run: () => null, // it's a check
        mobile: true,
    },
    ...stepUtils.discardForm().map(command => ({...command, mobile: true})),
    ]
});

return __exports;
});
;

/*************************************************************************
*  Filepath: /web_enterprise/static/tests/tours/web_enterprise_tours.js  *
*  Lines: 26                                                             *
*************************************************************************/
odoo.define('@web_enterprise/../tests/tours/web_enterprise_tours', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
const { registry } = require("@web/core/registry")

registry.category("web_tour.tours").add("web_enterprise.test_studio_list_upsell",
    {
        test: true,
        steps: () => [
            {
                trigger: ".o_list_view",
            },
            {
                trigger: ".o_optional_columns_dropdown > button",
            },
            {
                trigger: ".o_optional_columns_dropdown .dropdown-item-studio",
                isCheck: true,
            },
        ]
    }
);

return __exports;
});
;

/*************************************************************
*  Filepath: /web_studio/static/tests/tours/tour_helpers.js  *
*  Lines: 39                                                 *
*************************************************************/
odoo.define('@web_studio/../tests/tours/tour_helpers', [], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

__exports.assertEqual = assertEqual; function assertEqual(actual, expected) {
    if (actual !== expected) {
        throw new Error(`Assert failed: expected: ${expected} ; got: ${actual}`);
    }
}

__exports.nextTick = nextTick; async function nextTick() {
    await new Promise((resolve) => setTimeout(resolve));
    await new Promise((resolve) => requestAnimationFrame(resolve));
}

__exports.stepNextTick = stepNextTick; function stepNextTick() {
    // FIXME: this probably should be handled by the tour-as-macro infrastructure
    // The case is to have a dom node with a constant selector. It will trigger the next step
    // even though the element will be changed after, resulting in non-deterministic bugs.
    // This is especially the case in the case of inputs, where we'd want to assert their value changed
    return {
        trigger: "body",
        run() {
            return nextTick();
        },
    };
}

__exports.stepNotInStudio = stepNotInStudio; function stepNotInStudio(trigger) {
    return {
        extra_trigger: "body:not(:has(.o_studio))",
        trigger: trigger || "body",
        isCheck: true,
    };
}

return __exports;
});
;

/***********************************************************
*  Filepath: /web_studio/static/tests/tours/web_studio.js  *
*  Lines: 225                                              *
***********************************************************/
odoo.define('@web_studio/../tests/tours/web_studio', ['@web/core/l10n/translation', '@web_studio/utils', '@web/core/registry', '@odoo/owl'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { _t } = require("@web/core/l10n/translation");
const utils = require("@web_studio/utils")[Symbol.for("default")];
const { registry } = require("@web/core/registry");
const { markup } = require("@odoo/owl");

registry.category("web_tour.tours").add("web_studio_home_menu_background_tour", {
    url: "/web",
    sequence: 1260,
    steps: () => [
        {
            trigger: ".o_web_studio_navbar_item",
            content: markup(
                _t("Want to customize the background? Let’s activate <b>Odoo Studio</b>.")
            ),
            position: "bottom",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_home_studio_menu .dropdown-toggle",
            content: _t("Click here."),
            position: "right",
        },
        {
            trigger:
                ".o_web_studio_home_studio_menu .dropdown-menu .dropdown-item.o_web_studio_change_background",
            content: markup(_t("Change the <b>background</b>, make it yours.")),
            position: "bottom",
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_new_app_tour", {
    url: "/web#action=studio&mode=home_menu",
    sequence: 1270,
    steps: () => [
        {
            trigger: ".o_web_studio_new_app",
            auto: true,
            position: "bottom",
        },
        {
            trigger: ".o_web_studio_app_creator_next",
            content: markup(
                _t("I bet you can <b>build an app</b> in 5 minutes. Ready for the challenge?")
            ),
            position: "top",
        },
        {
            trigger: ".o_web_studio_app_creator_name > input",
            content: markup(_t("How do you want to <b>name</b> your app? Library, Academy, …?")),
            position: "right",
            run: "text " + utils.randomString(6),
        },
        {
            trigger: ".o_web_studio_selectors .o_web_studio_selector:eq(2)",
            content: _t("Now, customize your icon. Make it yours."),
            position: "top",
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
            content: _t("Go on, you are almost done!"),
            position: "top",
        },
        {
            trigger: ".o_web_studio_menu_creator > input",
            content: markup(
                _t("How do you want to name your first <b>menu</b>? My books, My courses?")
            ),
            position: "right",
            run: "text " + utils.randomString(6),
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
            content: _t(
                "Continue to configure some typical behaviors for your new type of object."
            ),
            position: "bottom",
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
            content: markup(
                _t("All set? You are just one click away from <b>generating your first app</b>.")
            ),
            position: "bottom",
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_char",
            content: markup(
                _t(
                    "Nicely done! Let’s build your screen now; <b>drag</b> a <i>text field</i> and <b>drop</b> it in your view, on the right."
                )
            ),
            position: "bottom",
            run: "drag_and_drop_native .o_web_studio_form_view_editor .o_inner_group",
            timeout: 60000 /* previous step reloads registry, etc. - could take a long time */,
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_wrap_label label",
            content: markup(_t("To <b>customize a field</b>, click on its <i>label</i>.")),
            position: "bottom",
        },
        {
            trigger: '.o_web_studio_sidebar input[name="string"]',
            content: markup(
                _t(
                    "Here, you can <b>name</b> your field (e.g. Book reference, ISBN, Internal Note, etc.)."
                )
            ),
            position: "bottom",
            run: "text My Field",
        },
        {
            // wait for the field to be renamed
            extra_trigger: ".o_web_studio_form_view_editor .o_wrap_label label:contains(My Field)",
            trigger: ".o_web_studio_sidebar .o_web_studio_new",
            content: markup(
                _t("Good job! To add more <b>fields</b>, come back to the <i>Add tab</i>.")
            ),
            position: "bottom",
            // the rename operation (/web_studio/rename_field + /web_studio/edit_view)
            // takes a while and sometimes reaches the default 10s timeout
            timeout: 20000,
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_selection",
            content: markup(
                _t("Drag & drop <b>another field</b>. Let’s try with a <i>selection field</i>.")
            ),
            position: "bottom",
            run: "drag_and_drop_native .o_web_studio_form_view_editor .o_inner_group",
        },
        {
            trigger: ".o_web_studio_selection_editor .o_web_studio_add_selection input",
            content: markup(
                _t("Create your <b>selection values</b> (e.g.: Romance, Polar, Fantasy, etc.)")
            ),
            position: "top",
            run: "text " + utils.randomString(6),
        },
        {
            trigger:
                ".o_web_studio_selection_editor .o_web_studio_add_selection .o-web-studio-interactive-list-edit-item",
            auto: true,
        },
        {
            trigger: ".modal-footer > button:eq(0)",
            auto: true,
        },
        {
            trigger: ".o_web_studio_sidebar [name='string']",
            auto: true,
        },
        {
            trigger: ".o_web_studio_form_view_editor .o-mail-Chatter",
            content: _t("Click to edit messaging features on your model."),
            position: "top",
            timeout: 15000, // this can take some time on 'slow' builds (coverage, etc.)
        },
        {
            trigger: '.o_web_studio_sidebar input[name="email_alias"]',
            content: markup(
                _t(
                    "Set an <b>email alias</b>. Then, try to send an email to this address; it will create a document automatically for you. Pretty cool, huh?"
                )
            ),
            position: "bottom",
        },
        {
            trigger: ".o_web_studio_leave",
            content: markup(
                _t(
                    "Let’s check the result. Close Odoo Studio to get an <b>overview of your app</b>."
                )
            ),
            position: "left",
        },
        {
            trigger: ".o_field_char.o_required_modifier > input",
            auto: true,
            position: "bottom",
        },
        {
            trigger: ".o_control_panel .o_form_button_save",
            content: _t("Save."),
            position: "right",
        },
        {
            trigger: ".o_web_studio_navbar_item",
            extra_trigger: ".o_form_view .o_form_saved",
            content: markup(
                _t(
                    "Wow, nice! And I’m sure you can make it even better! Use this icon to open <b>Odoo Studio</b> and customize any screen."
                )
            ),
            position: "bottom",
        },
        {
            trigger: ".o_web_studio_menu .o_menu_sections li:contains(Views)",
            content: markup(_t("Want more fun? Let’s create more <b>views</b>.")),
            position: "bottom",
        },
        {
            trigger:
                '.o_web_studio_view_category .o_web_studio_view_type.o_web_studio_inactive[data-type="kanban"] .o_web_studio_thumbnail',
            content: markup(_t("What about a <b>Kanban view</b>?")),
            position: "bottom",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_new",
            content: markup(_t("Now you’re on your own. Enjoy your <b>super power</b>.")),
            position: "bottom",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/**********************************************************************
*  Filepath: /web_studio/static/tests/tours/web_studio_main_tours.js  *
*  Lines: 1923                                                        *
**********************************************************************/
odoo.define('@web_studio/../tests/tours/web_studio_main_tours', ['@web/core/browser/browser', '@web/core/registry', '@web_studio/utils', '@web_studio/../tests/tours/tour_helpers'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { browser } = require("@web/core/browser/browser");
const { registry } = require("@web/core/registry");
const { randomString } = require("@web_studio/utils");
const {
    assertEqual,
    stepNextTick,
    stepNotInStudio,
} = require("@web_studio/../tests/tours/tour_helpers");

const localStorage = browser.localStorage;
let createdAppString = null;
let createdMenuString = null;

registry.category("web_tour.tours").add("web_studio_main_and_rename", {
    url: "/web?debug=1",
    test: true,
    steps: () => [
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
        },
        {
            // the next steps are here to create a new app
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: ".o_web_studio_app_creator_name > input",
            run: "text " + (createdAppString = randomString(6)),
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: ".o_web_studio_menu_creator > input",
            run: "text " + (createdMenuString = randomString(6)),
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            // disable chatter in model configurator, we'll test adding it on later
            trigger: 'input[name="use_mail"]',
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            // toggle the home menu outside of studio and come back in studio
            extra_trigger: ".o_menu_toggle:not(.o_menu_toggle_back)",
            trigger: ".o_web_studio_leave > a.btn",
            timeout: 60000 /* previous step reloads registry, etc. - could take a long time */,
        },
        {
            extra_trigger: `.o_web_client:not(.o_in_studio)` /* wait to be out of studio */,
            trigger: ".o_menu_toggle:not(.o_menu_toggle_back)",
            timeout: 60000 /* previous step reloads registry, etc. - could take a long time */,
        },
        {
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            // open the app creator and leave it
            trigger: ".o_web_studio_new_app",
        },
        {
            extra_trigger: ".o_web_studio_app_creator",
            trigger: ".o_web_studio_leave > a.btn",
        },
        {
            // go back to the previous app
            trigger: ".o_home_menu",
            run: () => {
                window.dispatchEvent(
                    new KeyboardEvent("keydown", {
                        bubbles: true,
                        key: "Escape",
                    })
                );
            },
        },
        {
            // this should open the previous app outside of studio
            extra_trigger: `.o_web_client:not(.o_in_studio) .o_menu_brand:contains(${createdAppString})`,
            // go back to the home menu
            trigger: ".o_menu_toggle:not(.o_menu_toggle_back)",
        },
        {
            trigger: "input.o_search_hidden",
            // Open Command Palette
            run: "text " + createdMenuString[0],
        },
        {
            trigger: ".o_command_palette_search input",
            run: "text " + "/" + createdMenuString,
        },
        {
            // search results should have been updated
            extra_trigger: `.o_command.focused:contains(${createdAppString} / ${createdMenuString})`,
            trigger: ".o_command_palette",
            // Close the Command Palette
            run: () => {
                window.dispatchEvent(
                    new KeyboardEvent("keydown", {
                        key: "Escape",
                    })
                );
            },
        },
        {
            // enter Studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
        },
        {
            // edit an app
            extra_trigger: ".o_studio_home_menu",
            trigger: `.o_app[data-menu-xmlid*="studio"]:contains(${createdAppString})`,
            run: function () {
                // We can't emulate a hover to display the edit icon
                const editIcon = this.$anchor[0].querySelector(".o_web_studio_edit_icon");
                editIcon.style.visibility = "visible";
                editIcon.click();
            },
        },
        {
            // design the icon
            // TODO: we initially tested this (change an app icon) at the end but a
            // long-standing bug (KeyError: ir.ui.menu.display_name, caused by a registry
            // issue with multiple workers) on runbot prevent us from doing it. It thus have
            // been moved at the beginning of this test to avoid the registry to be reloaded
            // before the write on ir.ui.menu.
            trigger: ".o_web_studio_selector:eq(0)",
        },
        {
            trigger: ".o_web_studio_palette > .o_web_studio_selector:first",
        },
        {
            trigger: ".modal-footer .btn.btn-primary",
        },
        {
            // click on the created app
            trigger: `.o_app[data-menu-xmlid*="studio"]:contains(${createdAppString})`,
        },
        {
            // create a new menu
            trigger: ".o_main_navbar .o_web_edit_menu",
        },
        {
            trigger: "footer.modal-footer .js_add_menu",
        },
        {
            trigger: 'input[name="menuName"]',
            run: "text " + (createdMenuString = randomString(6)),
        },
        {
            trigger: 'div.o_web_studio_menu_creator_model_choice input[value="existing"]',
        },
        {
            trigger: "div.o_web_studio_menu_creator_model .o_record_selector input",
            run: "text a",
        },
        {
            trigger:
                ".o_record_selector .o-autocomplete--dropdown-menu > li > a:not(:has(.fa-spin))",
        },
        {
            extra_trigger: ".o_record_selector :not(.o-autocomplete dropdown-menu)",
            trigger: '.o_web_studio_add_menu_modal button:contains(Confirm):not(".disabled")',
        },
        {
            extra_trigger: ":not(.o_inactive_modal) .o-web-studio-appmenu-editor",
            trigger: '.o-web-studio-appmenu-editor button:contains(Confirm):not(".disabled")',
        },
        {
            // check that the Studio menu is still there
            extra_trigger: ".o_web_studio_menu",
            // switch to form view
            trigger: '.o_web_studio_views_icons > a[title="Form"]',
        },
        {
            // wait for the form editor to be rendered because the sidebar is the same
            extra_trigger: ".o_web_studio_form_view_editor",
            // unfold 'Existing Fieldqs' section
            trigger: ".o_web_studio_existing_fields_header",
        },
        {
            // add an new field
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_char",
            run: "drag_and_drop_native .o_web_studio_form_view_editor .o_inner_group",
        },
        {
            // click on the field
            trigger: ".o_web_studio_form_view_editor .o_wrap_label:first label",
            // when it's there
            extra_trigger: '.o_web_studio_sidebar input[name="technical_name"]',
        },
        {
            // rename the label
            trigger: '.o_web_studio_sidebar input[name="string"]',
            run: "text My Coucou Field",
        },
        stepNextTick(),
        {
            // verify that the field name has changed and change it
            trigger: '.o_web_studio_sidebar input[name="technical_name"]',
            run(helper) {
                assertEqual(this.$anchor[0].value, "my_coucou_field");
                helper.text("coucou");
            },
            // the rename operation (/web_studio/rename_field + /web_studio/edit_view)
            // takes a while and sometimes reaches the default 10s timeout
            timeout: 20000,
        },
        {
            // click on "Add" tab
            trigger: ".o_web_studio_sidebar .o_web_studio_new",
            // the rename operation (/web_studio/rename_field + /web_studio/edit_view)
            // takes a while and sometimes reaches the default 10s timeout
            timeout: 20000,
        },
        {
            // add a new field
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_char",
            run: "drag_and_drop_native .o_web_studio_form_view_editor .o_inner_group",
        },
        {
            // rename the field with the same name
            trigger: '.o_web_studio_sidebar input[name="technical_name"]',
            run: "text coucou",
        },
        {
            // an alert dialog should be opened
            trigger: ".modal-footer > button:first",
        },
        {
            // rename the label
            trigger: '.o_web_studio_sidebar input[name="string"]',
            run: "text COUCOU",
        },
        stepNextTick(),
        {
            // verify that the field name has changed (post-fixed by _1)
            trigger: '.o_web_studio_sidebar input[name="technical_name"]',
            run(helper) {
                assertEqual(this.$anchor[0].value, "coucou_1");
            },
            // the rename operation (/web_studio/rename_field + /web_studio/edit_view)
            // takes a while and sometimes reaches the default 10s timeout
            timeout: 20000,
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_new",
        },
        {
            // add a monetary field --> create a currency field
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_monetary",
            run: "drag_and_drop_native .o_web_studio_form_view_editor .o_inner_group",
        },
        {
            // verify that the monetary field is in the view
            extra_trigger:
                '.o_web_studio_form_view_editor .o_wrap_label:eq(1) label:contains("New Monetary")',
            // switch the two first fields
            trigger: ".o_web_studio_form_view_editor .o_inner_group:first .o-draggable:eq(1)",
            run: "drag_and_drop_native .o_inner_group:first .o_web_studio_hook:first",
        },
        {
            // click on "Add" tab
            extra_trigger:
                '.o_web_studio_form_view_editor .o_wrap_label:eq(0) label:contains("New Monetary")',
            trigger: ".o_web_studio_sidebar .o_web_studio_new",
        },
        {
            // verify that the fields have been switched
            extra_trigger:
                '.o_web_studio_form_view_editor .o_wrap_label:eq(0) label:contains("New Monetary")',
            // add a m2m field
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_many2many",
            run: "drag_and_drop_native .o_inner_group:first .o_web_studio_hook:first",
        },
        {
            // type something in the modal
            trigger: '[name="relation_id"] input.o-autocomplete--input',
            in_modal: true,
            // we are sure "Activity" exists since studio depends on mail.
            //Also, it is determinisic and field names should not conflict too much.
            run: "text mail.activity",
        },
        {
            // select Activity as model
            trigger:
                '[name="relation_id"] .o-autocomplete--dropdown-menu li a:not(:has(.fa-spin)):contains(Activity)',
            in_modal: true,
            run(helpers) {
                const el = Array.from(this.$anchor).find((el) => el.textContent === "Activity");
                return helpers.click($(el));
            },
        },
        {
            in_modal: true,
            trigger: "button:contains(Confirm):not(.disabled)",
        },
        {
            // select the m2m to set its properties
            trigger: ".o_wrap_input:has(.o_field_many2many)",
            timeout: 15000, // creating M2M relations can take some time...
        },
        {
            // change the `widget` attribute
            trigger: '.o_web_studio_sidebar [name="widget"] .o_select_menu_toggler_slot',
        },
        {
            trigger:
                ".o_web_studio_sidebar [name='widget'] .o_select_menu_item_label:contains('(many2many_tags)')",
        },
        {
            // use colors on the m2m tags
            trigger: '.o_web_studio_sidebar [name="color_field"]',
        },
        {
            // add a statusbar
            trigger: ".o_web_studio_statusbar_hook",
        },
        {
            trigger: ".modal-footer .btn.btn-primary",
        },
        {
            trigger: ".o_statusbar_status",
        },
        {
            // verify that a default value has been set for the statusbar
            trigger:
                '.o_web_studio_sidebar [name="default_value"] .o_select_menu_toggler_slot:contains(First Status)',
            run() {},
        },
        {
            trigger: ".o_web_studio_views_icons a[title=Form]",
        },
        {
            // verify Chatter can be added after changing view to form
            extra_trigger: ".o_web_studio_add_chatter",
            // edit action
            trigger: ".o_web_studio_menu .o_menu_sections li a:contains(Views)",
        },
        {
            // edit form view
            trigger:
                '.o_web_studio_view_category .o_web_studio_view_type[data-type="form"] .o_web_studio_thumbnail',
        },
        {
            // verify Chatter can be added after changing view to form
            extra_trigger: ".o_web_studio_add_chatter",
            // switch in list view
            trigger: '.o_web_studio_menu .o_web_studio_views_icons a[title="List"]',
        },
        {
            // wait for the list editor to be rendered because the sidebar is the same
            extra_trigger: ".o_web_studio_list_view_editor",
            // unfold 'Existing Fieldqs' section
            trigger: ".o_web_studio_existing_fields_header",
        },
        {
            // add an existing field (display_name)
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_field_char:contains(COUCOU)",
            run: "drag_and_drop_native .o_web_studio_list_view_editor th.o_web_studio_hook:first",
        },
        {
            // verify that the field is correctly named
            extra_trigger: '.o_web_studio_list_view_editor th:contains("COUCOU")',
            // leave Studio
            trigger: ".o_web_studio_leave > a.btn",
        },
        {
            // come back to the home menu to check if the menu data have changed
            extra_trigger: ".o_web_client:not(.o_in_studio)",
            trigger: ".o_menu_toggle:not(.o_menu_toggle_back)",
        },
        {
            trigger: "input.o_search_hidden",
            // Open Command Palette
            run: "text " + createdMenuString[0],
        },
        {
            trigger: ".o_command_palette_search input",
            run: "text " + "/" + createdMenuString,
        },
        {
            // search results should have been updated
            extra_trigger: `.o_command.focused:contains(${createdAppString} / ${createdMenuString})`,
            trigger: ".o_command_palette",
            // Close the Command Palette
            run: () => {
                window.dispatchEvent(
                    new KeyboardEvent("keydown", {
                        bubbles: true,
                        key: "Escape",
                    })
                );
            },
        },
        {
            trigger: ".o_home_menu",
            // go back again to the app (using keyboard)
            run: () => {
                window.dispatchEvent(
                    new KeyboardEvent("keydown", {
                        bubbles: true,
                        key: "Escape",
                    })
                );
            },
        },
        {
            // wait to be back in the list view
            extra_trigger: ".o_list_view",
            // re-open studio
            trigger: ".o_web_studio_navbar_item",
        },
        {
            // modify the list view
            trigger: ".o_web_studio_sidebar .o_web_studio_view",
        },
        {
            //select field you want to sort and based on that sorting will be applied on List view
            trigger:
                '.o_web_studio_sidebar .o_web_studio_sidebar_select[name="sort_by"] .o_select_menu_toggler',
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_sidebar_select[name='sort_by'] .dropdown-item",
        },
        {
            //change order of sorting, Select order and change it
            trigger:
                '.o_web_studio_sidebar .o_web_studio_sidebar_select[name="sort_order"] .o_select_menu_toggler',
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_sidebar_select[name='sort_order'] .dropdown-item:nth-child(2)",
        },
        {
            // edit action
            trigger: '.o_web_studio_menu .o_menu_sections li a:contains("Views")',
        },
        {
            // add a kanban
            trigger:
                '.o_web_studio_view_category .o_web_studio_view_type.o_web_studio_inactive[data-type="kanban"] .o_web_studio_thumbnail',
        },
        {
            // add a dropdown
            trigger: ".o_dropdown_kanban.o_web_studio_add_dropdown",
        },
        {
            trigger: ".modal-footer .btn.btn-primary",
        },
        {
            // select the dropdown for edition
            trigger: ".o_dropdown_kanban:not(.o_web_studio_add_dropdown)",
        },
        {
            // enable "Set Cover" feature
            trigger: ".o_web_studio_sidebar input[name=cover_value]",
        },
        {
            trigger: ".modal-footer .btn.btn-primary",
        },
        {
            // edit action
            trigger: '.o_web_studio_menu .o_menu_sections li a:contains("Views")',
        },
        {
            // check that the kanban view is now active
            extra_trigger:
                '.o_web_studio_view_category .o_web_studio_view_type:not(.o_web_studio_inactive)[data-type="kanban"]',
            // add an activity view
            trigger:
                '.o_web_studio_view_category .o_web_studio_view_type.o_web_studio_inactive[data-type="activity"] .o_web_studio_thumbnail',
        },
        {
            extra_trigger: ".o_activity_view",
            // edit action
            trigger: '.o_web_studio_menu .o_menu_sections li a:contains("Views")',
            timeout: 20000, // activating a view takes a while and sometimes reaches the default 10s timeout
        },
        {
            // add a graph view
            trigger:
                '.o_web_studio_view_category .o_web_studio_view_type.o_web_studio_inactive[data-type="graph"] .o_web_studio_thumbnail',
        },
        {
            extra_trigger: ".o_graph_renderer",
            trigger: '.o_web_studio_menu .o_menu_sections li a:contains("Views")',
        },
        {
            extra_trigger: ".o_web_studio_views",
            // edit the search view
            trigger:
                '.o_web_studio_view_category .o_web_studio_view_type[data-type="search"] .o_web_studio_thumbnail',
        },
        {
            extra_trigger: ".o_web_studio_search_view_editor",
            trigger: ".o_menu_toggle:not(.o_menu_toggle_back)",
        },
        {
            trigger: ".o_web_studio_home_studio_menu .dropdown-toggle",
        },
        {
            // export all modifications
            trigger: ".o_web_studio_export",
        },
        {
            // click on the created app
            trigger: '.o_app[data-menu-xmlid*="studio"]:last',
        },
        {
            // switch to form view
            trigger: '.o_web_studio_views_icons > a[title="Form"]',
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor",
            // click on the view tab
            trigger: ".o_web_studio_view",
        },
        {
            // click on the restore default view button
            trigger: ".o_web_studio_restore",
        },
        {
            // click on the ok button
            trigger: ".modal-footer .btn.btn-primary",
        },
        {
            // checks that the field doesn't exist anymore
            extra_trigger: '.o_web_studio_form_view_editor:not(:has(.o_form_label))',
            trigger: ".o_web_studio_leave > a.btn",
        },
        stepNotInStudio(".o_form_view"),
    ],
});

registry.category("web_tour.tours").add("web_studio_hide_fields_tour", {
    url: "/web?debug=1#action=studio&mode=home_menu",
    test: true,
    steps: () => [
        {
            trigger: ".o_web_studio_new_app",
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: `
        .o_web_studio_app_creator_name
        > input`,
            run: `text ${randomString(6)}`,
        },
        {
            // make another interaction to show "next" button
            trigger: `
        .o_web_studio_selectors
        .o_web_studio_selector:eq(2)`,
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: `
        .o_web_studio_menu_creator
        > input`,
            run: `text ${randomString(6)}`,
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            // check that the Studio menu is still there
            extra_trigger: ".o_web_studio_menu",
            trigger: ".o_web_studio_leave > a.btn",
            timeout: 60000 /* previous step reloads registry, etc. - could take a long time */,
        },
        {
            trigger: ".oe_title input",
            run: "text Test",
        },
        {
            trigger: ".o_form_button_save",
        },
        {
            trigger: ".o_web_studio_navbar_item",
        },
        {
            extra_trigger: ".o_web_studio_menu",
            trigger: `
        .o_web_studio_views_icons
        > a[title="List"]`,
        },
        {
            // wait for the list editor to be rendered because the sidebar is the same
            extra_trigger: ".o_web_studio_list_view_editor",
            trigger: ".o_web_studio_existing_fields_header",
        },
        {
            trigger: `
        .o_web_studio_sidebar
        .o_web_studio_existing_fields
        .o_web_studio_component:has(.o_web_studio_component_description:contains(display_name))`,
            run: "drag_and_drop_native .o_web_studio_list_view_editor .o_web_studio_hook",
        },
        {
            trigger: `
        .o_list_table
        th[data-name="display_name"]`,
        },
        {
            trigger: `
        .o_web_studio_sidebar
        [name="optional"] .o_select_menu_toggler`,
        },
        {
            trigger:
                ".o_web_studio_sidebar [name='optional'] .o_select_menu_item:contains(Hide by default)",
        },
        {
            extra_trigger: '.o_list_table:not(:has(th[data-name="display_name"]))',
            trigger: `
        .o_web_studio_sidebar
        .o_web_studio_view`,
        },
        {
            trigger: `
        .o_web_studio_sidebar_checkbox
        input#show_invisible`,
        },
        {
            extra_trigger: `
        .o_list_table
        th[data-name="display_name"].o_web_studio_show_invisible`,
            trigger: ".o_web_studio_leave > a.btn",
        },
        stepNotInStudio(".o_list_view"),
    ],
});

registry.category("web_tour.tours").add("web_studio_model_option_value_tour", {
    url: "/web?debug=tests#action=studio&mode=home_menu",
    test: true,
    steps: () => [
        {
            trigger: ".o_web_studio_new_app",
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: `
        .o_web_studio_app_creator_name
        > input`,
            run: `text ${randomString(6)}`,
        },
        {
            trigger: `
        .o_web_studio_selectors
        .o_web_studio_selector:eq(2)`,
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: `
        .o_web_studio_menu_creator
        > input`,
            run: `text ${randomString(6)}`,
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            // check monetary value in model configurator
            trigger: 'input[name="use_value"]',
        },
        {
            // check lines value in model configurator
            trigger: 'input[name="lines"]',
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            trigger: '.o_web_studio_menu .o_web_studio_views_icons > a[title="Graph"]',
            timeout: 60000 /* previous step reloads registry, etc. - could take a long time */,
        },
        {
            // wait for the graph editor to be rendered and also check for sample data
            extra_trigger: ".o_view_sample_data .o_graph_renderer",
            trigger: '.o_web_studio_menu .o_web_studio_views_icons a[title="Pivot"]',
        },
        {
            // wait for the pivot editor to be rendered and also check for sample data
            extra_trigger: ".o_pivot_view .o_view_sample_data .o_view_nocontent_empty_folder",
            trigger: ".o_web_studio_leave > a.btn",
        },
        stepNotInStudio(".o_pivot_view"),
    ],
});

registry.category("web_tour.tours").add("web_studio_new_report_tour", {
    url: "/web",
    test: true,
    steps: () => [
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            // click on the created app
            trigger: '.o_app[data-menu-xmlid*="studio"]:first',
            extra_trigger: "body.o_in_studio",
        },
        {
            // edit reports
            trigger: ".o_web_studio_menu li a:contains(Reports)",
        },
        {
            // create a new report
            trigger: ".o_control_panel .o-kanban-button-new",
        },
        {
            // select external layout
            trigger: '.o_web_studio_report_layout_dialog div[data-layout="web.external_layout"]',
        },
        {
            // edit report name
            trigger: '.o_web_studio_sidebar input[id="name"]',
            run: "text My Awesome Report",
        },
        {
            // add a new group on the node
            trigger: '.o_web_studio_sidebar .o_field_many2many_tags[name="groups_id"] input',
            run: function () {
                this.$anchor.click();
            },
        },
        {
            trigger: ".o-autocomplete--dropdown-menu li:contains(Access Rights)",
        },
        {
            // wait for the group to appear
            trigger:
                '.o_web_studio_sidebar .o_field_many2many_tags[name="groups_id"] .o_tag_badge_text:contains(Access Rights)',
            run() {},
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable div.page div",
            run($anchor) {
                const element = this.$anchor[0];
                element.ownerDocument.getSelection().setPosition(element);
                assertEqual(element.outerHTML, `<div class="oe_structure"></div>`);
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable div.page div",
            run() {
                const element = this.$anchor[0];
                assertEqual(element.classList.contains("oe-command-temporary-hint"), true);
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable div.page div",
            run: "text some new text",
        },
        {
            trigger: ".o_web_studio_menu .o-web-studio-save-report.btn-primary",
        },
        {
            // The report has been saved
            trigger: ".o_web_studio_menu .o-web-studio-save-report:not(.btn-primary)",
            run() {},
        },
        {
            trigger: ".o_web_studio_breadcrumb .o_back_button:contains(Reports)",
        },
        {
            // a invisible element cannot be used as a trigger so this small hack is
            // mandatory for the next step
            run: function () {
                $(".o_kanban_record:contains(My Awesome Report) .dropdown-toggle").css(
                    "visibility",
                    "visible"
                );
            },
            trigger: ".o_kanban_view",
        },
        {
            // open the dropdown
            trigger: ".o_kanban_record:contains(My Awesome Report) .dropdown-toggle",
        },
        {
            // duplicate the report
            trigger:
                ".o_kanban_record:contains(My Awesome Report) .dropdown-menu a:contains(Duplicate)",
        },
        {
            // open the duplicate report
            trigger: ".o_kanban_record:contains(My Awesome Report copy(1))",
        },
        {
            // switch to 'Report' tab
            trigger: ".o_web_studio_sidebar input[id='name']",
            run() {
                assertEqual(this.$anchor[0].value, "My Awesome Report copy(1)");
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe div.page div",
            run() {
                assertEqual(this.$anchor[0].textContent, "some new text");
            },
        },
        {
            trigger:
                '.o_web_studio_sidebar .o_field_many2many_tags[name="groups_id"] .o_tag_badge_text:contains(Access Rights)',
            run() {},
        },
        {
            trigger: ".o_web_studio_leave > a.btn",
        },
        stepNotInStudio(),
    ],
});

registry.category("web_tour.tours").add("web_studio_new_report_basic_layout_tour", {
    url: "/web",
    test: true,
    steps: () => [
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            // click on the created app
            trigger: '.o_app[data-menu-xmlid*="studio"]:first',
            extra_trigger: "body.o_in_studio",
        },
        {
            // edit reports
            trigger: ".o_web_studio_menu li a:contains(Reports)",
        },
        {
            // create a new report
            trigger: ".o_control_panel .o-kanban-button-new",
        },
        {
            // select basic layout
            trigger: '.o_web_studio_report_layout_dialog div[data-layout="web.basic_layout"]',
        },
        {
            // edit report name
            trigger: '.o_web_studio_sidebar input[id="name"]',
            run: "text My Awesome basic layout Report",
        },
        {
            // add a new group on the node
            trigger: '.o_web_studio_sidebar .o_field_many2many_tags[name="groups_id"] input',
            run: function () {
                this.$anchor.click();
            },
        },
        {
            trigger: ".o-autocomplete--dropdown-menu li:contains(Access Rights)",
        },
        {
            // wait for the group to appear
            trigger:
                '.o_web_studio_sidebar .o_field_many2many_tags[name="groups_id"] .o_tag_badge_text:contains(Access Rights)',
            run() {},
        },
        {
            trigger: ".o_web_studio_menu .o-web-studio-save-report.btn-primary",
        },
        {
            // The report has been saved
            trigger: ".o_web_studio_menu .o-web-studio-save-report:not(.btn-primary)",
            run() {},
        },
        {
            // leave the report
            trigger: ".o_web_studio_breadcrumb .o_back_button:contains(Reports)",
        },
        {
            // a invisible element cannot be used as a trigger so this small hack is
            // mandatory for the next step
            run: function () {
                $(".o_kanban_record:contains(My Awesome basic layout Report) .dropdown-toggle").css(
                    "visibility",
                    "visible"
                );
            },
            trigger: ".o_kanban_view",
        },
        {
            // open the dropdown
            trigger: ".o_kanban_record:contains(My Awesome basic layout Report) .dropdown-toggle",
        },
        {
            // duplicate the report
            trigger:
                ".o_kanban_record:contains(My Awesome basic layout Report) .dropdown-menu a:contains(Duplicate)",
        },
        {
            // open the duplicate report
            trigger: ".o_kanban_record:contains(My Awesome basic layout Report copy(1))",
        },
        {
            trigger: '.o_web_studio_sidebar input[id="name"]',
            run() {
                assertEqual(this.$anchor[0].value, "My Awesome basic layout Report copy(1)");
            },
        },
        {
            trigger: ".o_web_studio_leave > a.btn",
        },
        stepNotInStudio(),
    ],
});

registry.category("web_tour.tours").add("web_studio_approval_tour", {
    url: "/web?debug=1",
    test: true,
    steps: () => [
        {
            // go to Apps menu
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
        },
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_cp_switch_buttons",
        },
        {
            // switch to form view editor
            trigger: '.o_web_studio_views_icons > a[title="Form"]',
        },
        {
            // click on first button it finds that has a node id
            trigger: ".o_web_studio_form_view_editor button.o-web-studio-editor--element-clickable",
        },
        {
            // enable approvals for the button
            trigger: '.o_web_studio_sidebar label[for="studio_approval"]',
        },
        {
            // add approval rule
            trigger: '.o_web_studio_sidebar_approval [name="create_approval_rule"]',
            extra_trigger: ".o_web_studio_snackbar .fa-check",
        },
        {
            // set approval message
            trigger: '.o_web_studio_sidebar_approval input[name*="approval_message"]',
            run: "text nope",
        },
        {
            // set domain on first rule
            trigger: ".o_web_studio_sidebar_approval .o_approval_domain",
            extra_trigger: ".o_studio_sidebar_approval_rule:eq(1)",
        },
        {
            // set stupid domain that is always truthy
            trigger: ".o_domain_selector_debug_container textarea",
            run: function () {
                this.$anchor.focusIn();
                this.$anchor.val('[["id", "!=", False]]');
                this.$anchor.change();
            },
        },
        {
            // save domain and close modal
            trigger: " .modal-footer .btn-primary",
        },
        {
            // add second approval rule when the first is set
            trigger: '.o_web_studio_sidebar_approval [name="create_approval_rule"]',
            extra_trigger: ".o_web_studio_snackbar .fa-check",
        },
        {
            // enable 'force different users' for one rule (doesn't matter which)
            trigger: '.o_web_studio_sidebar label[for*="exclusive_user"]',
            extra_trigger: ".o_web_studio_snackbar .fa-check",
        },
        {
            // leave studio
            trigger: ".o_web_studio_leave > a.btn",
            extra_trigger: ".o_web_studio_snackbar .fa-check",
        },
        {
            // go back to kanban
            trigger: ".o_breadcrumb .o_back_button",
            extra_trigger: ".o_web_client:not(.o_in_studio)",
        },
        {
            // open first record (should be the one that was used, so the button should be there)
            trigger: ".o_kanban_view .o_kanban_record .o_dropdown_kanban .dropdown-toggle",
        },
        {
            trigger: ".o_kanban_view .o_kanban_record .o-dropdown--menu .dropdown-item",
        },
        {
            // try to do the action
            trigger: "button[studio_approval]",
        },
        {
            // there should be a warning
            trigger: ".o_notification.border-warning",
        },
        {
            trigger: ".breadcrumb .o_back_button",
        },
        {
            trigger: "body .o_modules_kanban",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_custom_field_tour", {
    url: "/web",
    test: true,
    steps: () => [
        {
            // go to Apps menu
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
        },
        {
            // click on the list view
            trigger: ".o_switch_view.o_list",
        },
        {
            // click on optional column dropdown
            trigger: ".o_optional_columns_dropdown_toggle",
        },
        {
            // click on add custom field
            trigger: ".dropdown-item-studio",
        },
        {
            // go to home menu
            trigger: ".o_menu_toggle",
            extra_trigger: ".o_web_client.o_in_studio",
        },
        {
            //leave studio
            trigger: ".o_web_studio_leave > a.btn",
        },
        {
            // studio left.
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
            extra_trigger: ".o_web_client:not(.o_in_studio)",
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_local_storage_tour", {
    url: "/web",
    test: true,
    steps: () => [
        {
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
            run: function () {
                localStorage.setItem("openStudioOnReload", "main");
                window.location.reload();
            },
        },
        {
            // should be directly in studio mode
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
            extra_trigger: ".o_web_client.o_in_studio",
        },
        {
            trigger: ".o_menu_toggle",
        },
        {
            trigger: ".o_web_studio_leave > a.btn",
        },
        {
            // studio left.
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
            extra_trigger: ".o_web_client:not(.o_in_studio)",
            run: function () {
                window.location.reload();
            },
        },
        {
            // studio left after refresh.
            trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
            extra_trigger: ".o_web_client:not(.o_in_studio)",
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_custom_background_tour", {
    url: "/web",
    test: true,
    steps: () => [
        {
            content: "class for custom background must be enabled (outside studio)",
            trigger: ".o_home_menu_background_custom.o_home_menu_background:not(.o_in_studio)",
            run: () => null,
        },
        {
            content: "opening studio",
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
        },
        {
            content: "class for custom background must be enabled (in studio)",
            trigger: ".o_home_menu_background_custom.o_home_menu_background.o_in_studio",
            run: () => null,
        },
        {
            content: "click on Customizations button",
            trigger: ".o_web_studio_home_studio_menu button",
        },
        {
            content: "reset the background",
            trigger: ".o_web_studio_reset_default_background",
        },
        {
            content: "validate the reset of the background",
            trigger: ".modal-dialog .btn-primary",
        },
        {
            content: "class for custom background must be disabled (inside studio)",
            trigger: ".o_home_menu_background.o_in_studio:not(.o_home_menu_background_custom)",
            run: () => null,
        },
        {
            content: "leaving studio",
            trigger: ".o_web_studio_leave a",
        },
        {
            content: "class for custom background must be disabled (outside studio)",
            trigger: ".o_home_menu_background:not(.o_in_studio.o_home_menu_background_custom)",
            run: () => null,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_create_app_with_pipeline_and_user_assignment", {
    test: true,
    steps: () => [
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
        },
        {
            // the next steps are here to create a new app
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: ".o_web_studio_app_creator_name > input",
            run: "text " + (createdAppString = randomString(6)),
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: ".o_web_studio_menu_creator > input",
            run: "text " + (createdMenuString = randomString(6)),
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: "input#use_stages",
        },
        {
            trigger: "input#use_responsible",
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            trigger: ".o_web_studio_editor .o_menu_sections a:contains(Views)",
        },
        {
            trigger: ".o_web_studio_view_type[data-type='kanban'] .o_web_studio_thumbnail",
        },
        {
            extra_trigger: ".o_web_studio_kanban_view_editor",
            trigger: "img.oe_kanban_avatar",
            run() {
                const avatarImg = document.querySelector("img.oe_kanban_avatar");
                if (!avatarImg.getAttribute("title") === "Unassigned") {
                    throw new Error(
                        "The title of the new avatar should be set, even if there are no record"
                    );
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_alter_field_existing_in_multiple_views_tour", {
    test: true,
    steps: () => [
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item button",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
        },
        {
            // the next steps are here to create a new app
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: ".o_web_studio_app_creator_name > input",
            run: "text " + (createdAppString = randomString(6)),
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: ".o_web_studio_menu_creator > input",
            run: `text ${createdAppString}`,
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            extra_trigger: ".o_web_studio_sidebar",
            // unfold 'Existing Fieldqs' section
            trigger: ".o_web_studio_existing_fields_header",
            timeout: 60000,
        },
        {
            // add an existing field (the one we created)
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(2) .o_web_studio_field_many2many:contains(Followers (Partners))",
            run: "drag_and_drop_native .o_inner_group:first .o_web_studio_hook:first",
        },
        {
            trigger: ".o_web_studio_new ",
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_many2many",
            run: "drag_and_drop_native div.o_web_studio_hook:last",
        },
        {
            extra_trigger: ".modal-body",
            in_modal: true,
            trigger: '[name="relation_id"] input',
            run: `text ${createdAppString}`,
        },
        {
            // select the first model
            trigger: ".o-autocomplete--dropdown-menu > li > a:not(:has(.fa-spin))",
            in_modal: true,
        },
        {
            trigger: "button:contains(Confirm)",
        },
        {
            // edit list view
            trigger: ".o_web_studio_editX2Many",
        },
        {
            // wait for list view to be loaded
            extra_trigger: ".o_web_studio_list_view_editor",
            // go to view
            trigger: ".o_web_studio_view ",
        },
        {
            // show invisible elements
            trigger: 'label[for="show_invisible"]',
        },
        {
            trigger: ".o_web_studio_new ",
        },
        {
            // unfold 'Existing Fieldqs' section
            trigger: ".o_web_studio_existing_fields_header",
        },
        {
            // add an existing field (the one we created)
            trigger:
                ".o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_many2many:contains(Followers (Partners))",
            run: "drag_and_drop_native .o_web_studio_list_view_editor th.o_web_studio_hook:first",
        },
        {
            // select field
            trigger: "th[data-name='message_partner_ids']",
            run: "click",
        },
        {
            // make it invisible
            trigger: "#invisible",
            run: "click",
        },
        {
            extra_trigger: ".o_web_studio_snackbar .fa.fa-check",
            // check if the invisible option is checked
            trigger: "#invisible:checked",
            run() {},
        },
    ],
});

const buttonToogleStudio = {
    trigger: `button[title="Toggle Studio"]`,
};
const addActionButtonModalSteps = (
    ActionLabel = "web_studio_new_button_action_name",
    ActionName = "Privacy Lookup"
) => [
    {
        trigger: ".o-web-studio-editor--add-button-action",
    },
    {
        trigger: ".o-web-studio-editor--modal-add-action input#set_label",
        run: `text ${ActionLabel}`,
    },
    {
        trigger: ".o-web-studio-editor--modal-add-action input#set_button_type_to_action",
    },
    {
        trigger: ".o-web-studio-editor--modal-add-action .o_record_selector input",
        run: `text ${ActionName}`,
    },
    {
        trigger: `.o-web-studio-editor--modal-add-action .o-autocomplete--dropdown-menu li a:not(:has(.fa-spin)):contains(${ActionName})`,
        run(helpers) {
            const el = Array.from(this.$anchor).find((el) => el.textContent === ActionName);
            return helpers.click($(el));
        },
    },
    {
        trigger: "footer button.o-web-studio-editor--add-button-confirm",
    },
];

const addMethodButtonModalSteps = (
    ) => [
        {
            trigger: ".o-web-studio-editor--add-button-action",
        },
        {
            trigger: ".o-web-studio-editor--modal-add-action input#set_label",
            run: `text test`,
        },
        {
            trigger: ".o-web-studio-editor--modal-add-action input#set_button_type_to_object",
        },
        {
            trigger: ".o-web-studio-editor--modal-add-action  input#set_method",
            run: `text demo`,
        },

    ];

registry.category("web_tour.tours").add("web_studio_check_method_in_model", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
            {
            trigger: ".o_form_view .o_form_editable",
        },
        buttonToogleStudio,
        ...addMethodButtonModalSteps(),
        {
            trigger: "div.text-danger",
            run() {
                const div_error = document.querySelector("div.text-danger");
                assertEqual(div_error.innerHTML, "The method demo does not exist on the model res.partner().")
                },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_test_create_action_button_in_form_view", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        buttonToogleStudio,
        ...addActionButtonModalSteps(),
        {
            trigger: ".o_web_studio_leave a",
        },
        stepNotInStudio(".o_form_view"),
    ],
});

registry
    .category("web_tour.tours")
    .add("web_studio_test_create_second_action_button_in_form_view", {
        test: true,
        steps: () => [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
            },
            {
                trigger: ".o_form_view .o_form_editable",
            },
            buttonToogleStudio,
            ...addActionButtonModalSteps("web_studio_other_button_action_name", "Download (vCard)"),
            {
                trigger: ".o_web_studio_leave a",
            },
            stepNotInStudio(".o_form_view"),
        ],
    });

registry.category("web_tour.tours").add("web_studio_test_create_action_button_in_list_view", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        buttonToogleStudio,
        {
            trigger: ".o_web_studio_views_icons a[aria-label='List']",
        },
        {
            trigger: ".o_optional_columns_dropdown button",
        },
        ...addActionButtonModalSteps(),
        {
            trigger: ".o_web_studio_leave a",
        },
        stepNotInStudio(".o_list_view"),
    ],
});

registry.category("web_tour.tours").add("web_studio_test_remove_action_button_in_form_view", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        buttonToogleStudio,
        {
            trigger: 'button[studioxpath="/form[1]/header[1]/button[1]"]',
        },
        {
            trigger: "button.o_web_studio_remove",
        },
        {
            trigger: "footer.modal-footer>button.btn-primary",
        },
        {
            trigger: ".o_web_studio_leave a",
        },
        stepNotInStudio(".o_form_view"),
    ],
});

registry.category("web_tour.tours").add("web_studio_test_remove_action_button_in_list_view", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        buttonToogleStudio,
        {
            trigger: ".o_web_studio_views_icons a[aria-label='List']",
        },
        {
            trigger: ".o_optional_columns_dropdown button",
        },
        {
            trigger: 'button[studioxpath="/tree[1]/header[1]/button[1]"]',
        },
        {
            trigger: "button.o_web_studio_remove",
        },
        {
            trigger: "footer.modal-footer>button.btn-primary",
        },
        {
            trigger: ".o_web_studio_leave a",
        },
        stepNotInStudio(".o_list_view"),
    ],
});

registry.category("web_tour.tours").add("web_studio_monetary_create", {
    url: "/web?debug=1",
    test: true,
    steps: () => [
        // This tour drag&drop a monetary field and verify that a currency is created
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
            run: () => {},
        },
        {
            trigger: ".o_app[data-menu-xmlid='web_studio.studio_app_menu']",
        },
        // drag&drop a monetary and verify that the currency is in the view
        {
            // add a new monetary field
            trigger: ".o_web_studio_sidebar .o_web_studio_field_monetary",
            run: "drag_and_drop_native .o_web_studio_form_view_editor .o_inner_group",
        },
        {
            // verify that the currency is set
            trigger: ".o_web_studio_sidebar .o_web_studio_property_currency_field .text-start",
            run() {
                assertEqual(this.$anchor[0].textContent, "Currency (x_studio_currency_id)");
            },
        },
        {
            // currency field is in the view
            trigger: ".o_web_studio_view_renderer div[data-field-name='x_studio_currency_id']",
        },
        {
            trigger: ".o_web_studio_properties.active",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_monetary_change_currency_name", {
    url: "/web?debug=1",
    test: true,
    steps: () => [
        // Changing currency name also change the currency name in the monetary currency selection
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
            run: () => {},
        },
        {
            trigger: ".o_app[data-menu-xmlid='web_studio.studio_app_menu']",
        },
        {
            // currency field is in the view and click on it
            trigger: ".o_web_studio_view_renderer [data-field-name='x_studio_currency_test']",
        },
        {
            // change the currency name
            trigger: "input[name='string']",
            run(helper) {
                helper.text("NewCurrency");
            },
        },
        {
            // click on monetary
            trigger: "div[data-field-name^='x_studio_monetary_test']",
        },
        {
            // verify that the currency name changed in the monetary field
            trigger: ".o_web_studio_sidebar .o_web_studio_property_currency_field .text-start",
            run() {
                assertEqual(this.$anchor[0].textContent, "NewCurrency (x_studio_currency_test)");
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_related_monetary_creation", {
    url: "/web?debug=1",
    test: true,
    steps: () => [
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
            run: () => {},
        },
        {
            trigger: ".o_app[data-menu-xmlid='web_studio.studio_app_menu']",
        },
        {
            // add a new related field
            trigger: ".o_web_studio_sidebar .o_web_studio_field_related",
            run: "drag_and_drop_native .o_web_studio_form_view_editor .o_inner_group",
        },
        {
            trigger: '.o_model_field_selector_value',
        },
        {
            in_modal: false,
            trigger:
                ".o_model_field_selector_popover_search input",
            run: "text X Test",
        },
        {
            in_modal: false,
            trigger: ".o_model_field_selector_popover_item[data-name='x_test'] .o_model_field_selector_popover_item_relation",
        },
        {
            in_modal: false,
            trigger:
                ".o_model_field_selector_popover_search input",
            run: "text X Studio Monetary Test",
        },
        {
            in_modal: false,
            trigger: ".o_model_field_selector_popover_item[data-name='x_studio_monetary_test'] button",
        },
        {
            trigger:".modal-footer button.btn-primary",
        },
        {
            // The related monetary is created
            trigger: ".o_web_studio_view_renderer .o_form_label:contains('New Related Field')",
        },
        {
            // The currency is created
            trigger: ".o_web_studio_view_renderer [data-field-name='x_studio_currency_id']",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_monetary_change_currency_field", {
    url: "/web",
    test: true,
    steps: () => [
        // Change currency and verify that the view take the changes into account (the dollar appears)
        {
            // open the custom app form view
            trigger: "a[data-menu-xmlid='web_studio.studio_app_menu']",
        },
        {
            // fill the required char input
            trigger: ".o_field_char input",
            run: "text title",
        },
        {
            // fill the new currency (many2one) input #1
            trigger: "div [name='x_studio_currency_test2'] input",
            run: "text USD",
        },
        {
            // add a new currency field step #2
            trigger: '.ui-menu-item a:contains("USD")',
        },
        {
            // save the view form
            trigger: "button.o_form_button_save",
        },
        {
            // open studio with the record
            trigger: ".o_main_navbar .o_web_studio_navbar_item button",
            extra_trigger: ".o_form_saved",
        },
        {
            // check that there is no currency symbol in renderer
            trigger: "div[name='x_studio_monetary_test'] span",
            run() {
                assertEqual(this.$anchor[0].textContent, "0.00");
            },
        },
        {
            // click on the monetary field
            trigger: "div[data-field-name='x_studio_monetary_test']",
        },
        {
            // change the currency_field in the monetary
            trigger: ".o_web_studio_sidebar .o_web_studio_property_currency_field button",
        },
        {
            // click on the second currency, which is "X Studio Currency Test2"
            trigger: ".o_web_studio_property_currency_field .o_select_menu_item:nth-child(2)",
        },
        {
            //wait until the currency has been set (also test the reactivity)
            trigger:
                ".o_web_studio_sidebar .o_web_studio_property_currency_field span.text-start:contains('X Studio Currency Test2')",
            run() {},
        },
        {
            // by changing the currency, we should have a $ symbol in the renderer
            trigger: "div[name^='x_studio_monetary'] span",
            run() {
                assertEqual(this.$anchor[0].textContent, "$ 0.00");
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_monetary_change_currency_not_in_view", {
    url: "/web",
    test: true,
    steps: () => [
        // Change a currency that is not present in the view insert it in the view
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
            run: () => {},
        },
        {
            trigger: ".o_app[data-menu-xmlid='web_studio.studio_app_menu']",
        },
        {
            // click on the monetary field
            trigger: "div[data-field-name='x_studio_monetary_test']",
        },
        {
            // change the currency_field in the monetary
            trigger: ".o_web_studio_sidebar .o_web_studio_property_currency_field button",
        },
        {
            // click on the second currency, which is "X Studio Currency Test2"
            trigger: ".o_web_studio_property_currency_field .o_select_menu_item:nth-child(2)",
        },
        {
            // wait until the currency has been set
            trigger:
                ".o_web_studio_sidebar .o_web_studio_property_currency_field span.text-start:contains('X Studio Currency Test2')",
            run() {},
        },
        {
            // go to view tab
            trigger: ".o_web_studio_view",
        },
        {
            // currency field is in the view and click on it
            trigger: ".o_web_studio_view_renderer div[data-field-name='x_studio_currency_test2']",
        },
        {
            trigger: ".o_web_studio_properties.active",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_monetary_add_existing_monetary", {
    url: "/web?debug=1",
    test: true,
    steps: () => [
        // Add an existing monetary trough the "existing fields" and verify that the currency
        // is added to the view
        {
            // open studio
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
            run: () => {},
        },
        {
            trigger: ".o_app[data-menu-xmlid='web_studio.studio_app_menu']",
        },
        {
            // click on "existing fields"
            trigger: ".o_web_studio_existing_fields_header",
        },
        {
            // add the existing monetary field
            trigger: ".o_web_studio_existing_fields_section .o_web_studio_field_monetary",
            run: "drag_and_drop_native .o_form_renderer .o_web_studio_hook",
        },
        {
            // monetary exist and click on monetary
            trigger: "div[data-field-name='x_studio_monetary_test']",
        },
        {
            // verify that the currency name changed in the monetary field
            trigger: ".o_web_studio_sidebar .o_web_studio_property_currency_field .text-start",
            run() {
                assertEqual(
                    this.$anchor[0].textContent,
                    "X Studio Currency Test (x_studio_currency_test)"
                );
            },
        },
        {
            // currency field is in the view
            trigger: "div[data-field-name='x_studio_currency_test']",
            run() {},
        },
    ],
});

registry
    .category("web_tour.tours")
    .add("web_studio_monetary_create_monetary_with_existing_currency", {
        url: "/web?debug=1",
        test: true,
        steps: () => [
            // Add a new monetary field, since a currency already exists, it should take it instead
            // of creating a new one
            {
                // open studio
                trigger: ".o_main_navbar .o_web_studio_navbar_item",
                extra_trigger: ".o_home_menu_background",
            },
            {
                trigger: ".o_web_studio_new_app",
                run: () => {},
            },
            {
                trigger: ".o_app[data-menu-xmlid='web_studio.studio_app_menu']",
            },
            {
                // go to Add tab
                trigger: ".o_web_studio_new",
            },
            {
                // add a new monetary field
                trigger: ".o_web_studio_sidebar .o_web_studio_field_monetary",
                run: "drag_and_drop_native .o_web_studio_form_view_editor .o_inner_group",
            },
            {
                // there is only one occurence of the currency field in the view
                trigger: ".o_form_renderer div[data-field-name^='x_studio_monetary']",
                run() {
                    const o2mNumber = document.querySelectorAll("div.o_field_many2one");
                    assertEqual(o2mNumber.length, 1);
                },
            },
        ],
    });

registry.category("web_tour.tours").add("web_studio_add_field_into_empty_group_by", {
    url: "/web?debug=1",
    test: true,
    steps: () => [
        {
            trigger: ".o_main_navbar .o_web_studio_navbar_item",
            extra_trigger: ".o_home_menu_background",
        },
        {
            trigger: ".o_web_studio_new_app",
        },
        {
            trigger: ".o_web_studio_app_creator_next",
        },
        {
            trigger: ".o_web_studio_app_creator_name > input",
            run: `text ${randomString(6)}`,
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: ".o_web_studio_menu_creator > input",
            run: `text ${randomString(6)}`,
        },
        {
            trigger: ".o_web_studio_app_creator_next.is_ready",
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            trigger: ".o_web_studio_views_icons a:last",
        },
        {
            trigger: `
        .o_web_studio_sidebar
        .o_web_studio_existing_fields
        .o_web_studio_component:has(.o_web_studio_component_description:contains(create_date))`,
            run: "drag_and_drop_native .o-web-studio-search--groupbys .o_web_studio_hook",
        },
    ],
});

return __exports;
});
;

/*************************************************************************************
*  Filepath: /web_studio/static/tests/tours/web_studio_test_ui_unit_report_tours.js  *
*  Lines: 1470                                                                       *
*************************************************************************************/
odoo.define('@web_studio/../tests/tours/web_studio_test_ui_unit_report_tours', ['@web/core/registry', '@web/core/network/download', '@web/core/utils/patch', '@web/core/utils/xml', '@web_studio/../tests/tours/tour_helpers'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
const { registry } = require("@web/core/registry");
const { download } = require("@web/core/network/download");
const { patch } = require("@web/core/utils/patch");
const { parseXML, serializeXML } = require("@web/core/utils/xml");
const { assertEqual, stepNotInStudio, nextTick } = require("@web_studio/../tests/tours/tour_helpers");

const getBoundingClientRect = Element.prototype.getBoundingClientRect;

function normalizeXML(str) {
    const doc = parseXML(str);
    /* Recursively trim text nodes conditionally
     * if they start or end with a newline (\n).
     * In that case we make the assumption that all whitespaces
     * are materializing indentation.
     * If there are only spaces (\s), we make the assumption that they
     * are actual spaces that are visible to the naked eye of the user.
     */
    const nodes = [...doc.childNodes];
    for (const node of nodes) {
        if (node.nodeType === Node.TEXT_NODE) {
            let nodeValue = node.nodeValue;
            if (nodeValue.startsWith("\n")) {
                nodeValue = nodeValue.trimStart();
            }
            if (nodeValue.endsWith("\n")) {
                nodeValue = nodeValue.trimEnd();
            }
            node.nodeValue = nodeValue;
        }
        if (node.nodeType === Node.ELEMENT_NODE) {
            nodes.push(...node.childNodes);
        }
    }

    return serializeXML(doc);
}

function insertText(element, text, offset = 0) {
    const doc = element.ownerDocument;
    const sel = doc.getSelection();
    sel.removeAllRanges();
    const range = doc.createRange();
    range.setStart(element, offset);
    range.setEnd(element, offset);
    sel.addRange(range);
    for (const char of text) {
        element.dispatchEvent(
            new KeyboardEvent("keydown", {
                key: char,
                bubbles: true,
            })
        );
        const textNode = doc.createTextNode(char);
        element.append(textNode);
        sel.removeAllRanges();
        range.setStart(textNode, 1);
        range.setEnd(textNode, 1);
        sel.addRange(range);
        element.dispatchEvent(
            new InputEvent("input", {
                inputType: "insertText",
                data: char,
                bubbles: true,
            })
        );
        element.dispatchEvent(
            new KeyboardEvent("keyup", {
                key: char,
                bubbles: true,
            })
        );
    }
}

function openEditorPowerBox(element, offset = 0) {
    return insertText(element, "/", offset);
}

/* global ace */

// This function allows to use and test the feature that automatically
// saves when we leave the reportEditor.
// Implem detail: it is done at willUnmount, so we need to wait for the promise
// to be sure we leave the tour when the save is done.
function patchReportEditorModelForSilentSave() {
    const saveProms = [];
    const { ReportEditorModel } = odoo.loader.modules.get(
        "@web_studio/client_action/report_editor/report_editor_model"
    );
    const _unpatch = patch(ReportEditorModel.prototype, {
        saveReport() {
            const prom = super.saveReport(...arguments);
            saveProms.push(prom);
            return prom;
        },
    });

    return {
        wait: async (unpatch = true) => {
            await Promise.all(saveProms);
            if (unpatch) {
                _unpatch();
            }
        },
        saveProms,
        unpatch: _unpatch,
    };
}

let silentPatch;
registry.category("web_tour.tours").add("web_studio.test_basic_report_edition", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar input[id='name']",
            run: "text modified in test",
        },
        {
            trigger: ".o_web_studio_menu .breadcrumb-item.active",
            run() {
                assertEqual(this.$anchor[0].textContent, "modified in test");
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(0)",
            run: "text edited with odoo editor",
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(2)",
            run: "text edited with odoo editor 2",
        },
        {
            // Don't explicitly save, this is a feature
            trigger: ".o_web_studio_leave a",
            run(helpers) {
                silentPatch = patchReportEditorModelForSilentSave();
                helpers.click(this.$anchor);
            },
        },
        stepNotInStudio(),
        {
            trigger: "body",
            run() {
                return silentPatch.wait();
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_basic_report_edition_xml", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar button[name='report_edit_sources']",
        },
        {
            trigger: ".o_web_studio_xml_resource_selector .o_web_studio_xml_resource_select_menu",
            run() {
                assertEqual(
                    this.$anchor[0].textContent,
                    "web_studio.test_report_document (web_studio.test_report_document)"
                );
            },
        },
        {
            trigger: ".o_web_studio_code_editor.ace_editor",
            run() {
                ace.edit(this.$anchor[0])
                    .getSession()
                    .insert(
                        { row: 2, column: 0 },
                        '<span class="test-added-0">in document view</span>\n'
                    );
            },
        },
        {
            trigger: ".o_web_studio_xml_resource_selector .o_select_menu_toggler",
        },
        {
            trigger: ".o_web_studio_xml_resource_selector .o-dropdown--menu",
            run(helpers) {
                const mainView = Array.from(
                    this.$anchor[0].querySelectorAll(".o_select_menu_item")
                ).find(
                    (el) =>
                        el.textContent ===
                        "web_studio.test_report (web_studio.studio_test_report_view)"
                );
                helpers.click(mainView);
            },
        },
        {
            trigger: ".o_web_studio_code_editor.ace_editor",
            run() {
                ace.edit(this.$anchor[0])
                    .getSession()
                    .insert(
                        { row: 2, column: 0 },
                        '<span class="test-added-1">in main view</span>\n'
                    );
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            extra_trigger: ".o-web-studio-save-report:not(.btn-primary)",
            trigger: ".o-web-studio-report-container iframe body",
            run() {
                assertEqual(
                    this.$anchor[0].querySelector(".test-added-0").textContent,
                    "in document view"
                );
                assertEqual(
                    this.$anchor[0].querySelector(".test-added-1").textContent,
                    "in main view"
                );
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_basic_report_edition_discard", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar input[id='name']",
            run: "text modified in test",
        },
        {
            trigger: ".o_web_studio_menu .breadcrumb-item.active",
            run() {
                assertEqual(this.$anchor[0].textContent, "modified in test");
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(0)",
            run: "text edited with odoo editor",
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(2)",
            run: "text edited with odoo editor 2",
        },
        {
            trigger: ".o-web-studio-discard-report.btn-secondary",
        },
        {
            trigger: ".modal-dialog .btn-primary",
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(0)",
            run() {
                assertEqual(this.$anchor[0].textContent, "");
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_basic_report_edition_cancel_discard", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar input[id='name']",
            run: "text modified in test",
        },
        {
            trigger: ".o_web_studio_menu .breadcrumb-item.active",
            run() {
                assertEqual(this.$anchor[0].textContent, "modified in test");
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(0)",
            run: "text edited with odoo editor",
        },
        {
            trigger: ".o-web-studio-discard-report.btn-secondary",
        },
        {
            trigger: ".modal-dialog .btn-secondary",
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(0)",
            run() {
                assertEqual(this.$anchor[0].textContent, "edited with odoo editor");
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o-web-studio-save-report:not(.btn-primary)",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_basic_report_edition_xml_discard", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar button[name='report_edit_sources']",
        },
        {
            trigger: ".o_web_studio_code_editor.ace_editor",
            run() {
                ace.edit(this.$anchor[0])
                    .getSession()
                    .insert({ row: 2, column: 0 }, '<span class="test-added">in main view</span>');
            },
        },
        {
            trigger: ".o-web-studio-discard-report.btn-secondary",
        },
        {
            trigger: ".o-web-studio-report-container iframe body",
            run() {
                const element = this.$anchor[0].querySelector(".test-added");
                if (element) {
                    throw new Error("The changes should have been discarded");
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_basic_report_edition_error", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(0)",
            run: "text edited with odoo editor",
        },
        {
            // Brutally add a t-else: this will crash in python on save
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable",
            run() {
                const editable = this.$anchor[0];
                const wysiwyg = $(editable).data("wysiwyg");
                const telse = wysiwyg.odooEditor.document.createElement("t");
                telse.setAttribute("t-else", "");
                wysiwyg.odooEditor.execCommand("insert", telse);
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(2)",
            run: "text edited with odoo editor 2",
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o_notification .o_notification_title",
            run() {
                assertEqual(this.$anchor[0].textContent, "Report edition failed");
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(0)",
            run() {
                // The iframe .odoo-editor-editable shouldn't have been reset after an error
                assertEqual(this.$anchor[0].textContent, "edited with odoo editor");
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_basic_report_edition_xml_error", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar button[name='report_edit_sources']",
        },
        {
            trigger: ".o_web_studio_code_editor.ace_editor",
            run() {
                ace.edit(this.$anchor[0])
                    .getSession()
                    .insert(
                        { row: 2, column: 0 },
                        '<span t-else="" class="test-added">in main view</span>'
                    );
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o_notification .o_notification_title",
            run() {
                assertEqual(this.$anchor[0].textContent, "Report edition failed");
            },
        },
        {
            trigger: ".o-web-studio-report-container iframe body",
            run() {
                const element = this.$anchor[0].querySelector(".test-added");
                if (element) {
                    throw new Error("The changes should have been discarded");
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_report_reset_archs", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar button[name='report_reset_archs']",
        },
        {
            trigger: ".modal-footer",
            run(helpers) {
                const button = Array.from(this.$anchor[0].querySelectorAll("button")).find(
                    (el) => el.textContent === "Reset report" && el.classList.contains("btn-danger")
                );
                helpers.click(button);
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(1)",
            run() {
                assertEqual(this.$anchor[0].textContent, "from file");
            },
        },
    ],
});

let downloadProm;
const steps = [];
registry.category("web_tour.tours").add("web_studio.test_print_preview", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar button[name='report_print_preview']",
            run(helpers) {
                downloadProm = new Promise((resolve) => {
                    const unpatch = patch(download, {
                        _download(options) {
                            steps.push("download report");
                            const context = JSON.parse(options.data.context);
                            assertEqual(context["report_pdf_no_attachment"], true);
                            assertEqual(context["discard_logo_check"], true);
                            assertEqual(context["active_ids"].length, 1);
                            unpatch();
                            resolve();
                        },
                    });
                });
                return helpers.click(this.$anchor);
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg",
            async run() {
                await downloadProm;
                assertEqual(steps.length, 1);
                assertEqual(steps[0], "download report");
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_table_rendering", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger:
                ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable .valid_table",
            run() {
                assertEqual(
                    this.$anchor[0].outerHTML,
                    `<table class="valid_table">
                    <tbody><tr><td>I am valid</td></tr>
                </tbody></table>`
                );
            },
        },
        {
            trigger:
                ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable .invalid_table",
            run() {
                assertEqual(
                    this.$anchor[0].outerHTML,
                    `<div class="invalid_table" oe-origin-tag="table" oe-origin-style="">
                    <t t-foreach="doc.child_ids" t-as="child" oe-context="{&quot;docs&quot;: {&quot;model&quot;: &quot;res.partner&quot;, &quot;name&quot;: &quot;Contact&quot;, &quot;in_foreach&quot;: false}, &quot;company&quot;: {&quot;model&quot;: &quot;res.company&quot;, &quot;name&quot;: &quot;Companies&quot;, &quot;in_foreach&quot;: false}, &quot;doc&quot;: {&quot;model&quot;: &quot;res.partner&quot;, &quot;name&quot;: &quot;Contact&quot;, &quot;in_foreach&quot;: true}, &quot;child&quot;: {&quot;model&quot;: &quot;res.partner&quot;, &quot;name&quot;: &quot;Contact&quot;, &quot;in_foreach&quot;: true}}">
                        <div oe-origin-tag="tr" oe-origin-style=""><div oe-origin-tag="td" oe-origin-style="" style="width: calc(100% - 10px);">I am not valid</div></div>
                    </t>
                </div>`
                );
            },
        },
        {
            trigger:
                ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable .invalid_table [oe-origin-tag='td']",
            run: "text edited with odooEditor",
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(1)",
            run: "text p edited with odooEditor",
        },
        {
            trigger: ".o_web_studio_sidebar input[id='name']",
            run: "text modified",
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o-web-studio-save-report:not(.btn-primary)",
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_field_placeholder", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            // 1 sec delay to make sure we call the download route
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(2)",
            async run(helpers) {
                const el = this.$anchor[0];
                openEditorPowerBox(el);
            },
        },
        {
            trigger:
                ".oe-powerbox-wrapper .oe-powerbox-commandDescription:contains(Insert a field)",
        },
        {
            extra_trigger: ".o-web-studio-field-dynamic-placeholder",
            trigger:
                ".o-web-studio-report-editor-wysiwyg div:has(> .o-web-studio-report-container)",
            async run() {
                const placeholderBox = getBoundingClientRect.call(
                    document.querySelector(".o-web-studio-field-dynamic-placeholder")
                );
                assertEqual(this.$anchor[0].scrollTop, 0);
                this.$anchor[0].scrollTop = 9999;
                await new Promise(requestAnimationFrame);
                const newPlaceholderbox = getBoundingClientRect.call(
                    document.querySelector(".o-web-studio-field-dynamic-placeholder")
                );
                // The field placeholder should have followed its anchor, and it happens that the anchor's container
                // has been scrolled, so the anchor has moved upwards (and is actually outside of the viewPort, to the top)
                assertEqual(placeholderBox.top > newPlaceholderbox.top, true);
            },
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_search input",
            run: "text Job Position",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_item_name:contains(Job Position)",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_default_value_input input",
            run: "text some default value",
        },
        {
            trigger: ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", bubbles: true })
                );
            },
        },
        {
            trigger:
                ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable span[t-field='doc.function'][title='doc.function']",
            isCheck: true,
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
            isCheck: true,
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(0)",
            run() {
                insertText(this.$anchor[0], "edited with odooEditor");
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o-web-studio-save-report:not(.btn-primary)",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_add_field_blank_report", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            // edit reports
            trigger: ".o_web_studio_menu li a:contains(Reports)",
        },
        {
            // create a new report
            trigger: ".o_control_panel .o-kanban-button-new",
        },
        {
            // select basic layout
            trigger: '.o_web_studio_report_layout_dialog div[data-layout="web.basic_layout"]',
        },
        {
            trigger: "iframe .odoo-editor-editable .page div",
            async run(helpers) {
                const el = this.$anchor[0];
                openEditorPowerBox(el);
            },
        },
        {
            trigger:
                ".oe-powerbox-wrapper .oe-powerbox-commandDescription:contains(Insert a field)",
        },
        {
            extra_trigger: ".o-web-studio-field-dynamic-placeholder",
            trigger:
                ".o-web-studio-report-editor-wysiwyg div:has(> .o-web-studio-report-container)",
            async run() {
                const placeholderBox = getBoundingClientRect.call(
                    document.querySelector(".o-web-studio-field-dynamic-placeholder")
                );
                assertEqual(this.$anchor[0].scrollTop, 0);
                this.$anchor[0].scrollTop = 9999;
                await new Promise(requestAnimationFrame);
                const newPlaceholderbox = getBoundingClientRect.call(
                    document.querySelector(".o-web-studio-field-dynamic-placeholder")
                );
                // The field placeholder should have followed its anchor, and it happens that the anchor's container
                // has been scrolled, so the anchor has moved upwards (and is actually outside of the viewPort, to the top)
                assertEqual(placeholderBox.top > newPlaceholderbox.top, true);
            },
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_search input",
            run: "text Job Position",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_item_name:contains(Job Position)",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_default_value_input input",
            run: "text some default value",
        },
        {
            trigger: ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", bubbles: true })
                );
            },
        },
        {
            // check that field was added successfully
            trigger: "iframe .odoo-editor-editable .page div > span:contains(some default value)",
        },
        {
            trigger: "iframe .odoo-editor-editable .page div",
            run() {
                insertText(this.$anchor[0], "Custo");
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o-web-studio-save-report:not(.btn-primary)",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_toolbar_appearance", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger:
                ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p[t-field='doc.name']",
            run() {
                const anchor = this.$anchor[0];
                const selection = anchor.ownerDocument.getSelection();
                const range = new Range();
                range.selectNode(anchor);
                selection.removeAllRanges();
                selection.addRange(range);
            },
        },
        {
            trigger: "#toolbar.oe-floating[style*=visible]",
            isCheck: true,
        },
        {
            trigger: "#bold.btn",
        },
        {
            trigger: "#italic.btn",
        },
        {
            trigger: ".o-web-studio-discard-report",
        },
        {
            trigger: "#toolbar.oe-floating[style*=hidden]",
            in_modal: false,
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_edition_without_lang", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(1)",
            run() {
                assertEqual(this.$anchor[0].textContent, "original term");
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(1)",
            async run() {
                insertText(this.$anchor[0], " edited");
            },
        },
        {
            trigger: ".o_web_studio_sidebar button[name='report_edit_sources']",
        },
        {
            trigger: ".o_web_studio_xml_resource_select_menu button.o_select_menu_toggler",
        },
        {
            trigger:
                ".o_web_studio_xml_resource_select_menu .o_select_menu_item_label:contains(report_editor_customization_full)",
        },
        {
            trigger: ".o_web_studio_code_editor_info .o_field_translate",
        },
        {
            trigger: ".o_translation_dialog .row:eq(1)",
            run() {
                assertEqual(this.$anchor[0].children[0].textContent.trim(), "French / Français");
                assertEqual(this.$anchor[0].children[1].textContent.trim(), "original term edited");
            },
        },
        {
            trigger: ".o_translation_dialog .row:eq(1) textarea",
            run: "text translated edited term",
        },
        {
            trigger: ".modal-footer button.btn-primary",
        },
        {
            trigger: ".o_web_studio_editor",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_report_xml_other_record", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar button[name='report_edit_sources']",
        },
        {
            extra_trigger: ".o_web_studio_xml_editor",
            trigger: ".o-web-studio-report-container iframe p:contains(partner_1)",
            run() {
                assertEqual(
                    document.querySelector(".o-web-studio-report-search-record input").value,
                    "partner_1"
                );
            },
        },
        {
            trigger: ".o-web-studio-report-pager .o_pager_next",
        },
        {
            trigger: ".o-web-studio-report-container iframe p:contains(partner_2)",
            run() {
                assertEqual(
                    document.querySelector(".o-web-studio-report-search-record input").value,
                    "partner_2"
                );
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_partial_eval", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o-web-studio-report-container iframe .odoo-editor-editable .lol",
            run() {
                const closestContextElement = this.$anchor[0].closest("[oe-context]");
                const oeContext = closestContextElement.getAttribute("oe-context");
                const expected = {
                    docs: { model: "res.partner", name: "Contact", in_foreach: false },
                    company: { model: "res.company", name: "Companies", in_foreach: false },
                    doc: { model: "res.partner", name: "Contact", in_foreach: true },
                    my_children: { model: "res.partner", name: "Contact", in_foreach: false },
                    child: { model: "res.partner", name: "Contact", in_foreach: true },
                };
                assertEqual(JSON.stringify(JSON.parse(oeContext)), JSON.stringify(expected));
            },
        },
        {
            trigger: ".o-web-studio-report-container iframe .odoo-editor-editable .couic",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_render_multicompany", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o-web-studio-report-container iframe .odoo-editor-editable .test_layout",
            run() {},
        },
        {
            trigger: ".o-web-studio-report-container iframe .odoo-editor-editable img",
            run() {
                const currentUrl = new URL(window.location);
                const cids = new URLSearchParams(currentUrl.hash.slice(1)).get("cids").split("-");
                assertEqual(this.$anchor[0].getAttribute("src"), `/logo.png?company=${cids[0]}`);
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_add_non_searchable_field", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(2)",
            async run(helpers) {
                const el = this.$anchor[0];
                openEditorPowerBox(el);
            },
        },
        {
            trigger:
                ".oe-powerbox-wrapper .oe-powerbox-commandDescription:contains(Insert a field)",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_search input",
            run: "text New",
        },
        {
            trigger: "[data-name=avatar_1024] > button.o_model_field_selector_popover_item_name",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_default_value_input input",
            run: "text file default value",
        },
        {
            trigger: ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", bubbles: true })
                );
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o-web-studio-save-report:not(.btn-primary)",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_report_edition_binary_field", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(2)",
            async run(helpers) {
                const el = this.$anchor[0];
                openEditorPowerBox(el);
            },
        },
        {
            trigger:
                ".oe-powerbox-wrapper .oe-powerbox-commandDescription:contains(Insert a field)",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_search input",
            run: "text Company",
        },
        {
            trigger: "[data-name=company_id] > button.o_model_field_selector_popover_item_relation",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_search input",
            run: "text New File",
        },
        {
            trigger:
                ".o_model_field_selector_popover_item_name:contains(New File):not(:contains(filename))",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_default_value_input input",
            run: "text file default value",
        },
        {
            trigger: ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", bubbles: true })
                );
            },
        },
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(2)",
            async run(helpers) {
                const el = this.$anchor[0];
                openEditorPowerBox(el);
            },
        },
        {
            trigger:
                ".oe-powerbox-wrapper .oe-powerbox-commandDescription:contains(Insert a field)",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_search input",
            run: "text Company",
        },
        {
            trigger: "[data-name=company_id] > button.o_model_field_selector_popover_item_relation",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_search input",
            run: "text New Image",
        },
        {
            trigger: ".o_model_field_selector_popover_item_name:contains(New Image)",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_default_value_input input",
            run: "text image default value",
        },
        {
            trigger: ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", bubbles: true })
                );
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o-web-studio-save-report:not(.btn-primary)",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_report_edition_dynamic_table", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(2)",
            async run(helpers) {
                const el = this.$anchor[0];
                openEditorPowerBox(el);
            },
        },
        {
            trigger:
                ".oe-powerbox-wrapper .oe-powerbox-commandDescription:contains(Insert a table based on a relational field)",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_search input",
            run: "text Activities",
        },
        {
            trigger: "[data-name=activity_ids] > button.o_model_field_selector_popover_item_name",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_default_value_input input",
            run: "text First Column",
        },
        {
            trigger: ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", bubbles: true })
                );
            },
        },
        {
            trigger:
                ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable table tr td:contains(First Column)",
            isCheck: true,
        },
        {
            trigger:
                ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable table tr[t-foreach]",
            run() {
                const el = this.$anchor[0];
                const context = JSON.parse(el.getAttribute("oe-context"));
                assertEqual(context.x2many_record.model, "mail.activity");
            },
        },
        {
            trigger:
                ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable table tr td:contains(Insert a field...)",
            run() {
                const el = this.$anchor[0];
                openEditorPowerBox(el);
            },
        },
        {
            trigger:
                ".oe-powerbox-wrapper .oe-powerbox-commandDescription:contains(Insert a field)",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_search input",
            run: "text Summary",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover_item_name:contains(Summary)",
        },
        {
            trigger:
                ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_default_value_input input",
            run: "text Some Summary",
        },
        {
            trigger: ".o-web-studio-field-dynamic-placeholder .o_model_field_selector_popover",
            run() {
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { key: "Enter", bubbles: true })
                );
            },
        },
        {
            trigger:
                ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable table td span[t-field='x2many_record.summary']",
            isCheck: true,
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o-web-studio-save-report:not(.btn-primary)",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_saving_xml_editor_reload", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "button[name='report_edit_sources']",
        },
        {
            extra_trigger: ".o-web-studio-save-report:not(.btn-primary)",
            trigger: ".o_web_studio_xml_editor .ace_editor",
            run() {
                ace.edit(this.$anchor[0])
                    .getSession()
                    .insert(
                        { row: 2, column: 0 },
                        '<span class="test-added-0">in document view</span>\n'
                    );
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            extra_trigger: ".o-web-studio-save-report:not(.btn-primary)",
            trigger: ".o_web_studio_xml_editor .ace_editor",
            run() {
                const aceValue = ace.edit(this.$anchor[0]).getSession().getValue();

                assertEqual(
                    normalizeXML(aceValue),
                    normalizeXML(`
                        <t t-name="web_studio.test_report_document">
                            <div><p t-field="doc.name"/></div>
                            <span class="test-added-0">in document view</span>
                            <p><br/></p>
                        </t>`)
                );
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_error_at_loading", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "body:not(:has(.o_error_dialog)) .o-web-studio-report-editor",
        },
        {
            trigger: "iframe div",
            run() {
                assertEqual(
                    this.$anchor[0].textContent,
                    "The report could not be rendered due to an error"
                );
            },
        },
        {
            trigger: "button[name='report_edit_sources']",
        },
        {
            trigger: ".o_web_studio_xml_editor",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_error_at_loading_debug", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "body:not(:has(.o_error_dialog)) .o-web-studio-report-editor",
        },
        {
            trigger: ".o-web-studio-report-container:not(:has(iframe))",
        },
        {
            trigger: ".o-web-studio-report-container strong:contains(builtins.ValueError)",
        },
        {
            trigger: "button[name='report_edit_sources']",
        },
        {
            trigger: ".o_web_studio_xml_editor",
        },
        {
            trigger: ".o-web-studio-report-container:not(:has(iframe))",
        },
        {
            trigger:
                ".o-web-studio-report-container strong:contains(odoo.addons.base.models.ir_qweb.QWebException)",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_xml_and_form_diff", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: ".o-web-studio-report-editor-wysiwyg iframe .odoo-editor-editable p:eq(2)",
            run() {
                insertText(this.$anchor[0], "edited with odooEditor");
            },
        },
        {
            trigger: "button[name='report_edit_sources']",
        },
        {
            trigger:
                ".o_web_studio_xml_resource_select_menu button.o_select_menu_toggler .o_select_menu_toggler_slot",
            run() {
                const currentViewKey = this.$anchor[0].textContent.split(" (")[0];
                assertEqual(
                    currentViewKey,
                    "web_studio.report_editor_customization_full.view._web_studio.test_report_document"
                );
            },
        },
        {
            trigger: ".o_web_studio_xml_resource_select_menu button.o_select_menu_toggler",
        },
        {
            trigger:
                ".o_web_studio_xml_resource_select_menu .o_select_menu_item_label:contains(web_studio.test_report_document)",
        },
        {
            trigger: "button[name='view_diff']",
        },
        {
            trigger: ".o_form_view table.diff",
            run() {
                assertEqual(
                    document.querySelector(".o_form_view .o_field_widget[name='view_name']")
                        .textContent,
                    "web_studio.test_report_document"
                );
                assertEqual(
                    document.querySelector(
                        ".o_form_view .o_field_widget[name='compare_view_id'] input"
                    ).value,
                    "web_studio_backup__web_studio.test_report_document"
                );
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_record_model_differs_from_action", {
    test: true,
    sequence: 260,
    steps: () => {
        const stepsToAssert = [];

        return [
            {
                trigger: ".o_studio_report_kanban_view",
                run() {
                    const { ReportEditorModel } = odoo.loader.modules.get(
                        "@web_studio/client_action/report_editor/report_editor_model"
                    );

                    patch(ReportEditorModel.prototype, {
                        async loadReportEditor() {
                            await super.loadReportEditor(...arguments);
                            stepsToAssert.push(
                                `report editor loaded. actionModel: "${this._services.studio.editedAction.res_model}". reportModel: "${this.reportResModel}"`
                            );
                        },
                    });
                },
            },
            {
                trigger: ".o_studio_report_kanban_view .o_searchview input",
                run: "text dummy test",
            },
            {
                trigger:
                    ".o_studio_report_kanban_view .o_searchview .o_menu_item:contains(Report):contains(dummy test)",
            },
            {
                trigger: ".o_facet_remove",
            },
            {
                trigger: ".o_kanban_record:contains(dummy test)",
            },
            {
                trigger: ".o-web-studio-report-editor-wysiwyg",
                run() {
                    assertEqual(
                        JSON.stringify(stepsToAssert),
                        JSON.stringify([
                            `report editor loaded. actionModel: "res.partner". reportModel: "x_dummy.test"`,
                        ])
                    );
                },
            },
        ];
    },
});

registry.category("web_tour.tours").add("web_studio.test_remove_branding_on_copy", {
    test: true,
    steps: () => [
        {
            trigger: "body iframe .odoo-editor-editable#wrapwrap",
            async run() {
                const originNode = this.$anchor[0].querySelector(`[ws-view-id]`);
                const copy = originNode.cloneNode(true);
                originNode.insertAdjacentElement("afterend", copy);
                // Wait for a full macrotask tick and a frame to let the mutation observer
                // of the ReportEditorWysiwyg to catch up on the change and finish its operations
                await nextTick();
                const attributeCopy = {};
                for (const attr of copy.attributes) {
                    attributeCopy[attr.name] = attr.value;
                }
                assertEqual(JSON.stringify(attributeCopy), "{}");
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_different_view_document_name", {
    test: true,
    steps: () => [
        {
            trigger: ".o_web_studio_sidebar button[name='report_edit_sources']",
        },
        {
            trigger: ".o_web_studio_xml_resource_selector .o_select_menu_toggler",
        },
        {
            trigger: ".o_web_studio_xml_resource_selector .o-dropdown--menu",
            run() {
                const sources = Array.from(
                    this.$anchor[0].querySelectorAll(".o_select_menu_item")
                ).map((e) => e.textContent);
                assertEqual(
                    sources.includes(
                        "Uses: web_studio.test_report_document (web_studio.test_report_document_1)"
                    ),
                    true
                );
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_edit_main_arch", {
    test: true,
    steps: () => [
        {
            trigger: "iframe .odoo-editor-editable .outside-t-call",
            async run() {
                const newNode = document.createElement("div");
                newNode.classList.add("added");
                const target = this.$anchor[0];
                target.insertAdjacentElement("beforebegin", newNode);
                await nextTick();
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o-web-studio-save-report:not(.btn-primary)",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_edit_in_t_call", {
    test: true,
    steps: () => [
        {
            trigger: "iframe .odoo-editor-editable .in-t-call",
            async run() {
                const newNode = document.createElement("div");
                newNode.classList.add("added");
                const target = this.$anchor[0];
                target.insertAdjacentElement("beforebegin", newNode);
                await nextTick();
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o-web-studio-save-report:not(.btn-primary)",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_edit_main_and_in_t_call", {
    test: true,
    steps: () => [
        {
            trigger: "iframe .odoo-editor-editable#wrapwrap",
            async run() {
                const newNode0 = document.createElement("div");
                newNode0.classList.add("added0");
                const target0 = this.$anchor[0].querySelector(".outside-t-call");
                target0.insertAdjacentElement("beforebegin", newNode0);
                await nextTick();
                const newNode1 = document.createElement("div");
                newNode1.classList.add("added1");
                const target1 = this.$anchor[0].querySelector(".in-t-call");
                target1.insertAdjacentElement("beforebegin", newNode1);
                await nextTick();
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o-web-studio-save-report:not(.btn-primary)",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_image_crop", {
    test: true,
    steps: () => [
        {
            trigger: "body iframe .odoo-editor-editable .myimg",
        },
        {
            trigger: "body .oe-toolbar #image-crop",
        },
        {
            trigger: "body .o-overlay-container .o_we_crop_widget .cropper-container",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_translations_are_copied", {
    test: true,
    steps: () => [
        {
            trigger: "body iframe .odoo-editor-editable#wrapwrap div:contains(term2)",
            run() {
                const newNode = document.createElement("div");
                (newNode.textContent = "term3 from edition"),
                    this.$anchor[0].insertAdjacentElement("beforebegin", newNode);
                return nextTick();
            },
        },
        {
            trigger: ".o-web-studio-save-report.btn-primary",
        },
        {
            trigger: ".o-web-studio-save-report:not(.btn-primary)",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/******************************************************************************
*  Filepath: /web_studio/static/tests/tours/web_studio_test_ui_unit_tours.js  *
*  Lines: 1338                                                                *
******************************************************************************/
odoo.define('@web_studio/../tests/tours/web_studio_test_ui_unit_tours', ['@web/core/registry', '@web_studio/../tests/tours/tour_helpers'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
const { registry } = require("@web/core/registry");
const { stepNotInStudio, assertEqual } = require("@web_studio/../tests/tours/tour_helpers");

registry
    .category("web_tour.tours")
    .add("web_studio_test_form_view_not_altered_by_studio_xml_edition", {
        test: true,
        url: "/web?debug=1",
        sequence: 260,
        steps: () => [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
            },
            {
                trigger: ".o_form_view .o_form_editable",
            },
            {
                trigger: ".o_web_studio_navbar_item button",
            },
            {
                trigger: ".o_web_studio_sidebar .o_web_studio_view",
            },
            {
                trigger: ".o_web_studio_open_xml_editor",
            },
            {
                extra_trigger: ".o_web_studio_code_editor_info",
                trigger: ".o_web_studio_leave",
            },
            stepNotInStudio(".o_form_view .o_form_editable"),
        ],
    });

/* global ace */
registry.category("web_tour.tours").add("web_studio_test_edit_with_xml_editor", {
    test: true,
    url: "/web?debug=1",
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".someDiv",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_view",
        },
        {
            trigger: ".o_web_studio_open_xml_editor",
        },
        {
            extra_trigger: ".o_web_studio_xml_editor",
            trigger: ".o_web_studio_xml_resource_selector .o_select_menu_toggler",
        },
        {
            trigger:
                ".o_web_studio_xml_resource_selector .o-dropdown--menu .o_select_menu_item:contains(Odoo Studio)",
        },
        {
            trigger: ".ace_content",
            run() {
                ace.edit(document.querySelector(".ace_editor")).setValue("<data/>");
            },
        },
        {
            trigger: ".o_web_studio_xml_editor .o_web_studio_xml_resource_selector .btn-primary",
        },
        {
            trigger: ".o_web_studio_snackbar:not(:has(.fa-spin))",
        },
        {
            trigger: ".o_form_view",
            run() {
                if (document.querySelector(".someDiv")) {
                    throw new Error("The edition of the view's arch via the xml editor failed");
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_enter_x2many_edition_and_add_field", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='user_ids']",
        },
        {
            extra_trigger: ".o-web-studio-edit-x2manys-buttons",
            trigger: ".o_web_studio_editX2Many[data-type='form']",
        },
        {
            extra_trigger: ".o_view_controller.o_form_view.test-user-form",
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)",
            run() {
                $(
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)"
                )[0].scrollIntoView();
            },
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_web_studio_hook:eq(1))",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='log_ids']",
            run() {
                const countFields = document.querySelectorAll(
                    ".o_web_studio_form_view_editor .o_field_widget"
                ).length;
                if (!countFields === 2) {
                    throw new Error("There should be 2 fields in the form view");
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_enter_x2many_auto_inlined_subview", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger:
                ".o_web_studio_form_view_editor .o_field_widget[name='user_ids'] .o_field_x2many_list",
        },
        {
            extra_trigger: ".o-web-studio-edit-x2manys-buttons",
            trigger: ".o_web_studio_editX2Many[data-type='list']",
        },
        {
            extra_trigger: ".o_view_controller.o_list_view.test-user-list",
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)",
            run() {
                $(
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)"
                )[0].scrollIntoView();
            },
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)",
            run: "drag_and_drop_native (.o_web_studio_list_view_editor .o_web_studio_hook:eq(1))",
        },
        {
            trigger: ".o_web_studio_list_view_editor th[data-name='log_ids']",
            run() {
                const countFields = document.querySelectorAll(
                    ".o_web_studio_form_view_editor th[data-name]"
                ).length;
                if (!countFields === 2) {
                    throw new Error("There should be 2 fields in the form view");
                }
            },
        },
    ],
});

registry
    .category("web_tour.tours")
    .add("web_studio_enter_x2many_auto_inlined_subview_with_multiple_field_matching", {
        test: true,
        sequence: 260,
        steps: () => [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
            },
            {
                trigger: ".o_form_view .o_form_editable",
            },
            {
                trigger: ".o_web_studio_navbar_item button",
            },
            {
                trigger:
                    ".o_web_studio_form_view_editor .o_field_widget[name='user_ids']:eq(1) .o_field_x2many_list",
            },
            {
                extra_trigger: ".o-web-studio-edit-x2manys-buttons",
                trigger: ".o_web_studio_editX2Many[data-type='list']",
            },
            {
                extra_trigger: ".o_view_controller.o_list_view.test-user-list",
                trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
            },
            {
                extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
                trigger:
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)",
                run() {
                    $(
                        ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)"
                    )[0].scrollIntoView();
                },
            },
            {
                trigger:
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(User log entries)",
                run: "drag_and_drop_native (.o_web_studio_list_view_editor .o_web_studio_hook:eq(1))",
            },
            {
                trigger: ".o_web_studio_list_view_editor th[data-name='log_ids']",
                run() {
                    const countFields = document.querySelectorAll(
                        ".o_web_studio_form_view_editor th[data-name]"
                    ).length;
                    if (!countFields === 2) {
                        throw new Error("There should be 2 fields in the form view");
                    }
                },
            },
        ],
    });

registry.category("web_tour.tours").add(
    "web_studio_boolean_field_drag_and_drop",
    {
        test: true,
        sequence: 260,
        steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
        },
        {
            trigger: ".o_form_view .o_form_editable"
        },
        {
            trigger: ".o_web_studio_navbar_item button"
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_new_fields .o_web_studio_field_boolean",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_web_studio_hook:eq(0))",
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor",
            trigger: ".o_wrap_field_boolean .o_wrap_label",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_web_studio_hook:eq(2))",
        },
        {
            trigger: ".o_wrap_label:eq(1):contains('New CheckBox')",
            run() {}
        },
    ]
});

registry.category("web_tour.tours").add("web_studio_field_with_group", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_list_view",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_list_view_editor th[data-name='function']",
            run() {},
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run() {
                $(
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)"
                )[0].scrollIntoView();
            },
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run: "drag_and_drop_native (.o_web_studio_list_view_editor th.o_web_studio_hook:eq(2))",
        },
        {
            extra_trigger:
                ".o_web_studio_list_view_editor th.o_web_studio_hook:not(.o_web_studio_nearest_hook)",
            trigger: ".o_web_studio_list_view_editor th[data-name='website']",
            run() {
                const countFields = document.querySelectorAll(
                    ".o_web_studio_list_view_editor th[data-name]"
                ).length;
                if (!countFields === 3) {
                    throw new Error("There should be 3 fields in the form view");
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_set_tree_node_conditional_invisibility", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
            extra_trigger: ".o_list_view",
        },
        {
            trigger: ".o_web_studio_list_view_editor th[data-name='title']",
        },
        {
            trigger: ".o_web_studio_sidebar_checkbox:nth-child(1) .o_web_studio_attrs",
        },
        {
            trigger: ".o_model_field_selector_value",
        },
        {
            trigger: ".o_model_field_selector_popover_item_name:contains('Display Name')",
            in_modal: false,
        },
        {
            trigger: ".o_tree_editor_condition input.o_input",
            run: "text Robert",
        },
        {
            trigger: ".modal-footer .btn-primary",
        },
        {
            trigger: ".o_web_studio_list_view_editor th[data-name='title']",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_elements_with_groups_form", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_form_view_editor",
            run() {},
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run() {
                $(
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)"
                )[0].scrollIntoView();
            },
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_inner_group .o_web_studio_hook:eq(1))",
        },
        {
            extra_trigger:
                ".o_web_studio_form_view_editor .o_web_studio_hook:not(.o_web_studio_nearest_hook)",
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='website']",
            allowInvisible: true,
            run() {
                const countFields = document.querySelectorAll(
                    ".o_web_studio_form_view_editor .o_field_widget[name]"
                ).length;
                if (!countFields === 2) {
                    throw new Error("There should be 2 fields in the form view");
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("test_element_group_in_sidebar", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor .o_field_widget[name='display_name']",
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='display_name']",
        },
        {
            trigger: ".o_field_many2many_tags[name='groups_id'] .badge",
            run() {
                const tag = document.querySelector(
                    ".o_field_many2many_tags[name='groups_id'] .badge"
                );
                if (!tag || !tag.textContent.includes("Test Group")) {
                    throw new Error("The groups should be displayed in the sidebar");
                }
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_custom_selection_field_edit_values", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_new_fields .o_web_studio_field_selection",
            run: "drag_and_drop_native (.o_web_studio_hook:eq(0))",
        },
        {
            trigger: ".o_web_studio_add_selection .o-web-studio-interactive-list-item-input",
            run: "text some value",
        },
        {
            trigger: ".modal-footer .btn-primary",
        },
        {
            extra_trigger: "body:not(:has(.modal))",
            trigger: ".o_web_studio_leave",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_wrap_input:has(.o_field_selection)",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_edit_selection_values",
        },
        {
            in_modal: true,
            trigger: ".o_web_studio_add_selection .o-web-studio-interactive-list-item-input",
            run: "text another value cancel",
        },
        {
            trigger: ".o_web_studio_add_selection .o-web-studio-interactive-list-edit-item",
        },
        {
            trigger: ".o_web_studio_selection_editor li:nth-child(2)",
            async run() {
                assertEqual(this.$anchor[0].textContent, "another value cancel");
            },
        },
        {
            trigger: ".modal-footer .btn-secondary",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_edit_selection_values",
        },
        {
            trigger: ".o_web_studio_selection_editor li",
            run() {
                assertEqual(
                    Array.from(this.$anchor)
                        .map((el) => el.textContent)
                        .join(" "),
                    "some value"
                );
            },
        },
        {
            in_modal: true,
            trigger: ".o_web_studio_add_selection .o-web-studio-interactive-list-item-input",
            run: "text another value",
        },
        {
            trigger: ".modal-footer .btn-primary",
        },
        {
            extra_trigger: "body:not(:has(.modal))",
            trigger: ".o_web_studio_leave",
        },
        stepNotInStudio(),
    ],
});

registry.category("web_tour.tours").add("web_studio_test_create_one2many_lines_then_edit_name", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_new_fields .o_web_studio_field_lines",
            run: "drag_and_drop_native (.o_web_studio_hook:eq(0))",
        },
        {
            trigger: ".o_form_label",
            extra_trigger: ".o_field_x2many_list",
            timeout: 20000,
        },
        {
            extra_trigger: ".o_web_studio_sidebar .o_web_studio_properties.active",
            trigger: "input[name='string']",
            run: "text new name",
        },
        {
            trigger: ".o_web_studio_leave",
            timeout: 20000,
        },
        stepNotInStudio(".o_form_view"),
    ],
});

registry.category("web_tour.tours").add("web_studio_test_address_view_id_no_edit", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_address_format",
            run: function () {
                if (
                    this.$anchor.find("[name=lang]").length ||
                    !this.$anchor.find("[name=street]").length
                ) {
                    throw new Error(
                        "The address view id set on the company country should be displayed"
                    );
                }
            },
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            extra_trigger: ".o_web_studio_view_renderer",
            trigger: ".o_address_format",
            run: function () {
                if (
                    this.$anchor.find("[name=street]").length ||
                    !this.$anchor.find("[name=lang]").length
                ) {
                    throw new Error(
                        "The address view id set on the company country shouldn't be editable"
                    );
                }
            },
        },
        {
            trigger: ".o_web_studio_leave",
        },
        stepNotInStudio(".o_form_view"),
    ],
});

registry.category("web_tour.tours").add("web_studio_test_create_new_model_from_existing_view", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_kanban_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_create_new_model",
        },
        {
            extra_trigger: ".modal-dialog",
            trigger: "input[name='model_name']",
            run: "text new model",
        },
        {
            trigger: ".confirm_button",
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            trigger: ".o_form_view",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_test_create_model_with_clickable_stages", {
    test: true,
    sequence: 260,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_create_new_model",
        },
        {
            extra_trigger: ".modal-dialog",
            trigger: "input[name='model_name']",
            run: "text new model",
        },
        {
            trigger: ".confirm_button",
        },
        {
            trigger: "#use_stages",
        },
        {
            trigger: ".o_web_studio_model_configurator_next",
        },
        {
            trigger: ".o_web_studio_leave",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: "input#x_name_0",
            run: "text new record",
        },
        {
            trigger: ".o_arrow_button:contains(In Progress)",
        },
        {
            extra_trigger: ".o_arrow_button_current:contains(In Progress)",
            trigger: ".o_form_button_save",
        },
        {
            trigger: ".o_back_button",
        },
        {
            trigger:
                ".o_kanban_group:contains(In Progress) .o_kanban_record_details:contains(new record)",
            isCheck: true,
        },
    ],
});

registry
    .category("web_tour.tours")
    .add("web_studio_test_enter_x2many_edition_with_multiple_subviews", {
        test: true,
        sequence: 260,
        steps: () => [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
            },
            {
                extra_trigger: ".o_form_view span:contains('Address Type')",
                trigger: ".o_web_studio_navbar_item button",
            },
            {
                trigger:
                    ".o_web_studio_form_view_editor .o_field_widget[name='child_ids'] .o_field_x2many_list",
                extra_trigger: ".o_list_renderer span:contains('Address Type')",
            },
            {
                extra_trigger: ".o-web-studio-edit-x2manys-buttons",
                trigger: ".o_web_studio_editX2Many[data-type='list']",
            },
            {
                trigger: ".o_content > .o_list_renderer span:contains('Address Type')",
                isCheck: true,
            },
        ],
    });

registry
    .category("web_tour.tours")
    .add("web_studio_test_enter_x2many_edition_with_multiple_subviews_correct_xpath", {
        test: true,
        sequence: 260,
        steps: () => [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
            },
            {
                extra_trigger: ".o_form_view",
                trigger: ".o_web_studio_navbar_item button",
            },
            {
                trigger:
                    ".o_web_studio_form_view_editor .o_field_widget[name='child_ids'] .o_field_x2many_list",
            },
            {
                extra_trigger: ".o-web-studio-edit-x2manys-buttons",
                trigger: ".o_web_studio_editX2Many[data-type='list']",
            },
            {
                extra_trigger: ".o_view_controller.o_list_view.test-subview-list",
                trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
            },
            {
                extra_trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_section",
                trigger: `.o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[data-drop='${JSON.stringify(
                    { fieldName: "active" }
                )}']`,
                run: "drag_and_drop_native (.o_web_studio_hook:eq(0))",
            },
            {
                content: "Check that the active field has been added",
                trigger: ".o_web_studio_view_renderer .o_list_view thead th[data-name='active']",
                isCheck: true,
            },
        ],
    });

registry.category("web_tour.tours").add("web_studio_test_studio_view_is_last", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run() {
                $(
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)"
                )[0].scrollIntoView();
            },
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_inner_group .o_web_studio_hook:last)",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='website']",
            allowInvisible: true,
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_test_edit_form_subview_attributes", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger:
                ".o_web_studio_form_view_editor .o_field_widget[name='child_ids'] .o_field_x2many_list",
        },
        {
            extra_trigger: ".o-web-studio-edit-x2manys-buttons",
            trigger: ".o_web_studio_editX2Many[data-type='form']",
        },
        {
            extra_trigger: ".o_view_controller.o_form_view.test-subview-form",
            trigger: ".o_web_studio_sidebar.o_notebook .nav-link:contains(View)",
        },
        {
            trigger: ".o_web_studio_sidebar input[name='create']:checked",
        },
        {
            trigger: ".o_web_studio_sidebar input[name='create']:not(:checked)",
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_x2many_two_levels_edition", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='user_ids']",
        },
        {
            extra_trigger: ".o-web-studio-edit-x2manys-buttons",
            trigger: ".o_web_studio_editX2Many[data-type='form']",
        },
        {
            extra_trigger: ".o_view_controller.o_form_view.test-subview-form-1",
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='log_ids']",
        },
        {
            trigger: ".o_web_studio_editX2Many[data-type='form']",
        },
        {
            trigger: ".o_view_controller.o_form_view.test-subview-form-2",
            run() {},
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
        },
        {
            extra_trigger: ".o_web_studio_existing_fields",
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Created on)",
            run: "drag_and_drop_native .o_web_studio_hook",
        },
        {
            trigger: ".o_web_studio_form_view_editor [data-field-name='create_date']",
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_field_group_studio_no_fetch", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_form_view_editor",
            run() {
                assertEqual(this.$anchor[0].querySelectorAll(".o_field_widget").length, 1);
                assertEqual(
                    this.$anchor[0].querySelectorAll(".o_field_widget")[0].dataset.studioXpath,
                    "/form[1]/field[2]"
                );
            },
        },
        {
            trigger: ".o_web_studio_views_icons a[title='List']",
        },
        {
            trigger: ".o_web_studio_list_view_editor",
            run() {
                assertEqual(
                    this.$anchor[0].querySelectorAll("th:not(.o_web_studio_hook)").length,
                    1
                );
                assertEqual(
                    this.$anchor[0].querySelectorAll("th:not(.o_web_studio_hook)")[0].dataset
                        .studioXpath,
                    "/tree[1]/field[2]"
                );
            },
        },
        {
            trigger: ".o_web_studio_views_icons a[title='Kanban']",
        },
        {
            trigger: ".o_web_studio_kanban_view_editor",
            run() {
                assertEqual(
                    this.$anchor[0].querySelectorAll(
                        ".o_kanban_record:not(.o_kanban_demo):not(.o_kanban_ghost) [data-field-name]"
                    ).length,
                    1
                );
                assertEqual(
                    this.$anchor[0]
                        .querySelectorAll(
                            ".o_kanban_record:not(.o_kanban_demo):not(.o_kanban_ghost) [data-field-name]"
                        )[0]
                        .getAttribute("studioxpath"),
                    "/kanban[1]/t[1]/field[2]"
                );
            },
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_test_move_similar_field", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor",
            trigger: ".o_notebook_headers a:contains('two')",
        },
        {
            trigger: ".tab-pane.active [data-field-name=display_name]",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_web_studio_hook:eq(1))",
        },
        {
            trigger: ".o_web_studio_leave",
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_test_related_file", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_user_menu']",
        },
        {
            content: "second",
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor",
            trigger: ".o_web_studio_field_related",
            run: "drag_and_drop_native (.o_inner_group)",
        },
        {
            extra_trigger: ".modal-dialog",
            trigger: ".o_model_field_selector_value",
        },
        {
            in_modal: false,
            extra_trigger: ".o_model_field_selector_popover",
            trigger: ".o_model_field_selector_popover_search input",
            run: "text Related Partner",
        },
        {
            in_modal: false,
            trigger: "[data-name=partner_id] > button.o_model_field_selector_popover_item_relation",
        },
        {
            in_modal: false,
            trigger: ".o_model_field_selector_popover_search input",
            run: "text New File",
        },
        {
            in_modal: false,
            trigger:
                ".o_model_field_selector_popover_item_name:contains(New File):not(:contains(filename))",
        },
        {
            trigger: ".modal-footer .btn-primary:first",
        },
        {
            trigger: ".o_web_studio_leave",
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_test_undo_new_field", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_new_fields .o_web_studio_field_integer",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_web_studio_hook:eq(1))",
        },
        {
            trigger: "button.o_web_studio_undo.o_web_studio_active",
        },
        {
            trigger: ".o_web_studio_leave",
            isCheck: true,
        }
    ]
});

registry.category("web_tour.tours").add("web_studio_test_change_lone_attr_modifier_form", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor",
            trigger: ".o_field_widget[name='name']",
        },
        {
            extra_trigger: `.o_web_studio_sidebar input[name="required"]`,
            trigger: '.o_web_studio_sidebar',
            run() {
                const required = this.$anchor[0].querySelector(`input[name="required"]`);
                assertEqual(required.checked, true);
            }
        },
        {
            trigger: '.o_web_studio_sidebar input[name="required"]',
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor:not(:has(.o_required_modifier))",
            trigger: '.o_web_studio_sidebar',
            run() {
                const required = this.$anchor[0].querySelector(`input[name="required"]`);
                assertEqual(required.checked, false);
            }
        }
    ]
});

registry.category("web_tour.tours").add("web_studio_test_new_field_rename_description", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor",
            trigger: ".o_web_studio_sidebar .o_web_studio_component.o_web_studio_field_char",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_web_studio_hook:eq(1))"
        },
        {
            trigger: ".o_web_studio_sidebar input[name='string']",
            run: "text my new field",
        },
        {
            trigger: ".o_web_studio_form_view_editor label[for='x_studio_my_new_field_0']:contains(my new field)",
            isCheck: true,
        }
    ]
});

registry
    .category("web_tour.tours")
    .add("web_studio_test_edit_digits_option", {
        test: true,
        url: "/web",
        sequence: 260,
        steps: () => [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
            },
            {
                trigger: ".o_form_view .o_form_editable",
            },

            {
                trigger: ".o_web_studio_navbar_item button",
            },
            {
                extra_trigger: ".o_web_studio_view_renderer",
                trigger: "[name=partner_latitude]",
            },
            {
                trigger: "input#digits",
                run: "text 2",
            },
            {
                trigger: ".o_web_studio_leave",
                isCheck: true,
            },
        ],
    });

    registry.category("web_tour.tours").add("web_studio_no_fetch_subview", {
        test: true,
        steps: () => [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
            },
            {
                trigger: "input#name_0",
                run: "text value"
            },
            {
                trigger: "button.o_form_button_save",
            },
            {
                extra_trigger: ".o_form_view",
                trigger: ".o_web_studio_navbar_item button",
            },
            {
                trigger: ".o_web_studio_sidebar .o_web_studio_new_fields .o_web_studio_field_many2many",
                run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_web_studio_hook:eq(0))",
            },
            {
                trigger: ".o_record_selector input",
                run: "text Contact",
            },
            {
                trigger:"a.dropdown-item:contains(Contact)",
            },
            {
                trigger: ".modal-footer button.btn-primary",
            },
            {
                trigger:".o_wrap_field label:contains('New Many2Many')",
                isCheck: true,
            }
        ],
    });

registry.category("web_tour.tours").add("web_studio.test_button_rainbow_effect", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        {
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: `.o_web_studio_view_renderer button[name="open_commercial_entity"]`,
        },
        {
            trigger: ".o_web_studio_sidebar #effect",
        },
        {
            extra_trigger: ".o_web_studio_sidebar #rainbow_message",
            trigger: ".o_web_studio_sidebar",
            run() {
                const blob = new Blob(
                    [
                        "iVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAAF0lEQVR4nGJxKFrEwMDAxAAGgAAAAP//D+IBWx9K7TUAAAAASUVORK5CYII=",
                    ],
                    { type: "image/png" }
                );
                const file = new File([blob], "my_studio_image.png");

                const fileInput = document.querySelector(
                    ".o_web_studio_sidebar .o_file_input input"
                );
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                fileInput.files = dataTransfer.files;
                fileInput.dispatchEvent(new Event("change"));
            },
        },
        {
            trigger: ".o_web_studio_sidebar img[src^='/web/content']",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("web_studio.test_res_users_fake_fields", {
    test: true,
    steps: () => [
        {
            trigger: ".o_web_studio_existing_fields_header"
        },
        {
            trigger: ".o_web_studio_existing_fields",
            run() {
                const elements = [...document.querySelectorAll(".o_web_studio_component")];
                const fieldStrings = elements.map(el => el.innerText.split("\n")[0]);
                assertEqual(fieldStrings.includes("Administration"), false);
                assertEqual(fieldStrings.includes("Multi Companies"), false);
            }
        }
    ]
});

registry.category("web_tour.tours").add("web_studio_test_reload_after_restoring_default_view", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='name']",
        },
        {
            trigger: ".o_web_studio_sidebar input[name='string']",
            run: "text new name",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_view",
        },
        {
            trigger: ".o_web_studio_restore"
        },
        {
            trigger: ".modal-footer .btn-primary",
        },
        {
            extra_trigger: ".o_web_studio_undo:not(.o_web_studio_active)",
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='name'] span:contains('Name')",
            isCheck: true,
        },
    ]
});

registry.category("web_tour.tours").add("web_studio_test_edit_reified_field", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item button",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name^='sel_groups_'],.o_web_studio_form_view_editor .o_field_widget[name^='in_groups_']",
        },
        {
            trigger: ".o_web_studio_sidebar input[name='string']",
            run: "text new name",
        },
        {
            trigger: ".o_web_studio_leave",
            isCheck: true,
        },
    ]
});

registry.category("web_tour.tours").add("web_studio_test_approval_button_xml_id", {
    test: true,
    steps: () => [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
            run: "click",
        },
        {
            trigger: ".o_form_view",
            run() {},
        },
        {
            trigger: ".o_web_studio_navbar_item button:enabled",
            run: "click",
        },
        {
            trigger: ".o_web_studio_form_view_editor button[name='base.action_model_data']",
            run: "click",
        },
        {
            trigger: ".o_web_studio_sidebar #studio_approval",
            run: "click",
        },
        {
            trigger: ".o_web_studio_view_renderer .o_web_studio_approval_avatar",
            run() {},
        },
        {
            trigger: ".o_web_studio_sidebar .o_approval_group #group_id",
            run() {},
        },
    ],
});

return __exports;
});
;

/*********************************************************
*  Filepath: /hr/static/tests/tours/hr_employee_flow.js  *
*  Lines: 36                                             *
*********************************************************/
odoo.define('@hr/../tests/tours/hr_employee_flow', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('hr_employee_tour', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(),
    {
        content: "Open Employees app",
        trigger: ".o_app[data-menu-xmlid='hr.menu_hr_root']",
        run: 'click',
    },
    {
        content: "Open an Employee Profile",
        trigger: ".o_kanban_record_title:contains('Johnny H.')",
        run: 'click',
    },
    {
        content: "Open user account menu",
        trigger: ".o_user_menu .dropdown-toggle",
        run: 'click',
    }, {
        content: "Open My Profile",
        trigger: "[data-menu=settings]",
        run: 'click',
    },
]});

return __exports;
});
;

/*********************************************************************
*  Filepath: /hr/static/tests/tours/user_modify_own_profile_tour.js  *
*  Lines: 37                                                         *
*********************************************************************/
odoo.define('@hr/../tests/tours/user_modify_own_profile_tour', ['@web_tour/tour_service/tour_utils', '@web/core/registry', '@web/core/utils/patch'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { stepUtils } = require("@web_tour/tour_service/tour_utils");
const { registry } = require("@web/core/registry");
const { patch } = require("@web/core/utils/patch");

/**
 * As 'hr' changes the flow a bit and displays the user preferences form in a full view instead of
 * a modal, we adapt the steps of the original tour accordingly.
 */
patch(registry.category("web_tour.tours").get("mail/static/tests/tours/user_modify_own_profile_tour.js"), {
    steps() {
        return [
            {
                content: 'Open user account menu',
                trigger: '.o_user_menu button',
            }, 
            {
                content: "Open preferences / profile screen",
                trigger: '[data-menu=settings]',
            }, 
            {
                content: "Update the email address",
                trigger: 'div[name="email"] input',
                run: 'text updatedemail@example.com',
            }, 
            ...stepUtils.saveForm(),
        ];
    }
});


return __exports;
});
;

/***************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_article_command_tour.js  *
*  Lines: 60                                                                           *
***************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_article_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { appendArticleLink, endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add('knowledge_article_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, ...appendArticleLink('[name="body"]', "EditorCommandsArticle"),
{ // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_article:contains("EditorCommandsArticle")',
    run: 'click',
}, { // check that the view switched to the corresponding article while keeping the breadcrumbs history
    trigger: '.o_knowledge_header:has(.o_breadcrumb_article_name_container:contains("EditorCommandsArticle")):has(.breadcrumb-item > a:contains("EditorCommandsArticle"))'
}, ...endKnowledgeTour()
]});

const composeBody = '.modal-dialog:contains(Compose Email) [name="body"]';
registry.category("web_tour.tours").add('knowledge_article_command_dialog_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the chatter
    trigger: '.btn-chatter',
}, { // open the message editor
    trigger: '.o-mail-Chatter-sendMessage:not([disabled=""])',
}, { // open the full composer
    trigger: "button[aria-label='Full composer']",
}, ...appendArticleLink(`${composeBody}`, 'EditorCommandsArticle'), { // wait for the block to appear in the editor
    trigger: `${composeBody} .o_knowledge_behavior_type_article:contains("EditorCommandsArticle")`,
    run: () => {},
}, ...appendArticleLink(`${composeBody}`, 'LinkedArticle', 1), { // wait for the block to appear in the editor, after the previous one
    trigger: `${composeBody} .odoo-editor-editable > p > a:nth-child(2).o_knowledge_behavior_type_article:contains("LinkedArticle")[contenteditable="false"]`,
    run: () => {},
}, { // verify that the first block is still there and contenteditable=false
    trigger: `${composeBody} .odoo-editor-editable > p > a:nth-child(1).o_knowledge_behavior_type_article:contains("EditorCommandsArticle")[contenteditable="false"]`,
    run: () => {},
}, { // send the message
    trigger: '.o_mail_send',
}, {
    trigger: '.o_widget_knowledge_chatter_panel .o-mail-Thread .o-mail-Message-body > p > a:nth-child(1).o_knowledge_behavior_type_article:contains("EditorCommandsArticle")',
    run: () => {},
}, {
    trigger: '.o_widget_knowledge_chatter_panel .o-mail-Thread .o-mail-Message-body > p > a:nth-child(2).o_knowledge_behavior_type_article:contains("LinkedArticle")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/****************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_calendar_command_tour.js  *
*  Lines: 396                                                                           *
****************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_calendar_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function clickDate(el) {
    const rect = el.getBoundingClientRect();
    const eventParams = {
        bubbles: true,
        clientX: rect.left + 1,
        clientY: rect.top + 1,
    };
    el.dispatchEvent(new MouseEvent('mousedown', eventParams));
    el.dispatchEvent(new MouseEvent('mouseup', eventParams));
}

function dragDate(el, target) {
    // Cannot use drag_and_drop because it uses the center of the elements
    const elRect = el.getBoundingClientRect();
    el.dispatchEvent(new MouseEvent('mousedown', {
        bubbles: true,
        clientX: elRect.left + 1,
        clientY: elRect.top + 1,
    }));
    const targetRect = target.getBoundingClientRect();
    target.dispatchEvent(new MouseEvent('mousemove', {
        bubbles: true,
        clientX: targetRect.left + 1,
        clientY: targetRect.top + 1,
    }));
    target.dispatchEvent(new MouseEvent('mouseup', {
        bubbles: true,
        clientX: targetRect.left + 1,
        clientY: targetRect.top + 1,
    }));
}

registry.category("web_tour.tours").add('knowledge_calendar_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { 
    //-----------------------------------------------
    // Insert a new item calendar view in the article
    //-----------------------------------------------
    
    // Open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // Click on the /calendar command
    trigger: '.oe-powerbox-commandName:contains("Calendar")',
    run: 'click',
}, { // As the article does not have properties definitions, it should create default ones
    trigger: '.modal-footer .btn-primary',
}, { // Scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: () => {},
}, { 
    //---------------------------------------------------
    // Create an article item by clicking in the calendar
    //---------------------------------------------------

    // Click on a date
    trigger: 'tr[data-time="08:00:00"] td.fc-widget-content:not(.fc-time)',
    extra_trigger: '.o_knowledge_behavior_type_embedded_view .o_knowledge_article_view_calendar_embedded_view',
    run: function () {
        clickDate(this.$anchor[0]);
    },
}, {
    // Check we created an item with the right datetime used as property
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Start Date")',
    extra_trigger: '.o_breadcrumb_article_name_container span:empty',
    run: function () {
        const input = this.$anchor.find("input")[0];
        if (!input.value.includes("08:00:00")) {
            throw new Error('Item was not created with the correct property value');
        }
    },
}, { // Set the name of the item
    trigger: '.o_knowledge_editor .odoo-editor-editable h1',
    run: 'text Item Article',
}, { // Go back to parent article
    trigger: '.o_knowledge_tree .o_article_name:contains("EditorCommandsArticle")',
    run: 'click',
}, { // Check that the item is shown in the calendar
    trigger: '.fc-time-grid-event .o_event_title:contains("Item Article")',
    run: () => {},
}, {
    //--------------------------------------------------------------
    // Insert another item calendar view (to test advanced settings)
    // and create new start and stop properties to use by the view
    //--------------------------------------------------------------

    // Remove previous item calendar view
    trigger: '.odoo-editor-editable',
    run: function () {
        this.$anchor.data('wysiwyg').odooEditor.resetContent();
    },
}, {
    // Click on the "Create Item Calednar" helper
    trigger: '.o_knowledge_helper .o_knowledge_add_item_calendar',
    extra_trigger: '.odoo-editor-editable:not(:has(.o_knowledge_behavior_type_embedded_view))',
    run: 'click',
}, { // Open the start date dropdown
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu_toggler',
    run: 'click',
}, { // Create a new start property
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu input',
    run: 'text Start Property'
}, {
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu .o_select_menu_item.o_create_datetime',
    run: 'click',
}, { // Open the stop dropwdown
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu_toggler',
    run: 'click',
}, { // Create a new stop property
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu input',
    run: 'text Stop Property'
}, {
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu .o_select_menu_item.o_create_choice',
    run: 'click',
}, { // Insert the calendar
    trigger: '.modal-footer .btn-primary',
    run: 'click',
}, {
    //---------------------------------------------------
    // Create an article item by clicking in the calendar
    //---------------------------------------------------

    // Click on a date
    trigger: 'tr[data-time="08:00:00"] td.fc-widget-content:not(.fc-time)',
    extra_trigger: '.o_knowledge_behavior_type_embedded_view .o_knowledge_article_view_calendar_embedded_view',
    run: function () {
        clickDate(this.$anchor[0]);
    },
}, {
    // Check we created an item with the right datetime used as property
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Start Property")',
    extra_trigger: '.o_breadcrumb_article_name_container span:empty',
    run: function () {
        const input = this.$anchor.find("input")[0];
        if (!input.value.includes("08:00:00")) {
            throw new Error('Item was not created with the correct property value');
        }
    },
}, { 
    //-----------------------------------------------------------------------
    // Create new properties from the article view that will be used later in
    // this tour
    //-----------------------------------------------------------------------

    // Create a new date property
    trigger: '.o_knowledge_properties_field .o_field_property_add button',
    run: 'click',
}, {
    trigger: '.o_field_property_definition_header',
    run: 'text Date Property',
}, {
    trigger: '.o_field_property_definition_type button.dropdown-toggle',
    run: 'click',
}, {
    trigger: '.o_field_property_definition_type .dropdown-menu .dropdown-item:contains("Date"):not(:contains("Time"))',
    run: 'click',
}, {
    trigger: '.o_knowledge_editor .odoo-editor-editable',
    run: 'click',
}, { // Create a new checkbox property
    trigger: '.o_knowledge_properties_field .o_field_property_add button',
    run: 'click',
}, {
    trigger: '.o_field_property_definition_header',
    run: 'text Boolean Property',
}, {
    trigger: '.o_field_property_definition_type button.dropdown-toggle',
    run: 'click',
}, {
    trigger: '.o_field_property_definition_type .dropdown-menu .dropdown-item:contains("Checkbox")',
    run: 'click',
}, {
    trigger: '.o_knowledge_editor .odoo-editor-editable',
    run: 'click',
}, { // Create a text property
    trigger: '.o_knowledge_properties_field .o_field_property_add button',
    run: 'click',
}, {
    trigger: '.o_field_property_definition_header',
    run: 'text Text Property',
}, {
    trigger: '.o_field_property_definition_type button.dropdown-toggle',
    run: 'click',
}, {
    trigger: '.o_field_property_definition_type .dropdown-menu .dropdown-item:contains("Text")',
    run: 'click',
}, {
    trigger: '.o_knowledge_editor .odoo-editor-editable',
    run: 'click',
}, { // Set the text property
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Text Property") input',
    run: 'text Custom text',
}, { // Set the name of the item 
    trigger: '.o_knowledge_editor .odoo-editor-editable h1',
    run: 'text Item Article',
}, { // Go back to parent article
    trigger: '.o_knowledge_tree .o_article_name:contains("Article Items")',
    run: 'click',
}, { // Check that the item is shown in the calendar
    trigger: '.fc-time-grid-event .o_event_title:contains("Item Article")',
    run: () => {},
}, {
    //-------------------------------------------------------------------------
    // Test the props editor dialog by changing the values, check that the view
    // is updated accordingly, and set the start and stop dates back to check
    // that the item article is shown again
    //-------------------------------------------------------------------------

    // Open the view props editor
    trigger: '.o_control_panel_breadcrumbs_actions .dropdown-toggle',
    run: 'click',
}, {
    trigger: '.dropdown-item:contains(Edit)'
}, { // Change the start property
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu_toggler',
    run: 'click',
}, {
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu .o_select_menu_item:contains("Date Property")',
    run: 'click',
}, { // Check that stop date has been removed as the start type changed,
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu_toggler_slot span.text-muted',
    run: () => {},
}, { // Open the stop property dropdown
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu_toggler',
    run: 'click',
}, { // Check that one cannot use the selected start date
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu:not(:contains("Date Property"))',
    run: () => {},
}, { // Don't select a stop property
    trigger: '.o_knowledge_item_calendar_props_dialog',
    run: 'click',
}, { // Open the color property dropdown
    trigger: '.o_color .o_select_menu_toggler',
    run: 'click',
}, { // Select the previously created property
    trigger: '.o_color .o_select_menu .o_select_menu_item:contains("Boolean Property")',
    run: 'click',
}, { // Open the scale dropdown
    trigger: '.o_scale .o_select_menu_toggler',
    run: 'click',
}, { // Select the month scale
    trigger: '.o_scale .o_select_menu .o_select_menu_item:contains("Month")',
    run: 'click',
}, { // Save changes
    trigger: '.modal-footer .btn-primary',
    run: 'click',
}, { // Check calendar has been updated (new scale and no item shown)
    trigger: '.o_knowledge_article_view_calendar_embedded_view .o_calendar_header .o_view_scale_selector:contains("Month")',
    extra_trigger: '.fc-view:not(:has(.fc-event-container))',
    run: () => {},
}, { // Change start and stop dates again
    trigger: '.o_control_panel_breadcrumbs_actions .dropdown-toggle',
    run: 'click',
}, {
    trigger: '.dropdown-item:contains(Edit)'
}, { // Change the start property
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu_toggler',
    run: 'click',
}, {
    trigger: '.o_knowledge_item_calendar_dialog_date_start .o_select_menu .o_select_menu_item:contains("Start Property")',
    run: 'click',
}, { // Check that stop date has been removed as the start type changed,
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu_toggler_slot span.text-muted',
    run: () => {},
}, { // Open the stop property dropdown
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu_toggler',
    run: 'click',
}, { // Select the stop date
    trigger: '.o_knowledge_item_calendar_dialog_date_stop .o_select_menu .o_select_menu_item:contains("Stop Property")',
    run: 'click',
}, { // Save changes
    trigger: '.modal-footer .btn-primary',
    run: 'click',
}, { // Open the view
    trigger: '.o_control_panel_breadcrumbs_actions .dropdown-toggle',
    run: 'click',
}, {
    trigger: '.dropdown-item:contains(Open)'
}, { // Check that the item is shown
    trigger: '.fc-view .o_event_title:contains("Item Article")',
    extra_trigger: '.o_knowledge_article_view_calendar_embedded_view.o_action',
    run: () => {},
}, { // Leave the app and come back to make sure that changes have been saved
    trigger: '.o_main_navbar .o_menu_toggle',
}, {
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
    run: 'click',
}, { 
    //----------------------------
    // Move the item and resize it
    //----------------------------

    // Change the scale from the calendar view
    trigger: '.o_knowledge_article_view_calendar_embedded_view .o_calendar_header .o_view_scale_selector button:contains("Month")',
    extra_trigger: '.o_knowledge_behavior_type_embedded_view',
    run: 'click',
}, {
    trigger: '.o_knowledge_article_view_calendar_embedded_view .o_calendar_header .o_scale_button_week',
    run: 'click',
}, { // Move the item in the calendar
    trigger: '.fc-time-grid-event .o_event_title:contains("Item Article")',
    run: function () {
        const target = document.querySelector('tr[data-time="09:00:00"] td.fc-widget-content:not(.fc-time)');
        dragDate(this.$anchor[0], target);
    },
}, { // Make resizer visible
    trigger: '.fc-time-grid-event',
    run: function () {
        const resizer = this.$anchor.find('.fc-end-resizer')[0];
        resizer.style.display = "block";
        resizer.style.width = "100%";
        resizer.style.height = "3px";
        resizer.style.bottom = "0";
        },
}, {
    trigger: '.fc-time-grid-event:contains("Item Article") .fc-end-resizer',
    run: function () {
        const target = document.querySelector('tr[data-time="11:00:00"] td.fc-widget-content:not(.fc-time)');
        dragDate(this.$anchor[0], target);
    },
}, { 
    //----------------------------------------------------------------------
    // Check that the date properties have been updated correclty after that
    // the item has been moved in the item calendar view, and that the text
    // property has not been changed
    //----------------------------------------------------------------------

    // Open the item
    trigger: '.fc-time-grid-event',
    run: 'dblclick',
}, { // Check that the properties have been updated
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Start Property")',
    extra_trigger: '.o_breadcrumb_article_name_container:contains("Item Article")',
    run: function () {
        const input = this.$anchor.find("input")[0];
        if (!input.value.includes("09:00:00")) {
            throw new Error('Item start date property has not been updated');
        }
    },
}, {
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Stop Property")',
    run: function () {
        const input = this.$anchor.find("input")[0];
        // When resizing an event, the event spans the hovered row, so we need to add 15 minutes
        if (!input.value.includes("11:15:00")) {
            throw new Error('Item stop date property has not been updated');
        }
    },
}, { // Check text property did not change
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Text Property")',
    run: function () {
        const input = this.$anchor.find("input")[0];
        if (!input.value.includes("Custom text")) {
            throw new Error('Item text property has changed');
        }
    },
}, {
    //---------------------------------------------------------------------
    // Remove start property to test the behavior of the item calendar view
    // when the required props are missing
    //---------------------------------------------------------------------

    // Click on edit property button
    trigger: '.o_knowledge_properties_field .o_property_field:contains("Start Property") .o_field_property_open_popover',
    run: 'click',
}, { // Delete start date property
    trigger: '.o_field_property_definition .o_field_property_definition_delete',
    run: 'click',
}, { // Confirm deletion
    trigger: '.modal-dialog .btn-primary',
    run: 'click',
}, { // Go back to parent article
    trigger: '.o_knowledge_tree .o_article_name:contains("Article Items")',
    run: 'click',
}, { // Make sure view is not crashed and shows nocontent helper
    trigger: '.o_knowledge_article_view_calendar_embedded_view .o_knowledge_item_calendar_nocontent',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_file_command_tour.js  *
*  Lines: 62                                                                        *
************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_file_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add('knowledge_file_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /file command
    trigger: '.oe-powerbox-commandName:contains("File")',
    run: 'click',
}, { // wait for the media dialog to open
    trigger: '.o_select_media_dialog',
}, { // click on the first item of the modal
    trigger: '.o_existing_attachment_cell:contains(Onboarding)',
    run: 'click'
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_file a.o_image',
    run: 'click',
}, {
    trigger: '.o-FileViewer-headerButton[aria-label="Close"]',
    extra_trigger: 'iframe.o-FileViewer-view body:contains(Content)',
    run: 'click',
}, {
    trigger: '.o_knowledge_file_name_container:contains(Onboarding)',
    run: function() {
        this.$anchor[0].dispatchEvent(new Event('focus'));
    }
}, {
    trigger: 'input[placeholder="Onboarding.txt"]',
    run: function (helpers) {
        helpers.text("Renamed");
        this.$anchor[0].dispatchEvent(new Event('blur'));
    }
}, {
    trigger: 'span.o_knowledge_file_name',
    run: function() {
        // specifically test that there is no zeroWidthSpace character in the
        // name that would be added by the editor
        const currentName = this.$anchor[0].textContent;
        if (currentName !== "Renamed") {
            throw new Error(`The new file name was expected to be: "Renamed", but the actual value is: "${currentName}"`);
        }
    },
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_index_command_tour.js  *
*  Lines: 37                                                                         *
*************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_index_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add('knowledge_index_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /index command
    trigger: '.oe-powerbox-commandName:contains("Index")',
    run: 'click',
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_articles_structure',
}, { // click on the refresh button
    trigger: '.o_knowledge_behavior_type_articles_structure button[title="Update"]',
    run: 'click',
}, { // click on the switch mode button
    trigger: '.o_knowledge_behavior_type_articles_structure button[title="Switch Mode"]',
    run: 'click',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/**************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_kanban_command_tour.js  *
*  Lines: 252                                                                         *
**************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_kanban_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils', '@web_editor/js/editor/odoo-editor/src/utils/utils', '@odoo/owl'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
const { setSelection } = require('@web_editor/js/editor/odoo-editor/src/utils/utils');
const { markup } = require("@odoo/owl");

registry.category("web_tour.tours").add('knowledge_kanban_cards_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /kanban command
    trigger: '.oe-powerbox-commandName:contains("Item Cards")',
    run: 'click',
}, { // choose a name for the embedded view
    trigger: '.modal-footer button.btn-primary',
    run: 'click',
},
...commonKanbanSteps(),
{ // create an article item
    trigger: '.o_knowledge_behavior_type_embedded_view .o-kanban-button-new',
    run: 'click',
}, { // verify that the view switched to the article item
    trigger: '.o_knowledge_header:has(input[id="name"]:placeholder-shown):has(.breadcrumb-item > a:contains("EditorCommandsArticle"))',
    run: () => {},
}, ...endKnowledgeTour()
]});

registry.category("web_tour.tours").add('knowledge_kanban_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /kanban command
    trigger: '.oe-powerbox-commandName:contains("Item Kanban")',
    run: 'click',
}, { // choose a name for the embedded view
    trigger: '.modal-footer button.btn-primary',
    run: 'click',
},
...commonKanbanSteps(),
{ // Check that the stages are well created
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_group .o_kanban_header_title:contains("Ongoing")',
    run: () => {},
}, { // create an article item from Main New button
    trigger: '.o_knowledge_behavior_type_embedded_view .o-kanban-button-new',
    run: 'click',
}, { // Type a Title for new article in the quick create form
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_quick_create .o_input',
    run: 'text New Quick Create Item',
}, { // Add a random icon to the new article in the quick create form
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_quick_create a[title="Add a random icon"]',
    run: 'click',
}, { // Click on the icon to open the emoji picker and select another icon in the quick create form
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_quick_create .o_article_emoji',
    run: 'click',
}, { // Select an emoji for the new article
    trigger: '.o-Emoji[data-codepoints="🙃"]',
    run: 'click',
}, { // Click on Add to create the article
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_quick_create .o_kanban_add',
    run: 'click'
}, { // Verify that the article has been properly created
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_record_title span:contains("New Quick Create Item")',
    extra_trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_record_title .o_article_emoji:contains("🙃")',
    run: () => {},
}, { // Click on the icon of the created article to open the emoji picker
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_record_title .o_article_emoji',
    run: 'click',
}, { // Select another emoji for the created article
    trigger: '.o-Emoji[data-codepoints="🤩"]',
    run: 'click',
}, { // Create a new article using quick create in OnGoing Column
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_group .o_kanban_header_title:contains("Ongoing") .o_kanban_quick_add',
    run: 'click'
}, { // Type a Title for new article in the quick create form
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_group:has(.o_kanban_header_title:contains("Ongoing")) .o_kanban_quick_create .o_input',
    run: 'text Quick Create Ongoing Item',
}, { // Click on Edit to open the article in edition in his own form view
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer .o_kanban_quick_create .o_kanban_edit',
    run: 'click'
}, { // verify that the view switched to the article item
    trigger: '.o_knowledge_header .o_breadcrumb_article_name_container:contains("Quick Create Ongoing Item")',
    run: () => {},
}, ...endKnowledgeTour()
]});

registry.category("web_tour.tours").add('knowledge_item_kanban_custom_act_window', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // manually insert view from act_window object
    trigger: '.odoo-editor-editable > p',
    run: function () {
        const wysiwyg = $(this.$anchor[0].closest('.odoo-editor-editable')).data('wysiwyg');
        const context = articleItemsKanbanActionContext(wysiwyg);
        const restoreSelection = () => {
            return setSelection(this.$anchor[0]);
        }
        wysiwyg._insertEmbeddedView(undefined, articleItemsKanbanAction, "kanban", articleItemsKanbanAction.name, restoreSelection, context);
    },
},
...commonKanbanSteps(),
...domHelpFieldSteps(),
...endKnowledgeTour()
]});

function commonKanbanSteps () {
    return [
        { // scroll to the embedded view to load it
            trigger: '.o_knowledge_behavior_type_embedded_view',
            run: function () {
                this.$anchor[0].scrollIntoView();
            },
        }, { // wait for the kanban view to be mounted
            trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
            run: () => {},
        },
    ];
}

function domHelpFieldSteps () {
    return [
        {
            trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
            run: () => {
                const helpField = document.querySelector('.o_knowledge_content[data-prop-name="action_help"]');
                if (!helpField) {
                    throw new Error('Help field was not rendered in the DOM');
                }
                // allow further modifications of the help field for testing
                helpField.classList.remove('d-none');
            },
        }, { // modify the help message in the dom
            trigger: '.o_knowledge_content[data-prop-name="action_help"] > p',
            run: function () {
                this.$anchor[0].textContent = "Test help message";
            }
        }, { // create an article to switch to
            trigger: '.o_section_header:contains(Workspace) .o_section_create',
            run: 'click'
        }, { // check that the article is correctly created
            trigger: '.odoo-editor-editable > h1',
            run: () => {},
        }, { // switch back to the first article
            trigger: '.o_knowledge_tree .o_article_name:contains("EditorCommandsArticle")',
            run: 'click',
        }, { // scroll to load
            trigger: '.o_knowledge_behavior_type_embedded_view',
            run: function () {
                this.$anchor[0].scrollIntoView();
            }
        }, { // wait for the kanban view to be mounted
            trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
            run: () => {}
        }, { // open the view
            trigger: '.o_control_panel_breadcrumbs_actions .dropdown-toggle',
            run: 'click',
        }, {
            trigger: '.dropdown-item:contains(Open)'
        }, { // verify that the help message is displayed
            trigger: '.o_action_manager > .o_view_controller.o_kanban_view .o_nocontent_help:contains("Test help message")',
            run: () => {}
        }, { // go back to the first view
            trigger: '.breadcrumb a:contains("EditorCommandsArticle")',
            run: 'click',
        }, { // scroll to the embedded view to load it
            trigger: '.o_knowledge_behavior_type_embedded_view',
            run: function () {
                this.$anchor[0].scrollIntoView();
            },
        }, { // wait for the kanban view to be mounted
            trigger: '.odoo-editor-editable',
            extra_trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
            run: function () {
                const helpField = document.querySelector('.o_knowledge_content[data-prop-name="action_help"]');
                if (!helpField) {
                    throw new Error('Help field was not rendered in the DOM');
                }
                // focus the body otherwise change will not be saved
                this.$anchor[0].focus();
                // remove the help field from the dom for testing
                helpField.remove();
            },
        }, { // switch back to the first article
            trigger: '.o_knowledge_tree .o_article_name:contains("Untitled")',
            run: 'click',
        }, { // check that the article is loaded
            trigger: '.odoo-editor-editable > h1',
            run: () => {},
        }, { // reswitch to the other article
            trigger: '.o_knowledge_tree .o_article_name:contains("EditorCommandsArticle")',
            run: 'click',
        }, { // scroll to the embedded view to load it
            trigger: '.o_knowledge_behavior_type_embedded_view',
            run: function () {
                this.$anchor[0].scrollIntoView();
            },
        }, { // wait for the kanban view to be mounted
            trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
            run: () => {},
        }, { // open the view
            trigger: '.o_control_panel_breadcrumbs_actions .dropdown-toggle',
            run: 'click',
        }, {
            trigger: '.dropdown-item:contains(Open)'
        }, { // verify that the default help message is displayed
            trigger: '.o_action_manager > .o_view_controller.o_kanban_view .o_nocontent_help:contains("No data to display")',
            run: () => {}
        }, { // go back to the first view
            trigger: '.breadcrumb a:contains("EditorCommandsArticle")',
            run: 'click',
        }
    ];
}

const articleItemsKanbanAction = {
    domain: "[('parent_id', '=', active_id), ('is_article_item', '=', True)]",
    help: markup('<p class="o_nocontent_help">No data to display</p>'),
    name: "Article Items",
    res_model: 'knowledge.article',
    type: 'ir.actions.act_window',
    views: [[false, 'kanban']],
    view_mode: 'kanban',
};

function articleItemsKanbanActionContext (wysiwyg) {
    return {
        active_id: wysiwyg.options.recordInfo.res_id,
        default_parent_id: wysiwyg.options.recordInfo.res_id,
        default_is_article_item: true,
    };
}

return __exports;
});
;

/************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_list_command_tour.js  *
*  Lines: 92                                                                        *
************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_list_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@knowledge/js/knowledge_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { decodeDataBehaviorProps } = require("@knowledge/js/knowledge_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

const testName = "*()!'<>~";
let behaviorProps;

registry.category("web_tour.tours").add('knowledge_list_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /list command
    trigger: '.oe-powerbox-commandName:contains("Item List")',
    run: 'click',
}, { // input a test name for the view
    trigger: '.modal-dialog #label',
    run: `text ${testName}`,
}, { // choose a name for the embedded view
    trigger: '.modal-footer button.btn-primary',
    run: 'click'
}, { // scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: function () {
        this.$anchor[0].scrollIntoView();
    },
}, { // wait for the list view to be mounted
    trigger: '.o_knowledge_behavior_type_embedded_view .o_list_renderer',
    run: () => {},
}, { // verify that the view has the correct name and store data-behavior-props
    trigger: '.o_knowledge_embedded_view .o_control_panel .o_breadcrumb .active:contains("*()!\'<>~")',
    run: () => {
        const embeddedViewElement = document.querySelector('.o_knowledge_behavior_type_embedded_view');
        behaviorProps = decodeDataBehaviorProps(embeddedViewElement.dataset.behaviorProps);
    }
}, { // click on rename button
    trigger: '.o_control_panel_breadcrumbs_actions .dropdown-toggle',
    run: 'click',
}, {
    trigger: '.dropdown-item:contains(Edit)'
}, { // click to validate the modal
    trigger: '.modal-footer button.btn-primary',
    run: 'click'
}, { // check that the name is the correct one and compare previous data-behavior-props and the new one (should be equivalent)
    trigger: '.o_knowledge_embedded_view .o_control_panel .o_breadcrumb .active:contains("*()!\'<>~")',
    run: () => {
        const embeddedViewElement = document.querySelector('.o_knowledge_behavior_type_embedded_view');
        const newBehaviorProps = decodeDataBehaviorProps(embeddedViewElement.dataset.behaviorProps);
        if (newBehaviorProps.display_name !== behaviorProps.display_name) {
            throw new Error('The name displayed should not have changed');
        }
        if (JSON.stringify(newBehaviorProps) !== JSON.stringify(behaviorProps)) {
            // check that knowledge.article render_embedded_view urllib.parse.quote did
            // produce an equivalent data-behavior-props as knowledge_utils encodeDataBehaviorProps encodeURIComponent
            throw new Error('data-behavior-props should be semantically the same as before');
        }
    }
}, { // click on rename button
    trigger: '.o_control_panel_breadcrumbs_actions .dropdown-toggle',
    run: 'click',
}, {
    trigger: '.dropdown-item:contains(Edit)'
}, { // rename the view
    trigger: '.modal-body input',
    run: 'text New Title',
}, { // click to validate the modal
    trigger: '.modal-footer button.btn-primary',
    run: 'click',
}, { // check that name has been updated
    trigger: '.o_knowledge_embedded_view .o_control_panel .o_breadcrumb .active:contains("New Title")',
    run: () => {},
}, {
    // reload the article to make sure that the article is saved for readonly tour
    trigger: 'a[data-menu-xmlid="knowledge.knowledge_menu_home"]',
}, { // wait for embed to be visible
    trigger: '.o_knowledge_behavior_type_embedded_view',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/***************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_outline_command_tour.js  *
*  Lines: 34                                                                           *
***************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_outline_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add('knowledge_outline_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /outline command
    trigger: '.oe-powerbox-commandName:contains("Index")',
    run: 'click',
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_articles_structure',
}, { // click on the refresh button
    trigger: '.o_knowledge_behavior_type_articles_structure button[title="Update"]',
    run: 'click',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/****************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_search_favorites_tour.js  *
*  Lines: 250                                                                           *
****************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_search_favorites_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

/**
 * Verify that a filter is not duplicated and is properly maintained after
 * a round trip with the breadcrumbs.
 *
 * @param {String} kanban name of a kanban view in which records can be created
 * @param {String} filterName name of a favorite filter which is already present in the view
 * @returns {Array} steps
 */
const validateFavoriteFilterPersistence = function(kanban, filterName) {
    return [{
        content: 'create and edit item in the kanban view',
        trigger: `.o_knowledge_embedded_view .o_kanban_view:contains(${kanban}) .o-kanban-button-new`,
	    run: "click",
    }, {
        content: 'Give the name to the item',
        trigger: 'input#name_0',
        run: 'text Item 1',
    }, {
        content: 'click on the edit button',
        trigger: '.o_kanban_edit',
    }, {
        content: `go to the ${kanban} from the breadcrumb`,
        trigger: '.o_back_button',
    }, {
        // Open the favorite of the first kanban and check it's favorite
        trigger: `.o_breadcrumb:contains('${kanban}')`,
        run: function () {
            const view = this.$anchor[0].closest(
                '.o_kanban_view'
            );
            const searchMenuButton = view.querySelector(".o_searchview_dropdown_toggler");
            searchMenuButton.click();
        },
    }, {
        trigger: '.o_favorite_menu',
        run: function () {
            const favorites = this.$anchor[0].querySelectorAll("span.dropdown-item");
            if (favorites.length !== 1 || favorites[0].innerText !== filterName) {
                console.error(`Only one filter "(${filterName})" should be available`);
            }
        },
    }]
};

/**
 * Insert the Knowledge kanban view as an embedded view in article.
 *
 * @param {String} article article name
 * @returns {Array} steps
 */
const embedKnowledgeKanbanViewSteps = function (article) {
    return [{ // open the Knowledge App
        trigger: ".o_app[data-menu-xmlid='knowledge.knowledge_menu_root']",
    }, { // click on the search menu
        trigger: "[role='menuitem']:contains(Search)",
    }, { // toggle on the kanban view
        trigger: ".o_switch_view.o_kanban",
    }, { // wait for the kanban view
        trigger: ".o_kanban_renderer",
        run: () => {},
    }, { // open action menu dropdown
        trigger: ".o_control_panel .o_cp_action_menus button",
    }, { // click on the knowledge menu button
        trigger: ".o_control_panel .o_cp_action_menus .dropdown-toggle:contains(Knowledge)",
        run: function () {
            this.$anchor[0].dispatchEvent(new Event("mouseenter"));
        },
    }, { // click on insert view in article
        trigger: ".o_cp_action_menus span:contains('Insert view in article')",
    }, { // embed in article
        trigger: `.modal-dialog td.o_field_cell:contains(${article})`,
    }];
};

/**
 * Test favorite filters and use by default filters in embedded views in
 * Knowledge. Need an article with 2 named kanban embeds to work.
 *
 * @param {String} kanban1 name of the first kanban
 * @param {String} kanban2 name of the second kanban
 * @returns {Array} steps
 */
const validateFavoriteFiltersSteps = function (kanban1, kanban2) {
    return [{
        content: 'Open the search panel menu',
        trigger: `.o_knowledge_embedded_view .o_control_panel:contains(${kanban1}) .o_searchview_dropdown_toggler`,
    }, {
        trigger: ".o_favorite_menu .o_add_favorite",
    }, {
        trigger: ".o_favorite_menu:contains(Favorites) input[type='text']",
        run: "text testFilter",
    }, {
        // use by default
        trigger: ".o_favorite_menu .o-checkbox:contains(Default filter) input",
    }, {
        trigger: ".o_favorite_menu .o_save_favorite",
    },
    stepUtils.toggleHomeMenu(),
    {
        // open the Knowledge App
        trigger: ".o_app[data-menu-xmlid='knowledge.knowledge_menu_root']",
    }, {
        // check that the search item has been added
        trigger: ".o_facet_value",
        run: function () {
            const items = [...document.querySelectorAll(".o_searchview_facet")];
            const testFacets = items.filter((el) => {
                return (
                    el.querySelector(".o_searchview_facet_label .fa-star") &&
                    el.querySelector(".o_facet_values")?.innerText === "testFilter"
                );
            });
            if (testFacets.length !== 1) {
                console.error("The 'testFilter' facet should be applied only on the first view");
            }
        },
    }, {
        // Open the favorite of the second kanban and check it has no favorite
        // (favorite are defined per view)
        trigger: `.o_breadcrumb:contains('${kanban2}')`,
        run: function () {
            const view = this.$anchor[0].closest(
                '.o_kanban_view'
            );
            const searchMenuButton = view.querySelector(".o_searchview_dropdown_toggler");
            searchMenuButton.click();
        },
    }, {
        trigger: ".o_favorite_menu",
        run: function () {
            const items = document.querySelectorAll(".o_favorite_menu .dropdown-item");
            if (items.length !== 1 || items[0].innerText !== "Save current search") {
                console.error("The favorite should not be available for the second view");
            }
        },
    }];
};

registry.category("web_tour.tours").add("knowledge_items_search_favorites_tour", {
    url: "/web",
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            // open the Knowledge App
            trigger: ".o_app[data-menu-xmlid='knowledge.knowledge_menu_root']",
        },
        {
            trigger: ".o_field_html",
            run: function () {
                const header = document.querySelector(".o_breadcrumb_article_name input");
                if (header.value !== "Article 1") {
                    console.error(`Wrong article: ${header.value}`);
                }
            },
        },
        // Create the first Kanban
        {
            trigger: ".odoo-editor-editable > h1",
            run: function () {
                openCommandBar(this.$anchor[0]);
            },
        },
        {
            trigger: ".oe-powerbox-commandName:contains('Item Kanban')",
        },
        {
            trigger: ".modal-body input.form-control",
            run: "text Items 1",
        },
        {
            trigger: "button:contains('Insert')",
        },
        // wait for kanban 1 to be inserted
        {
            trigger: ".o_knowledge_embedded_view .o_control_panel:contains(Items 1)",
            run: () => {},
        },
        // Create the second Kanban
        {
            trigger: ".odoo-editor-editable > h1",
            run: function () {
                openCommandBar(this.$anchor[0]);
            },
        },
        {
            trigger: ".oe-powerbox-commandName:contains('Item Kanban')",
        },
        {
            trigger: ".modal-body input.form-control",
            run: "text Items 2",
        },
        {
            trigger: "button:contains('Insert')",
        },
        // wait for kanban 2 to be inserted
        {
            trigger: ".o_knowledge_embedded_view .o_control_panel:contains(Items 2)",
            run: () => {},
        },
        ...validateFavoriteFiltersSteps("Items 1", "Items 2"),
        // testFilter was added as a favorite during validateFavoriteFiltersSteps to Items 1
        ...validateFavoriteFilterPersistence("Items 1", "testFilter"),
        ...endKnowledgeTour(),
    ],
});

registry.category("web_tour.tours").add("knowledge_search_favorites_tour", {
    url: "/web",
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(),
        // insert a first kanban view
        ...embedKnowledgeKanbanViewSteps("Article 1"),
        { // wait for embedded view to load and click on rename button
            trigger: '.o_knowledge_behavior_type_embedded_view:has(.o_knowledge_embedded_view .o_control_panel:contains(Articles)) .o_control_panel_breadcrumbs_actions .dropdown-toggle',
            allowInvisible: true,
        }, {
            trigger: '.dropdown-item:contains(Edit)'
        }, { // rename the view Kanban 1
            trigger: '.modal-dialog input.form-control',
            run: `text Kanban 1`,
        }, { // click on rename
            trigger: "button:contains('Rename')",
        }, { // check the application of the rename
            trigger: '.o_knowledge_embedded_view .o_control_panel:contains(Kanban 1)',
            run: () => {},
        },
        stepUtils.toggleHomeMenu(),
        // insert a second kanban view
        ...embedKnowledgeKanbanViewSteps("Article 1"),
        { // wait for embedded view to load
            trigger: '.o_knowledge_embedded_view .o_control_panel:contains(Articles)',
            run: () => {},
        },
        ...validateFavoriteFiltersSteps("Kanban 1", "Articles"),
        ...endKnowledgeTour(),
    ],
});

return __exports;
});
;

/************************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_table_of_content_command_tour.js  *
*  Lines: 73                                                                                    *
************************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_table_of_content_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add('knowledge_table_of_content_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /toc command
    trigger: '.oe-powerbox-commandName:contains("Table Of Content")',
    run: 'click',
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_toc',
}, { // insert a few titles in the editor
    trigger: '.odoo-editor-editable > p',
    run: function () {
        const $anchor = $(this.$anchor[0]);
        $anchor.append([
            $('<h1>Title 1</h1>'),
            $('<h2>Title 1.1</h2>'),
            $('<h3>Title 1.1.1</h3>'),
            $('<h2>Title 1.2</h2>'),
        ]);
    },
}, { // click on the h1 anchor link generated by the toc
    trigger: '.o_knowledge_toc_link_depth_0',
    run: 'click',
}, { // open the tools panel
    trigger: '#dropdown_tools_panel',
    run: 'click',
}, { // switch to locked (readonly) mode
    trigger: '.o_knowledge_more_options_panel .btn-lock',
    run: 'click',
}, { // check that we are in readonly mode
    trigger: '.o_field_html .o_readonly',
    run: () => {},
}, { // check that the content of the toc is not duplicated
    trigger: '.o_knowledge_behavior_type_toc',
    run: function () {
        if (this.$anchor[0].querySelectorAll('.o_knowledge_toc_content').length !== 1) {
            throw new Error('The table of content group of links should be present exactly once (not duplicated)');
        }
    },
}, { // click on the h1 anchor link generated by the toc
    trigger: '.o_knowledge_toc_link_depth_0',
    run: 'click',
}, { // open the tools panel
    trigger: '#dropdown_tools_panel',
    run: 'click',
}, { // unlock the article
    trigger: '.o_knowledge_more_options_panel.show .btn-lock',
    run: 'click',
}, { // check that we are in edit mode
    trigger: '.o_field_html .odoo-editor-editable',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/****************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_template_command_tour.js  *
*  Lines: 110                                                                           *
****************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_template_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add('knowledge_template_command_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // go to the custom article
    trigger: '.o_article .o_article_name:contains("EditorCommandsArticle")',
}, { // wait for article to be correctly loaded
    trigger: '.o_breadcrumb_article_name_container:contains("EditorCommandsArticle")',
    run: () => {},
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /kanban command
    trigger: '.oe-powerbox-commandName:contains("Item Kanban")',
    run: 'click',
}, { // insert a kanban view (which contains breadcrumbs, this is used as a
     // check to verify that a clipboard macro will not consider those
     // breadcrumbs to advance).
    trigger: '.btn-primary:contains(Insert)',
    run: 'click',
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_embedded_view .o_last_breadcrumb_item:contains(Article Items)',
    run: () => {},
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /clipboard command
    trigger: '.oe-powerbox-commandName:contains("Clipboard")',
    run: 'click',
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_template',
    run: () => {},
}, { // enter text into the mail template
    trigger: '.o_knowledge_content > p',
    run: 'text Hello world'
}, { // verify that the text was correctly inserted
    trigger: '.o_knowledge_content > p:contains(Hello world)',
    run: () => {},
}, { // open the chatter
    trigger: '.btn-chatter',
    run: 'click',
}, {
    trigger: '.o-mail-Thread',
    run: () => {},
}, { // open the follower list of the article
    trigger: '.o-mail-Followers-button',
    run: 'click',
}, { // open the contact record of the follower
    trigger: '.o-mail-Follower-details:contains(HelloWorldPartner)',
    run: 'click',
}, { // verify that the partner form view is fully loaded
    trigger: '.o_breadcrumb .o_last_breadcrumb_item.active:contains(HelloWorldPartner)',
    run: () => {},
}, { // return to the knowledge article by going back from the breadcrumbs
    trigger: '.o_breadcrumb a:contains(EditorCommandsArticle)',
    run: 'click',
}, {
    trigger: '.o_knowledge_behavior_type_template button:first:contains(Copy)',
    run: () => {},
}, { // open the chatter again
    trigger: '.btn-chatter',
    run: 'click',
}, {
    trigger: '.o-mail-Thread',
    run: () => {},
}, { // open the follower list of the article
    trigger: '.o-mail-Followers-button',
    run: 'click',
}, { // open the contact record of the follower
    trigger: '.o-mail-Follower-details:contains(HelloWorldPartner)',
    run: 'click',
}, { // verify that the partner form view is fully loaded
    trigger: '.o_breadcrumb .o_last_breadcrumb_item.active:contains(HelloWorldPartner)',
    run: () => {},
}, { // search an article to open it from the contact record
    trigger: 'button[title="Search Knowledge Articles"]',
    run: 'click',
}, { // open the article
    trigger: '.o_command_default:contains(EditorCommandsArticle)',
    run: 'click',
}, { // wait for article to be correctly loaded
    trigger: '.o_breadcrumb_article_name_container:contains("EditorCommandsArticle")',
    run: () => {},
}, { // use the template as description for the contact record
    trigger: '.o_knowledge_behavior_type_template button:contains(Use as)',
    run: 'click',
}, { // check that the content of the template was inserted as description
    trigger: '.o_form_sheet .o_field_html .odoo-editor-editable p:first-child:contains("Hello world")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_video_command_tour.js  *
*  Lines: 75                                                                         *
*************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_video_command_tour', ['@odoo/owl', '@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/utils/patch', '@web/core/registry', '@web_tour/tour_service/tour_utils', '@knowledge/components/behaviors/video_behavior/video_behavior', '@web_editor/components/media_dialog/video_selector'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { Component, xml } = require("@odoo/owl");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { patch } = require("@web/core/utils/patch");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
const { VideoBehavior } = require("@knowledge/components/behaviors/video_behavior/video_behavior");
const { VideoSelector } = require("@web_editor/components/media_dialog/video_selector");

const YoutubeVideoId = "Rk1MYMPDx3s";
let unpatchVideoBehavior;
let unpatchVideoSelector;

class MockedVideoIframe extends Component {
    static template = xml`
        <div class="o_video_iframe_src" t-out="props.src" />
    `;
};

registry.category("web_tour.tours").add("knowledge_video_command_tour", {
    url: "/web",
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(), { // open the Knowledge App
            trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
        }, { // patch the components
            trigger: "body",
            run: () => {
                unpatchVideoBehavior = patch(VideoBehavior.components, {
                    ...VideoBehavior.components,
                    VideoIframe: MockedVideoIframe
                });
                unpatchVideoSelector = patch(VideoSelector.components, {
                    ...VideoSelector.components,
                    VideoIframe: MockedVideoIframe
                });
            },
        }, { // open the command bar
            trigger: ".odoo-editor-editable > p",
            run: function () {
                openCommandBar(this.$anchor[0]);
            },
        }, { // click on the /video command
            trigger: '.oe-powerbox-commandName:contains("Video")',
            run: "click",
        }, {
            content: "Enter a video URL",
            trigger: ".modal-body #o_video_text",
            run: `text https://www.youtube.com/watch?v=${YoutubeVideoId}`,
        }, {
            content: "Wait for preview to appear",
            trigger: `.o_video_iframe_src:contains("//www.youtube.com/embed/${YoutubeVideoId}?rel=0&autoplay=0")`,
            run: () => {},
        }, {
            content: "Confirm selection",
            trigger: '.modal-footer button:contains("Insert Video")',
        }, { // wait for the block to appear in the editor
            trigger: ".o_knowledge_behavior_type_video",
            extra_trigger: `.o_knowledge_behavior_type_video .o_video_iframe_src:contains("https://www.youtube.com/embed/${YoutubeVideoId}?rel=0&autoplay=0")`
        }, { // unpatch the components
            trigger: "body",
            run: () => {
                unpatchVideoBehavior();
                unpatchVideoSelector();
            },
        },...endKnowledgeTour()
    ]
});

return __exports;
});
;

/******************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_article_thread_tours.js  *
*  Lines: 108                                                                 *
******************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_article_thread_tours', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const {
    answerThreadSteps,
    createNewCommentSteps,
    endKnowledgeTour,
    resolveCommentSteps
} = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category('web_tour.tours').add('knowledge_article_thread_main_tour', {
    test: true,
    url: '/web',
    steps: () => [
        stepUtils.showAppsMenuItem(), {
        // Open Knowledge App
            trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
        }, {
            trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Sepultura")'
        },
        ...createNewCommentSteps(),
        { // Opens the edition of the comment box
            trigger: '.o_knowledge_comment_box, .o_knowledge_comment_box img',
            run: 'click'
        }, {
            trigger: '.o-mail-Composer-input, .o_knowledge_comments_popover',
            run: () => {}
        },
        ...answerThreadSteps('Brand New Comment'),
        ...endKnowledgeTour()
    ]
});

registry.category('web_tour.tours').add('knowledge_article_thread_answer_comment_tour', {
    test: true,
    url: '/web',
    steps: () => [
        stepUtils.showAppsMenuItem(), {
        // Open Knowledge App
            trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
        },
        {
            trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Sepultura")'
        },
        ...answerThreadSteps(),
        ...endKnowledgeTour()
    ]
});

registry.category('web_tour.tours').add('knowledge_article_thread_resolve_comment_tour', {
    test: true,
    url: '/web',
    steps: () => [
        stepUtils.showAppsMenuItem(), {
        // Open Knowledge App
            trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
        }, {
            trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Sepultura")'
        }, { // Opens the edition of the comment box
            trigger: '.o_knowledge_comment_box, .o_knowledge_comment_box img',
            run: 'click'
        }, {
            trigger: '.o-mail-Composer-input, .o_knowledge_comments_popover',
            run: () => {}
        },
        ...resolveCommentSteps(), { // Checks that the box is indeed removed from the DOM
            trigger: '.o_widget_knowledge_comments_handler div:not( .o_knowledge_comment_box)',
            run: () => {}
        },
        ...endKnowledgeTour()
    ]
});

registry.category('web_tour.tours').add('knowledge_article_thread_panel_tour', {
    test: true,
    url:'/web',
    steps: () => [
        stepUtils.showAppsMenuItem(), { // Open Knowledge App
            trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
        }, {
            trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Sepultura")'
        }, { //Opens the panel
            trigger: '.btn-comments'
        }, { //Checks panel is loaded
            trigger: '.o_knowledge_comments_panel',
            run: () => {}
        }, {
            trigger: '.o_knowledge_comments_panel .o_knowledge_comment_box'
        },
        ...answerThreadSteps(),
        ...resolveCommentSteps(),
        { // Open resolved mode
            trigger: '.o_knowledge_comments_panel select',
            run: 'text resolved'
        }, {
            trigger: '.o_knowledge_comment_resolved',
        }, // You can answer on resolved threads
        ...answerThreadSteps('This should be resolved here'),
        ...endKnowledgeTour()
    ]
});

return __exports;
});
;

/**********************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_cover_picker.js  *
*  Lines: 199                                                         *
**********************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_cover_picker', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function moveCover(position) {
    const cover = document.querySelector('.o_knowledge_cover img');
    cover.dispatchEvent(new PointerEvent('pointerdown'));
    document.dispatchEvent(new PointerEvent('pointermove', {clientY: position}));
    document.dispatchEvent(new PointerEvent('pointerup'));
}

/**
 * Tests the cover picker feature when unsplash credentials are unset. In this
 * case, the "Add Cover" button should always open the cover selector.
 */
registry.category("web_tour.tours").add('knowledge_cover_selector_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // Open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // Click on the "Create" button
    trigger: '.o_knowledge_header .btn-create',
}, {
    // Set the name of the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text Birds',
}, {
    // Make the add cover button visible (only visible on hover)
    trigger: '.o_article_active:contains("Birds")',
    run() {},
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
    allowInvisible: true,
}, {
    // Check that the cover selector has been opened and that it shows
    // the form allowing to enter unsplash credentials, and click on the
    // add url button
    trigger: '.o_upload_media_url_button',
    extra_trigger: '.modal-body .unsplash_error',
    run: () => {},
}, {
    // Change the search query to find odoo_logo file
    trigger: '.modal-body input.o_we_search',
    extra_trigger: '.modal-body .o_nocontent_help',
    run: 'text odoo_logo',
}, {
    // Choose the odoo_logo cover
    trigger: '.o_existing_attachment_cell img[title*="odoo_logo"]',
    run: 'click',
}, {
    // Check cover has been added to the article and is initially centered and
    // make the reposition cover button visible
    trigger: '.o_knowledge_cover img[style="object-position: 50% 50%;"]',
    run() {},
}, {
    // Click on the reposition cover button
    trigger: '.o_knowledge_reposition_cover',
    allowInvisible: true,
}, {
    // Move the cover down and click on the "Cancel" button
    trigger: '.o_reposition_hint',
    run: () => {
        moveCover(1000);
        const undoButton = document.querySelector('.o_knowledge_undo_cover_move');
        // Timeout to make sure the event is fired after that the cover has moved
        setTimeout(() => undoButton.dispatchEvent(new PointerEvent('pointerdown', {bubbles: true})), 0);
    },
}, {
    // Check that the undo button works as expected (cover should be centered)
    trigger: '.o_knowledge_cover img[style="object-position: 50% 50%;"]',
    extra_trigger: '.o_knowledge_cover:not(:has(.o_reposition_hint))',
    run() {},
}, {
    // Move cover again but use the "save" button this time
    trigger: '.o_knowledge_reposition_cover',
    allowInvisible: true,
}, {
    trigger: '.o_reposition_hint',
    run: () => {
        moveCover(1000);
        const saveButton = document.querySelector('.o_knowledge_save_cover_move');
        // Timeout to make sure the event is fired after that the cover has moved
        setTimeout(() => saveButton.dispatchEvent(new PointerEvent('pointerdown', {bubbles: true})), 0);
    }
}, {
    // Check that the cover is positioned at the top
    trigger: '.o_knowledge_cover img[style="object-position: 50% 0.01%;"]',
    extra_trigger: '.o_knowledge_cover:not(:has(.o_reposition_hint))',
}, {
    // Create another article
    trigger: '.o_knowledge_header .btn-create',
}, {
    // Change the name of the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text odoo',
}, {
    // Go back to previous article
    trigger: '.o_knowledge_sidebar .o_article_name:contains("Birds")',
    extra_trigger: '.o_article_active:contains("odoo")',
}, {
    // Check that the cover is still positioned at the top and make the replace
    // cover visible
    trigger: '.o_knowledge_cover img[style="object-position: 50% 0.01%;"]',
    extra_trigger: '.o_article_active:contains("Birds")',
    run() {},
}, {
    // Click on replace cover button
    trigger: '.o_knowledge_replace_cover',
    allowInvisible: true,
}, {
    // Check that the cover selector has been opened, that no image is shown
    // since the search query (birds) do not match the name of the existing
    // cover, and close the cover selector
    trigger: '.modal-footer .btn-secondary',
    extra_trigger: '.modal-body .o_nocontent_help',
}, {
    // Make the remove cover button visible
    trigger: '.o_knowledge_edit_cover_buttons',
    run() {},
}, {
    // Click on remove cover button
    trigger: '.o_knowledge_remove_cover',
    allowInvisible: true,
}, {
    // Check cover has been removed from the article and open other article
    trigger: '.o_knowledge_sidebar .o_article_name:contains("odoo")',
    extra_trigger: '.o_knowledge_body:not(:has(.o_widget_knowledge_cover))',
}, {
    // Make the add cover button visible
    trigger: '.o_article_active:contains("odoo")',
    run() {},
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
    allowInvisible: true,
}, {
    // Check that odoo logo previously uploaded is shown in the selector as the
    // search query, which is the article name, is "odoo" which is also in the
    // cover attachment's name, and that clicking on it sets it as cover of the
    // current article
    trigger: '.modal-body .o_existing_attachment_cell img[title="odoo_logo.png"]',
}, {
    // Check cover has been set, and open previous article again
    trigger: '.o_knowledge_sidebar .o_article_name:contains("Birds")',
    extra_trigger: '.o_knowledge_cover',
}, {
    // Make the add cover button visible
    trigger: '.o_knowledge_edit_cover_buttons',
    run() {},
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
    allowInvisible: true,
}, {
    // Check odoo logo is not shown as the search query does not match its name
    // and remove search query
    trigger: '.modal-body input.o_we_search',
    extra_trigger: '.modal-body .o_nocontent_help',
    run: 'remove_text',
}, {
    // Check that odoo logo is now shown in the cover selector, and make the trash
    // button visible
    trigger: '.modal-body .o_existing_attachment_cell img[title="odoo_logo.png"]',
    run() {},
}, {
    // Click on delete cover button
    trigger: '.modal-body .o_existing_attachment_cell:has(img[title="odoo_logo.png"]) .o_existing_attachment_remove',
    allowInvisible: true,
}, {
    // Confirm deletion of cover (should ask for confirmation)
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal-title:contains("Confirmation")'
}, {
    // Check that no cover is shown anymore in the cover selector, and close it
    trigger: '.modal-footer .btn-secondary',
    extra_trigger: '.modal-body .o_we_existing_attachments:not(:has(.o_existing_attachment_cell))',
}, {
    // Open other article to check that its cover has been removed since it has
    // been deleted
    trigger: '.o_knowledge_sidebar .o_article_name:contains("odoo")',
}, {
    trigger: '.o_knowledge_body:not(:has(.o_widget_knowledge_cover))',
    extra_trigger: '.o_article_active:contains("odoo")',
    allowInvisible: true,
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/******************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_cover_random_unplash.js  *
*  Lines: 78                                                                  *
******************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_cover_random_unplash', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour, makeVisible } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

/**
 * Tests the cover picker feature when unsplash credentials are set. In this
 * case, the "Add Cover" button should either add a random picture from a 
 * selected unsplash collection if no name is set on the article, either
 * add a random image using the article name as query word.
 */
registry.category("web_tour.tours").add('knowledge_random_cover_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // Open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // Click on the "Create" action
    trigger: '.o_knowledge_header .btn-create',
}, {
    // Make the add cover button visible (only visible on hover)
    trigger: '.o_article_active:contains("Untitled")',
    run: () => makeVisible('.o_knowledge_add_cover'),
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
}, {
    // Check that a cover has been added, and make the change cover button visible
    trigger: '.o_knowledge_cover .o_knowledge_cover_image',
    run: () => makeVisible('.o_knowledge_replace_cover'),
}, {
    // Click on change cover button
    trigger: '.o_knowledge_replace_cover',
}, {
    // Check that the cover selector has been opened, that no unsplash images can be
    // loaded as the article has no name and close the cover selector
    trigger: '.modal-footer .btn-secondary',
    extra_trigger: '.modal-body .o_load_done_msg',
}, {
    // Make the remove cover button visible
    trigger: '.o_knowledge_edit_cover_buttons',
    run: () => makeVisible('.o_knowledge_remove_cover'),
}, {
    // Remove the cover of the article
    trigger: '.o_knowledge_remove_cover',
}, {
    // Set the name of the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Birds',
}, {
    // Make the add cover button visible
    trigger: '.o_article_active:contains("Birds")',
    run: () => makeVisible('.o_knowledge_add_cover'),
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
}, {
    // Check that a cover has been added and make the change cover button visible
    trigger: '.o_knowledge_cover .o_knowledge_cover_image',
    run: () => makeVisible('.o_knowledge_replace_cover'),
}, {
    // Click on change cover button
    trigger: '.o_knowledge_replace_cover',
}, {
    // Check that the cover selector has been opened, that other unsplash
    // images can be loaded and close the cover selector
    trigger: '.modal-footer .btn-secondary',
    extra_trigger: '.modal-body .o_load_more',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*****************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_embedded_views_tour.js  *
*  Lines: 61                                                                 *
*****************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_embedded_views_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils', '@knowledge/../tests/tours/knowledge_tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");

registry.category("web_tour.tours").add('knowledge_embedded_view_filters_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
        // open Knowledge App
        trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
    }, { // open the command bar
        trigger: '.odoo-editor-editable > p',
        run: function () {
            openCommandBar(this.$anchor[0]);
        },
    }, { // add embedded list view of article items
        trigger: '.oe-powerbox-commandName:contains("Item List")'
    }, {
        trigger: '.btn-primary'
    }, { // Check that we have 2 elements in the embedded view
        trigger: 'tbody tr.o_data_row:nth-child(2)',
        run: () => {}
    }, { // add a simple filter
        trigger: '.o_searchview_input_container input',
        run: 'text 1'
    }, {
        trigger: 'li#1'
    }, { // Check that the filter is effective
        trigger: 'tbody:not(tr.o_data_row:nth-child(2))',
        run: () => {}
    }, { // Open the filtered article
        trigger: 'tbody > tr > td[name="display_name"]'
    }, { // Wait for the article to be open
        trigger: '.o_breadcrumb_article_name_container > span:contains("Child 1")',
        run: () => {}
    }, { // Open parent via the sidebar
        trigger: '.o_article_name:contains("EditorCommandsArticle")'
    }, { // Check that there is no filter in the searchBar
        trigger: '.o_searchview_input_container:not( > div)',
        run: () => {}
    }, { // Check that we have 2 elements in the embedded view
        trigger: 'tbody tr.o_data_row:nth-child(2)',
        run: () => {}
    }, { // Go back via the breadcrumb
        trigger: '.o_back_button'
    }, { // Check that there is the filter in the searchBar
        trigger: '.o_searchview_input_container > div',
        run: () => {}
    }, { // Check that the filter is effective
        trigger: 'tbody:not(tr.o_data_row:nth-child(2))',
        run: () => {}
    }, ...endKnowledgeTour()]
});

return __exports;
});
;

/**********************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_history_tour.js  *
*  Lines: 111                                                         *
**********************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_history_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

/**
 * Knowledge history tour.
 * Features tested:
 * - Create / edit an article an ensure revisions are created on write
 * - Open the history dialog and check that the revisions are correctly shown
 * - Select a revision and check that the content / comparison are correct
 * - Click the restore button and check that the content is correctly restored
 */

const { endKnowledgeTour } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

const testArticleName = 'Test history Article';
function changeArticleContentAndSave(newContent) {
    return [ {
        // change the content of the article
        trigger: '.note-editable.odoo-editor-editable h1',
        run: 'text ' + newContent,  // modify the article content
    }, {
        // reload knowledge articles to make sure that the article is saved
        trigger: 'a[data-menu-xmlid="knowledge.knowledge_menu_home"]',
    }, {
        // wait for the page to reload and OWL to accept value change
        trigger: '.o_article:contains("' + testArticleName + '"):not(.o_article_active)',
        run: async () => {
            await new Promise((r) => setTimeout(r, 300));
        },
    }, {
        // click on the test article
        trigger: '.o_article:contains("' + testArticleName + '") a.o_article_name',
    }, {
        // wait for the article to be loaded
        trigger: '.o_article_active:contains("' + testArticleName + '") ',
        run: () => {},
    }];
}


registry.category("web_tour.tours").add('knowledge_history_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
        // open Knowledge App
        trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
    }, {
        // click on the main "New" action
        trigger: '.o_knowledge_header .btn:contains("New")',
    }, {
        // check that the article is correctly created (private section)
        trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
        run: () => {},
    },
        ...changeArticleContentAndSave(testArticleName),
        ...changeArticleContentAndSave('Modified Title 01'),
        ...changeArticleContentAndSave('Modified Title 02'),
        ...changeArticleContentAndSave('Modified Title 03'),
    {
        // Open history dialog
        trigger: '.btn.btn-history',
    }, {
        // check the history dialog is opened
        trigger: '.modal-header:contains("History")',
    }, {
        // check that we have the correct number of revision (4)
        trigger: ".html-history-dialog .revision-list .btn",
        run: function () {
            const items = document.querySelectorAll(".revision-list .btn");
            if (items.length !== 4) {
                throw new Error('Expect 4 Revisions in the history dialog, got ' + items.length);
            }
        },
    }, {
        // check the first revision content is correct
        trigger: '#history-content-tab:contains("Modified Title 02")',
    }, {
        // click on the 3rd revision
        trigger: '.html-history-dialog .revision-list .btn:nth-child(3)',
    }, {
        // check the 3rd revision content is correct
        trigger: '#history-content-tab:contains("' + testArticleName + '")',
    }, {
        // click on the comparison tab
        trigger: '#history-comparison',
    }, {
        // check the comparison content is correct
        trigger: '#history-comparison-tab',
        run: function () {
            const comparaisonHtml = document.querySelector('#history-comparison-tab').innerHTML;
            const correctHtml = '<h1><added>' + testArticleName + '</added><removed>Modified Title 03</removed></h1>';
            if (comparaisonHtml !== correctHtml) {
                throw new Error('Expect comparison to be ' + correctHtml + ', got ' + comparaisonHtml);
            }
        }
    }, {
        // click on the restore button
        trigger: '.modal-footer .btn-primary:contains("Restore")',
    } , {
        // ensure the article content is restored
        trigger: '.note-editable.odoo-editor-editable h1:contains("' + testArticleName + '")',
    },
    ...endKnowledgeTour()
]});

return __exports;
});
;

/************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_main_flow_tour.js  *
*  Lines: 246                                                           *
************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_main_flow_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

/**
 * Global Knowledge flow tour.
 * Features tested:
 * - Create an article
 * - Change its title / content
 * - Share an article with a created partner
 * - Create 2 children articles and invert their order
 * - Favorite 2 different articles and invert their order in the favorite section
 */

const { dragAndDropArticle, endKnowledgeTour, makeVisible } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('knowledge_main_flow_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // click on the main "New" action
    trigger: '.o_knowledge_header .btn:contains("New")',
}, {
    // check that the article is correctly created (private section)
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    trigger: '.note-editable.odoo-editor-editable h1',
    run: 'text My Private Article',  // modify the article content
}, {
    trigger: 'section[data-section="workspace"]',
    run: () => {
        // force the create button to be visible (it's only visible on hover)
        makeVisible('section[data-section="workspace"] .o_section_create');
    },
}, {
    // create an article in the "Workspace" section
    trigger: 'section[data-section="workspace"] .o_section_create',
}, {
    // check that the article is correctly created (workspace section), and that the previous
    // article has been renamed using its title (first h1 in body).
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    extra_trigger: 'section[data-section="private"] .o_article .o_article_name:contains("My Private Article")',
    run: () => {},
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text My Workspace Article',  // modify the article name
}, {
    trigger: '.note-editable.odoo-editor-editable',
    run: 'text Content of My Workspace Article',  // modify the article content
}, {
    trigger: '.o_article:contains("My Workspace Article")',
    run: () => {
        // force the create button to be visible (it's only visible on hover)
        $('.o_article:contains("My Workspace Article") a.o_article_create').css('display', 'block');
    },
}, {
    // create child article
    trigger: '.o_article:contains("My Workspace Article") a.o_article_create',
}, {
    // check that the article is correctly created (workspace section)
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Child Article 1',  // modify the article name
}, {
    trigger: '.o_article:contains("My Workspace Article")',
}, {
    // create child article (2)
    trigger: '.o_article:contains("My Workspace Article") a.o_article_create',
}, {
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Child Article 2',  // modify the article name
}, {
    // move child article 2 above child article 1
    trigger: '.o_article_handle:contains("Child Article 2")',
    run: () => {
        dragAndDropArticle(
            $('.o_article_handle:contains("Child Article 2")'),
            $('.o_article_handle:contains("Child Article 1")'),
        );
    },
}, {
    // verify that the move was done
    trigger: '.o_article:has(.o_article_name:contains("My Workspace Article")) ul > :eq(0):contains("Child Article 2")',
    run: () => {},
}, {
    // go back to main workspace article
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("My Workspace Article")',
}, {
    trigger: '.o_knowledge_editor:contains("Content of My Workspace Article")',
    run: () => {},  // wait for article to be correctly loaded
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    // open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    // click on 'Invite'
    trigger: '.o_knowledge_share_panel .btn:contains("Invite")',
}, {
    // Type the invited person's name
    trigger: '.o_field_many2many_tags_email[name=partner_ids] input',
    run: 'text micheline@knowledge.com',
}, {
    // Open the simplified create form view
    trigger: '.o-autocomplete--dropdown-menu .o_m2o_dropdown_option_create_edit a',
    run: 'click',
}, {
    // Give an email address to the partner
    trigger: '.o_field_widget[name=email] input',
    run: 'text micheline@knowledge.com',
}, {
    // Save the new partner
    trigger: '.o_form_button_save',
}, {
    // Submit the invite wizard
    trigger: 'button:contains("Invite")',
    extra_trigger: '.o_field_tags span.o_badge_text',
}, {
    // add to favorite
    trigger: '.o_knowledge_toggle_favorite',
}, {
    // check article was correctly added into favorites
    trigger: 'section[data-section="favorites"] .o_article .o_article_name:contains("My Workspace Article")',
    run: () => {},
}, {
    // open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    // open the share dropdown
    trigger: '.o_member_email:contains("micheline@knowledge.com")',
    in_modal: false,
    run: () => {},
}, {
    // go back to private article
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("My Private Article")',
}, {
    trigger: '.o_knowledge_editor:contains("My Private Article")',
    run: () => {},  // wait for article to be correctly loaded
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    // add to favorite
    trigger: '.o_knowledge_toggle_favorite',
}, {
    // wait for the article to be registered as favorited
    trigger: '.o_knowledge_toggle_favorite .fa-star',
    run: () => {},
}, {
    // move private article above workspace article in the favorite section
    trigger: 'section[data-section="favorites"] .o_article_handle:contains("My Private Article")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="favorites"] .o_article_handle:contains("My Private Article")'),
            $('section[data-section="favorites"] .o_article_handle:contains("My Workspace Article")'),
        );
    },
}, {
    // verify that the move was done
    trigger: 'section[data-section="favorites"] ul > :eq(0):contains("My Private Article")',
    run: () => {},
}, {
    // go back to main workspace article
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("My Workspace Article")',
}, {
    trigger: ':contains("Content of My Workspace Article")',
    run() {},
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    // click on the main "New" action
    trigger: '.o_knowledge_header .btn:contains("New")',
}, {
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
    run: () => {}, // check that the article is correctly created (private section)
}, {
    // check the autofocus
    trigger: '.note-editable.odoo-editor-editable:focus',
    run: () => {},
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Article to be moved',  // modify the article name
}, {// move article
    trigger: 'a#dropdown_tools_panel',
    run: 'click'
}, {
    trigger: '.btn-move',
    run: 'click',
}, {
    trigger: '.o_select_menu_item:contains("Article 3")',
    run: 'click',
}, {
    trigger: '.o_select_menu_toggler_slot:contains("Article 3")',
    run: () => {},
}, {
    trigger: '.modal-content .btn-primary:contains("Move Article")',
    run: 'click',
}, {
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Article to be moved")',
    run: 'click'
}, {
    // open the trash
    trigger: '.o_knowledge_sidebar_trash div[role="button"]',
}, {
    // verify that the trash list has been opened correctly and that items are correctly ordered
    trigger: '.o_data_row:first .o_data_cell[name="display_name"]:contains("Article 2")',
    extra_trigger: '.o_breadcrumb .active:contains("Trash")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*******************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_main_flow_tour_portal.js  *
*  Lines: 124                                                                  *
*******************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_main_flow_tour_portal', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

/**
 * Global Knowledge flow tour - Adapter for portal user
 * Features tested:
 * - Create a private article
 * - Change its title / content
 * - Write on a "workspace" article to which we have access
 * - Create children articles to a "workspace" article to which we have access
 * - Favorite 2 different articles and invert their order in the favorite section
 */

const { dragAndDropArticle } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");


registry.category("web_tour.tours").add('knowledge_main_flow_tour_portal', {
    test: true,
    url: '/knowledge/home',
    steps: () => [{
    // click on the main "New" action
    trigger: '.o_knowledge_header .btn:contains("New")',
}, {
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},  // check that the article is correctly created (private section)
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text My Private Article',  // modify the article name
}, {
    trigger: '.note-editable.odoo-editor-editable',
    run: 'text Content of My Private Article',  // modify the article content
}, {
    trigger: 'body',
    run: () => {
        // Make sure the internal article is not visible
        if (document.querySelectorAll(
            'section[data-section="workspace"] .o_article .o_article_name'
        ).length !== 1) {
            throw new Error("Internal Workspace Article is not supposed to be visible for portal user.");
        }
    }
}, {
    trigger: '#knowledge_search_bar' // make sure the search article feature works
}, {
    trigger: '.o_select_menu_item:contains("Workspace Article")',
    in_modal: false,
}, {
    trigger: 'button:contains("Open")'
}, {
    trigger: '.o_knowledge_editor:contains("Content of Workspace Article")',
    run: () => {},  // wait for article to be correctly loaded
}, {
    trigger: '.note-editable.odoo-editor-editable',
    run: 'text Edited Content of Workspace Article',  // modify the article content
}, {
    trigger: '.o_article:contains("Workspace Article")',
    run: () => {
        // force the create button to be visible (it's only visible on hover)
        $('.o_article:contains("Workspace Article") a.o_article_create').css('display', 'block');
    },
}, {
    // create child article
    trigger: '.o_article:contains("Workspace Article") a.o_article_create',
}, {
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},  // check that the article is correctly created (workspace section)
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Child Article 1',  // modify the article name
}, {
    // create child article (2)
    trigger: '.o_article:contains("Workspace Article") a.o_article_create',
}, {
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},  // check that the article is correctly created (workspace section)
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Child Article 2',  // modify the article name
}, {
    // go back to main workspace article
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Workspace Article")',
}, {
    trigger: '.o_knowledge_editor:contains("Edited Content of Workspace Article")',
    run: () => {},  // wait for article to be correctly loaded
}, {
    // add to favorite
    trigger: '.o_knowledge_toggle_favorite',
}, {
    // check article was correctly added into favorites
    trigger: 'div.o_favorite_container .o_article .o_article_name:contains("Workspace Article")',
    run: () => {},
}, {
    // go back to private article
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("My Private Article")',
}, {
    trigger: '.o_knowledge_editor:contains("My Private Article")',
    run: () => {},  // wait for article to be correctly loaded
}, {
    // add to favorite
    trigger: '.o_knowledge_toggle_favorite',
}, {
    // wait for the article to be registered as favorited
    trigger: '.o_knowledge_toggle_favorite .fa-star',
    run: () => {},
}, {
    // move private article above workspace article in the favorite section
    trigger: 'div.o_favorite_container .o_article_handle:contains("My Private Article")',
    run: () => {
        dragAndDropArticle(
            $('div.o_favorite_container .o_article_handle:contains("My Private Article")'),
            $('div.o_favorite_container .o_article_handle:contains("Workspace Article")'),
        );
    },
}, {
    // verify that the move was done
    trigger: 'div.o_favorite_container ul > :eq(0):contains("My Private Article")',
    isCheck: true,
}]});

return __exports;
});
;

/*************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_pick_emoji_tour.js  *
*  Lines: 57                                                             *
*************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_pick_emoji_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('knowledge_pick_emoji_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // click on the main "New" action
    trigger: '.o_knowledge_header .btn:contains("New")',
}, {
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
    run: () => {}, // check that the article is correctly created (private section)
}, {
    trigger: '.o_knowledge_add_buttons',
    run: () => {
        // force the cover buttons to be visible (it's only visible on hover)
        $('.o_knowledge_add_icon, .o_knowledge_add_cover').css({
            opacity: 1,
            visibility: 'visible'
        });
    },
}, {
    // add a random emoji
    trigger: '.o_knowledge_add_icon',
    run: 'click',
}, {
    trigger: '.o_knowledge_body .o_article_emoji',
    run: 'click',
}, {
    trigger: '.o-Emoji[data-codepoints="😃"]',
    run: 'click',
}, {
    // check that the emoji has been properly changed in the article body
    trigger: '.o_knowledge_body .o_article_emoji:contains(😃)',
    run: () => {},
}, {
    // check that the emoji has been properly changed in the header
    trigger: '.o_knowledge_header .o_article_emoji:contains(😃)',
    run: () => {},
}, {
    // check that the emoji has been properly changed in the aside block
    trigger: '.o_knowledge_sidebar .o_article_emoji:contains(😃)',
    run: () => {}
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_properties_tour.js  *
*  Lines: 61                                                             *
*************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_properties_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { dragAndDropArticle, endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('knowledge_properties_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // ensure display of ParentArticle child articles
    trigger: '.o_article_handle:contains("ParentArticle") .o_article_caret',
    run: function (actions) {
        const button = this.$anchor[0];
        if (button.querySelector('i.fa-caret-right')) {
            actions.click(this.$anchor);
        }
    }
}, { // go to ChildArticle
    trigger: '.o_article .o_article_name:contains("ChildArticle")',
    run: 'click',
}, { // wait ChildArticle loading
    trigger: '.breadcrumb .active:contains("ChildArticle")',
    run: () => {},
}, { // click on add properties
    trigger: 'button.o_knowledge_add_properties',
    run: 'click',
}, {
    trigger: '.o_field_property_add button',
    run: 'click'
}, { // modify property name
    trigger: '.o_field_property_definition_header',
    run: 'text_blur myproperty',
}, { // verify property and finish property edition
    trigger: '.o_knowledge_editor .odoo-editor-editable',
    extra_trigger: '.o_field_property_label:contains("myproperty")',
    run: 'click',
}, { // go to InheritPropertiesArticle
    trigger: '.o_article .o_article_name:contains("InheritPropertiesArticle")',
    run: 'click',
}, { // wait InheritPropertiesArticle loading and move InheritPropertiesArticle under ParentArticle
    trigger: '.breadcrumb .active:contains("InheritPropertiesArticle")',
    run: () => {
        dragAndDropArticle(
            $('.o_article_handle:contains("InheritPropertiesArticle")'),
            $('.o_article_handle:contains("ChildArticle")'),
        );
    },
}, { // verify property
    trigger: '.o_knowledge_properties .o_field_property_label:contains("myproperty")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/********************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_readonly_favorite_tour.js  *
*  Lines: 48                                                                    *
********************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_readonly_favorite_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { dragAndDropArticle, endKnowledgeTour } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");

// Checks that one can add an readonly article to its favorites

registry.category("web_tour.tours").add('knowledge_readonly_favorite_tour', {
    test: true,
    steps: () => [{
    // Make sure we are on the readonly article 1, that is not favorited, and
    // click on the toggle favorite button.
    trigger: 'a.o_knowledge_toggle_favorite:has(.fa-star-o)',
    extra_trigger: '.o_article_active:contains("Readonly Article 1")',
}, {
    // Check that the article has been added to the favorites
    trigger: 'section[data-section="favorites"]:contains("Readonly Article 1")',
    extra_trigger: 'a.o_knowledge_toggle_favorite:has(.fa-star)',
    run: () => {},
}, {
    // Open the other readonly article
    trigger: '.o_knowledge_sidebar .o_article_name:contains("Readonly Article 2")',
}, {
    // Make sure we are on the readonly article 1, that is not favorited, and
    // click on the toggle favorite button.
    trigger: 'a.o_knowledge_toggle_favorite:has(.fa-star-o)',
    extra_trigger: '.o_article_active:contains("Readonly Article 2")',
}, {
    // Check that the article has been added to the favorites under the other
    // one and try to resquence the favorite articles
    trigger: 'section[data-section="favorites"] li:last:contains("Readonly Article 2")',
    run: () => dragAndDropArticle(
        $('section[data-section="favorites"] li:last .o_article_handle'),
        $('section[data-section="favorites"] li:first .o_article_handle')
    ),
}, {
    // Check that articles have been reordered correctly
    trigger: 'section[data-section="favorites"] li:last:contains("Readonly Article 1")',
    extra_trigger: 'section[data-section="favorites"] li:first:contains("Readonly Article 2")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/***********************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_readonly_item_kanban_tour.js  *
*  Lines: 33                                                                       *
***********************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_readonly_item_kanban_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
/**
 * This tour checks that a user that has readonly access on an article cannot
 * create items from the item kanban.
 */
registry.category("web_tour.tours").add('knowledge_readonly_item_kanban_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: function () {
        this.$anchor[0].scrollIntoView();
    },
}, { // wait for the kanban view to be mounted
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
    run: () => {},
}, { // check that the "new" button is not shown
    trigger: '.o_control_panel_main:not(:has(.o-kanban-button-new))',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*********************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_readonly_item_list_tour.js  *
*  Lines: 34                                                                     *
*********************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_readonly_item_list_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

/**
 * This tour checks that a user that has readonly access on an article cannot
 * create items from the item list.
 */
registry.category("web_tour.tours").add('knowledge_readonly_item_list_tour', {
    url: '/web',
    test: true,
    steps: () => [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: function () {
        this.$anchor[0].scrollIntoView();
    },
}, { // wait for the list view to be mounted
    trigger: '.o_knowledge_behavior_type_embedded_view .o_list_renderer',
    run: () => {},
}, { // check that the "new" button is not shown
    trigger: '.o_control_panel_main:not(:has(.o_list_button_add))',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*****************************************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_resequence_children_of_readonly_parent_tour.js  *
*  Lines: 41                                                                                         *
*****************************************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_resequence_children_of_readonly_parent_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { dragAndDropArticle } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");

// Checks that one can resequence children under a readonly parent

registry.category("web_tour.tours").add('knowledge_resequence_children_of_readonly_parent_tour', {
    test: true,
    steps: () => [
{ // check presence of parent article and unfold it
    trigger: '.o_article_active:contains(Readonly Parent) > a.o_article_caret',
    run: 'click',
}, { // check existence and order of children, and reorder children
    trigger: '.o_article_active:contains(Readonly Parent)',
    extra_trigger: '.o_article_has_children:has(li:nth-child(1):contains(Child 1)):has(li:nth-child(2):contains(Child 2))',
    run: function () {
        const children = this.$anchor[0].parentElement.querySelectorAll(".o_article_name");
        // move 2nd child above the first.
        dragAndDropArticle($(children[2]), $(children[1]));
    },
}, { // check that the children were correctly reordered, and try to make a root from one children
    trigger: '.o_article_active:contains(Readonly Parent)',
    extra_trigger: '.o_article_has_children:has(li:nth-child(1):contains(Child 2)):has(li:nth-child(2):contains(Child 1))',
    run: function () {
        const child1 = this.$anchor[0].parentElement.querySelectorAll(".o_article_name")[2]
        // move 1st child above parent.
        dragAndDropArticle($(child1), this.$anchor);
    },
}, { // check that the 1st child move was effective
    trigger: '.o_section:contains(Workspace):has(li:nth-child(1):contains(Child 1)):has(li:nth-child(2):contains(Readonly Parent))',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*******************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_sidebar_readonly_tour.js  *
*  Lines: 54                                                                   *
*******************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_sidebar_readonly_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { dragAndDropArticle } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('knowledge_sidebar_readonly_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // Open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // Unfold the private article and check that articles are in the correct
    // order to make the move possible
    trigger: '.o_article.readonly .o_article_caret',
    extra_trigger: '.o_knowledge_tree .o_article:contains("Workspace Article") + .o_article:contains("Private Article")',
}, {
    // Check that article has been unfolded and move an article under a redonly article (fails)
    trigger: '.o_article:contains("Private Child")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="workspace"] .o_article_name:contains("Workspace Article")'),
            $('section[data-section="workspace"] .o_article_name:contains("Private Article")'),
        );
    },
}, {
    // Close the move cancelled modal
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal-title:contains("Move cancelled")',
}, {
    // Move a readonly article (fails)
    trigger: '.o_knowledge_tree .o_article:contains("Workspace Article") + .o_article:contains("Private Article")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="workspace"] .o_article_name:contains("Private Article")'),
            $('section[data-section="workspace"] .o_article_name:contains("Workspace Article")'),
        );
    },
}, {
    // Check that article did not move and try to change icon of readable article (fails)
    trigger: '.o_article:contains("Private Article") .o_article_emoji:contains("📄")',
    extra_trigger: '.o_knowledge_tree .o_article:contains("Workspace Article") + .o_article:contains("Private Article")',
}, {
    // Check that emoji picker did not show up
    trigger: 'body:not(:has(.o-EmojiPicker))',
    run: () => {},
}]});

return __exports;
});
;

/**********************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_sidebar_tour.js  *
*  Lines: 952                                                         *
**********************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_sidebar_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { changeInternalPermission, dragAndDropArticle, makeVisible } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


/**
 * Sidebar tour.
 * Tests sidebar features and responsiveness.
 * Todo: add responsiveness checks from usage of moveArticleDialog
 * when select2 will be replaced (can currently not select options)
 */

registry.category("web_tour.tours").add('knowledge_sidebar_tour', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    // Open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
},
// Create a workspace article
{
    // Force the create button to be visible (it's only visible on hover)
    trigger: 'section[data-section="workspace"]',
    run: () => {
        makeVisible('section[data-section="workspace"] .o_section_create');
    },
}, {
    // Create an article in the "Workspace" section
    trigger: 'section[data-section="workspace"] .o_section_create',
}, {
    // Check that the article is created inside the Workspace
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Workspace Article',
}, {
    // Check that the name has been updated in the sidebar
    trigger: '.o_article_active:contains("Workspace Article")',
    run: () => {},
}, {
    // Add content to the article
    trigger: '.note-editable.odoo-editor-editable',
    run: 'text Content of Workspace Article',
},
// Create a private article
{
    // Force the create button to be visible (it's only visible on hover)
    trigger: 'section[data-section="private"]',
    run: () => {
        makeVisible('section[data-section="private"] .o_section_create');
    },
}, {
    // Create an article in the "Private" section
    trigger: 'section[data-section="private"] .o_section_create',
}, {
    // Check that the article is created inside the private section
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Private Article',
},
// Create a shared article
{
    // Check that the shared section does not exists
    trigger: '.o_knowledge_tree:not(:has(section[data-section="shared"]))',
    extra_trigger: '.o_article_active:contains("Private Article")',
    run: () => {},
}, {
    // First create a private one
    trigger: 'section[data-section="private"] .o_section_create',
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text Shared Article',
}, {
    // Open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    // Click on 'Invite'
    trigger: '.o_knowledge_share_panel .btn:contains("Invite")',
}, {
    // Type the invited person's name
    trigger: '.o_field_many2many_tags_email[name=partner_ids] input',
    run: 'text henri@knowledge.com',
}, {
    // Open the simplified create form view
    trigger: '.o-autocomplete--dropdown-menu .o_m2o_dropdown_option_create_edit a',
    run: 'click',
}, {
    // Give an email address to the partner
    trigger: '.o_field_widget[name=email] input',
    run: 'text henri@knowledge.com',
}, {
    // Save the new partner
    trigger: '.o_form_button_save',
}, {
    // Submit the invite wizard
    trigger: 'button:contains("Invite")',
    extra_trigger: '.o_field_tags span.o_badge_text',
}, {
    // Check that the article has been added to a new "Shared" section
    trigger: 'section[data-section="shared"]:contains("Shared Article")',
    run: () => {},
},
// Create a child of a workspace article
{
    // Force the create button to be visible (it's only visible on hover)
    trigger: '.o_article:contains("Workspace Article")',
    run: () => {
        $('.o_article:contains("Workspace Article") a.o_article_create').css('display', 'block');
    },
}, {
    // Create a child
    trigger: '.o_article:contains("Workspace Article") a.o_article_create',
}, {
    // Check that the child has been added
    trigger: '.o_article:contains("Workspace Article") .o_article:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Workspace Child',
},
// Create a child of a private article
{
    // Force the create button to be visible (it's only visible on hover)
    trigger: '.o_article:contains("Private Article")',
    run: () => {
        $('.o_article:contains("Private Article") a.o_article_create').css('display', 'block');
    },
}, {
    // Create a child
    trigger: '.o_article:contains("Private Article") a.o_article_create',
}, {
    // Check that the child has been added
    trigger: '.o_article:contains("Private Article") .o_article:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Private Child 1',
},
// Create a child of a shared article
{
    // Force the create button to be visible (it's only visible on hover)
    trigger: '.o_article:contains("Shared Article")',
    run: () => {
        $('.o_article:contains("Shared Article") a.o_article_create').css('display', 'block');
    },
}, {
    // Create a child
    trigger: '.o_article:contains("Shared Article") a.o_article_create',
}, {
    // Check that the child has been added
    trigger: '.o_article:contains("Shared Article") .o_article:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Shared Child',
},
// Open an article by clicking on it
{
    // Click in the sidebar
    trigger: '.o_article_name:contains("Workspace Article")',
}, {
    // Check that article is correctly opened
    trigger: '.note-editable.odoo-editor-editable:contains("Content of Workspace Article")',
    extra_trigger: '.o_article_active:contains("Workspace Article")',
    run: () => {},
},
// Open an article using the searchBox
{
    // Open the CP
    trigger: '#knowledge_search_bar',
}, {
    // Click on an article
    trigger: '.o_command_name:not(.small):contains("Private Article")',
}, {
    // Check article was opened
    trigger: '.o_article_active .o_article_name:contains("Private Article")',
    run: () => {},
}, 
// Open the trash
{
    trigger: '.o_knowledge_sidebar_trash > div[role="button"]',
}, {
    // Check that trash has been opened
    trigger: '.o_last_breadcrumb_item.active:contains("Trash")',
    run: () => {},
}, {
    // Come back to the form view
    trigger: '.breadcrumb-item.o_back_button',
},
// Add/remove an article to/from the favorites
{
    // Make sure the favorite section does not exists
    trigger: '.o_knowledge_tree:not(:has(section[data-section="favorites"]))',
    run: () => {},
}, {
    // Click on the toggleFavorite button
    trigger: 'a.o_knowledge_toggle_favorite',
}, {
    // Check that the article has been added to the added favorite section
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article")',
    run: () => {},
}, {
    // Click on the toggleFavorite button again
    trigger: 'a.o_knowledge_toggle_favorite',
}, {
    // Check that the favorite section has been removed
    trigger: '.o_knowledge_tree:not(:has(section[data-section="favorites"]))',
    extra_trigger: 'a.o_knowledge_toggle_favorite .fa-star-o',
},
// Unfold/Fold favorite article
{
    // Add article to favorite
    trigger: 'a.o_knowledge_toggle_favorite',
}, {
    // Check that favorite is initially folded, and unfold it
    trigger: 'section[data-section="favorites"] .o_article_caret .fa-caret-right',
    extra_trigger: 'section[data-section="favorites"] .o_article:not(:has(.o_article))',
}, {
    // Check that caret changed and that child is displayed
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article") .o_article_name:contains("Private Child 1")',
    extra_trigger: 'section[data-section="favorites"] .o_article_caret .fa-caret-down',
    run: () => {},
}, {
    // Click on the caret again to refold the article
    trigger: 'section[data-section="favorites"] .o_article_caret',
}, {
    // Check that caret changed and that child is hidden again
    trigger: 'section[data-section="favorites"] .o_article:not(:has(.o_article))',
    extra_trigger: 'section[data-section="favorites"] .o_article_caret .fa-caret-right',
    run: () => {},
}, {
    // Check that article in main tree is still unfolded
    trigger: 'section[data-section="private"] .o_article:contains("Private Child 1")',
    run: () => {},
},

// Create a child from the favorite tree
{
    // Force the create button to be visible (it's only visible on hover)
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article")',
    extra_trigger: 'section[data-section="favorites"] .o_article_caret .fa-caret-right',
    run: () => {
        $('section[data-section="favorites"] .o_article:contains("Private Article") a.o_article_create').css('display', 'block');
    },
}, {
    // Create a child
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article") a.o_article_create',
}, {
    // Check that article has been unfolded
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article") .fa-caret-down',
    run: () => {},
}, {
    // Check that previously existing child is displayed
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article") .o_article_name:contains("Private Child 1")',
    run: () => {},
}, {
    // Check that the child has been added in the favorite tree
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article") .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // Check that the child has been added in the private section
    trigger: 'section[data-section="private"] .o_article:contains("Private Article") .o_article_name:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Private Child 2',
}, {
    // Check that the article has been renamed in the favorite tree
    trigger: 'section[data-section="favorites"] .o_article_name:contains("Private Child 2")',
    run: () => {},
}, {
    // Check that the article has been renamed in the private section
    trigger: 'section[data-section="private"] .o_article_name:contains("Private Child 2")',
    run: () => {},
},
// Fold/unfold an article
{
    // Click on the caret (should be caret down)
    trigger: 'section[data-section="private"] .o_article_caret',
    extra_trigger: 'section[data-section="private"] .o_article_caret .fa-caret-down',
}, {
    // Check that caret changed, and that children are hidden, and that favorite has not been folded
    trigger: 'section[data-section="private"] .o_article:not(:has(.o_article))',
    extra_trigger: 'section[data-section="private"] .o_article_caret .fa-caret-right',
    run: () => {},
}, {
    // Check that favorite has not been folded
    trigger: 'section[data-section="favorites"] .o_article .o_article',
    extra_trigger: 'section[data-section="favorites"] .o_article_handle:contains("Private Article") .fa-caret-down',
}, {
    // Fold favorite article (to later check that unfolding article won't unfold favorite)
    trigger: 'section[data-section="favorites"] .o_article_caret',
}, {
    // Click on the caret again
    trigger: 'section[data-section="private"] .o_article_caret',
}, {
    // Check that articles are shown again
    trigger: 'section[data-section="private"] .o_article .o_article',
    extra_trigger: 'section[data-section="private"] .o_article_caret .fa-caret-down',
    run: () => {},
}, {
    // Check that favorite has not been unfolded
    trigger: 'section[data-section="favorites"] .o_article:not(:has(.o_article))',
    extra_trigger: 'section[data-section="favorites"] .o_article_handle:contains("Private Article") .fa-caret-right',
    run: () => {},
},
// Create a child of a folded article
{
    // Fold article again
    trigger: 'section[data-section="private"] .o_article_caret',
}, {
    trigger: 'section[data-section="private"] .o_article_caret .fa-caret-right',
    run: () => {
        $('section[data-section="private"] .o_article:contains("Private Article") .o_article_create').css('display', 'block');
    }
}, {
    // Click on the create button
    trigger: 'section[data-section="private"] .o_article:contains("Private Article") .o_article_create',
}, {
    // Check that article has been unfolded and that previously existing children are shown
    trigger: 'section[data-section="private"] .o_article .o_article:contains("Private Child 1")',
    extra_trigger: 'section[data-section="private"] .o_article_caret .fa-caret-down',
    run: () => {},
}, {
    // Check that article has been added in both trees
    trigger: 'section[data-section="private"] .o_article .o_article:contains("Untitled")',
    extra_trigger: 'section[data-section="favorites"] .o_article .o_article:contains("Untitled")',
    run: () => {},
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Private Child 3',
},
// Add a random icon
{
    // Force the add icon button to be visible (it's only visible on hover)
    trigger: '.o_knowledge_add_buttons',
    run: () => {
        makeVisible('.o_knowledge_add_icon');
    },
}, {
    // Click on the "add Icon" button
    trigger: '.o_knowledge_add_icon',
}, {
    // Check that the icon has been updated in the sidenar
    trigger: '.o_knowledge_body div[name="icon"]',
    run: () => {
        const bodyIcon = document.querySelector('.o_knowledge_body div[name="icon"]').innerText;
        const sidebarIcon = document.querySelector('.o_article_active .o_article_emoji').innerText;
        if (bodyIcon !== sidebarIcon) {
            console.error("Sidebar icon has not been updated.");
        }
    },
},
// Update icon of active article from sidebar
{
    // Click on the icon in the sidebar
    trigger: '.o_article_active .o_article_emoji',
}, {
    // Choose an icon
    trigger: '.o-Emoji[data-codepoints="🥶"]',
}, {
    // Check that the icon has been updated in both trees in the sidebar
    trigger: 'section[data-section="favorites"] .o_article_active .o_article_emoji:contains("🥶")',
    extra_trigger: 'section[data-section="private"] .o_article_active .o_article_emoji:contains("🥶")',
    run: () => {},
}, {
    // Check that the icon in the body has been updated
    trigger: '.o_knowledge_body div[name="icon"]:contains("🥶")',
    run: () => {},
},
// Update icon of non active article
{
    // Click on the icon in the sidebar
    trigger: '.o_article:contains("Workspace Article") .o_article_emoji',
}, {
    // Choose an icon
    trigger: '.o-Emoji[data-codepoints="🥵"]',
}, {
    // Check that the icon has been updated in the sidebar
    trigger: '.o_article:contains("Workspace Article") .o_article_emoji:contains("🥵")',
    run: () => {},
}, {
    // Check that the icon in the body has not been updated
    trigger: '.o_knowledge_body div[name="icon"]:contains("🥶")',
    run: () => {},
},
// Update icon of locked article (fails)
{
    // Open another article
    trigger: '.o_article_name:contains("Workspace Child")',
}, {
    // Lock the article
    trigger: '#dropdown_tools_panel',
    extra_trigger: '.o_article_active:contains("Workspace Child")',
}, {
    trigger: '.o_knowledge_more_options_panel .btn-lock',
}, {
    // Click on the icon of the active article in the sidebar
    trigger: '.o_article_active .o_article_emoji:contains("📄")',
    extra_trigger: '.breadcrumb-item.active .fa-lock',
}, {
    // Check that emoji picker did not show up
    trigger: 'body:not(:has(.o-EmojiPicker))',
    run: () => {},
},
// Update icon of unlocked article
{
    // Unlock the article
    trigger: '#dropdown_tools_panel',
}, {
    trigger: '.o_knowledge_more_options_panel .btn-lock .fa-unlock',
}, {
    // Click on the icon of the active article in the sidebar
    trigger: '.o_article_active a.o_article_emoji',
    extra_trigger: '.breadcrumb-item.active:not(:has(.fa-lock))',
}, {
    // Choose an icon
    trigger: '.o-Emoji[data-codepoints="😬"]',
}, {
    // Check that the icon has been updated in the sidebar
    trigger: '.o_article:contains("Workspace Child") .o_article_emoji:contains("😬")',
    run: () => {},
},
// Convert article into item
{
    // Open the kebab menu
    trigger: '#dropdown_tools_panel',
}, {
    // Click on convert button
    trigger: '.dropdown-item .fa-tasks',
}, {
    // Check that article has been removed from the sidebar
    trigger: 'section[data-section="workspace"] .o_article:not(:has(.o_article))',
    extra_trigger: 'section[data-section="workspace"] .o_article:contains("Workspace Article"):not(.o_article_has_children)',
    run: () => {},
},
// Favorite an item
{
    // Click on the toggle favorite button
    trigger: '.o_knowledge_toggle_favorite',
}, {
    // Check that item has been added in the favorite section
    trigger: 'section[data-section="favorites"] .o_article:contains("Workspace Child")',
    run: () => {},
},
// Convert item into article
{
    // Open the kebab menu
    trigger: '#dropdown_tools_panel',
}, {
    // Click on convert button
    trigger: '.dropdown-item .fa-sitemap',
}, {
    // Check that article has been readded in the main tree
    trigger: 'section[data-section="workspace"] .o_article:contains("Workspace Child")',
    run: () => {},
},
// Convert a favorite article to an item
{
    // Open the kebab menu
    trigger: '#dropdown_tools_panel',
}, {
    // Click on the convert button
    trigger: '.dropdown-item .fa-tasks',
}, {
    // Check that article has been removed from the main tree but not from the favorite tree
    trigger: 'section[data-section="workspace"] .o_article:not(:has(.o_article))',
    extra_trigger: 'section[data-section="workspace"] .o_article:contains("Workspace Article"):not(.o_article_has_children)',
    run: () => {},
}, {
    // Check that article has not been removed from the favorite tree
    trigger: 'section[data-section="favorites"] .o_article:contains("Workspace Child")',
    run: () => {},
},
// Remove member of child of shared article
{
    // Open the shared child article
    trigger: '.o_article_name:contains("Shared Child")',
}, {
    // Open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
    extra_trigger: '.o_article_active:contains("Shared Child")',
}, {
    // Make remove member button visible
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => {
        document.querySelector('.o_knowledge_share_panel .o_delete.o_remove').style.display = 'block';
    },
}, {
    // Click on the delete member button
    trigger: '.o_knowledge_share_panel .o_delete.o_remove',
}, {
    // Confirm restriction
    trigger: '.modal-footer .btn-primary',
}, {
    // Check that the article did not move
    trigger: 'section[data-section="shared"] .o_article .o_article',
    extra_trigger: '.o_knowledge_share_panel_icon',
},
// Publish child of a shared article
{
    // Open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    extra_trigger: '.o_permission[aria-label="Internal Permission"]',
    run: () => changeInternalPermission('write'),
}, {
    // Check that the article did not move
    trigger: 'section[data-section="shared"] .o_article .o_article',
    run: () => {},
},
// Publish shared article
{
    // Open shared article
    trigger: '.o_article_name:contains("Shared Article")',
}, {
    // Open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
    extra_trigger: '.o_article_active:contains("Shared Article")',
}, {
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('write'),
}, {
    // Check that the article moved to the workspace
    trigger: 'section[data-section="workspace"] .o_article:contains("Shared Article")',
    run: () => {},
}, 
// Restrict workspace article with member
{
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('none'),
}, {
    // Check that article moved to shared
    trigger: 'section[data-section="shared"] .o_article:contains("Shared Article")',
    run: () => {},
},
// Remove member of shared article
{
    // Make remove member button visible
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => {
        document.querySelector('.o_knowledge_share_panel .o_delete.o_remove').style.display = 'block';
    },
}, {
    // Remove member
    trigger: '.o_knowledge_share_panel .o_delete.o_remove',
}, {
    // Check that article moved to private
    trigger: 'section[data-section="private"] .o_article:contains("Shared Article")',
}, {
    // Readd the member to replace the article in the shared section
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    trigger: '.o_knowledge_share_panel .btn:contains("Invite")',
}, {
    trigger: '.o_field_many2many_tags_email[name=partner_ids] input',
    run: 'text henri@knowledge.com',
}, {
    trigger: '.o-autocomplete--dropdown-item:contains("henri@")',
    extra_trigger: '.o-autocomplete--dropdown-menu.show',
}, {
    trigger: 'button:contains("Invite")',
    extra_trigger: '.o_field_tags span.o_badge_text',
},
// Publish child of private article
{
    // Open private child
    trigger: '.o_article_name:contains("Private Child 2")',
}, {
    // Open the share dropown
    trigger: '.o_knowledge_header .btn:contains("Share")',
    extra_trigger: '.o_article_active:contains("Private Child 2")',
}, {
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('read'),
}, {
    // Check that article is still in private
    trigger: 'section[data-section="private"] .o_article .o_article:contains("Private Child 2")',
    run: () => {},
},
// Publish private article
{
    // Open private article
    trigger: '.o_article_name:contains("Private Article")',
}, {
    // Open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
    extra_trigger: '.o_article_active:contains("Private Article")',
}, {
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('read'),
}, {
    // Check that article moved to the workspace
    trigger: 'section[data-section="workspace"] .o_article:contains("Private Article")',
    run: () => {},
},
// Change permission of workspace article to write
{
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('write'),
}, {
    // Check that article did not move
    trigger: 'section[data-section="workspace"] .o_article:contains("Private Article")',
    run: () => {},
},
// Change permission of workspace article to read
{
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('read'),
}, {
    // Check that article did not move
    trigger: 'section[data-section="workspace"] .o_article:contains("Private Article")',
    run: () => {},
}, 
// Restrict workspace article
{
    // Change permission
    trigger: '.o_knowledge_share_panel:not(:has(.fa-spin))',
    run: () => changeInternalPermission('none'),
}, {
    // Check that the article moved to private
    trigger: 'section[data-section="private"] .o_article:contains("Private Article")',
    run: () => {},
},
// Drag and drop child above other child
{
    trigger: 'section[data-section="private"] .o_article .o_article:first:contains("Private Child 1")',
    run: () => {
        dragAndDropArticle(
            $('.o_section[data-section="private"] .o_article_name:contains("Private Child 3")'),
            $('.o_section[data-section="private"] .o_article_name:contains("Private Child 1")'),
        );
    },
}, {
    // Check that children have been reordered in both trees
    trigger: 'section[data-section="favorites"] .o_article .o_article:first:contains("Private Child 3")',
    extra_trigger: 'section[data-section="private"] .o_article .o_article:first:contains("Private Child 3")',
},
// Drag and drop child above root
{
    // Open child article
    trigger: '.o_article_name:contains("Private Child 2")',
}, {
    // Check that article shows "Add Properties" button
    trigger: '.o_knowledge_add_buttons',
    extra_trigger: '.o_article_active:contains("Private Child 2")',
    run: () => {
        if (!document.querySelector('.o_knowledge_add_buttons .o_knowledge_add_properties')) {
            console.error('Child articles should have properties.');
        }
    },
}, {
    trigger: 'section[data-section="private"] .o_article:first:contains("Private Article")',
    run: () => {
        dragAndDropArticle(
            $('.o_section[data-section="private"] .o_article_name:contains("Private Child 2")'),
            $('.o_section[data-section="private"] .o_article_name:contains("Private Article")'),
        );
    },
}, {
    // Check that child became the first private root article
    trigger: '.o_section[data-section="private"] .o_article:not(:has(.o_article:contains("Private Child 2")))',
    extra_trigger: '.o_section[data-section="private"] ul >:first:contains("Private Child 2")',
    run: () => {},
}, {
    // Check that article was removed from children in favorites
    trigger: '.o_section[data-section="favorites"]:not(:has(.o_article:contains("Private Child 2")))',
    run: () => {
        makeVisible('.o_knowledge_add_buttons');
    }
}, {
    // Check that article does not show "Add Properties" button anymore
    trigger: '.o_knowledge_add_buttons:not(:has(button.o_knowledge_add_properties))',
    run: () => {},
},
// Drag and drop root above root
{
    trigger: '.o_section[data-section="private"] .o_article:contains("Private Child 2") + .o_article:contains("Private Article")',
    run: () => {
        dragAndDropArticle(
            $('.o_section[data-section="private"] .o_article_name:contains("Private Article")'),
            $('.o_section[data-section="private"] .o_article_name:contains("Private Child 2")'),
        );
    },
}, {
    // Check that the articles have been reordered
    trigger: '.o_section[data-section="private"] .o_article:contains("Private Article") + .o_article:contains("Private Child 2")',
    run: () => {
        makeVisible('section[data-section="private"] .o_section_create');
    },
},
// Drag and drop root above child
{
    // Create a new article
    trigger: 'section[data-section="private"] .o_section_create',
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text Private Child 4',
}, {
    trigger: '.o_article_active:contains("Private Child 4")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="private"] .o_article_name:contains("Private Child 4")'),
            $('section[data-section="private"] .o_article_name:contains("Private Child 1")'),
        );
    },
}, {
    // Check that the children are correclty ordered
    trigger: 'section[data-section="private"] .o_article:contains("Private Child 3") + .o_article:contains("Private Child 4")',
    extra_trigger: 'section[data-section="private"] .o_article:contains("Private Child 4") + .o_article:contains("Private Child 1")',
    run: () => {},
}, {
    // Check that the children are also ordered in the favorite tree
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Child 3") + .o_article:contains("Private Child 4")',
    extra_trigger: 'section[data-section="favorites"] .o_article:contains("Private Child 4") + .o_article:contains("Private Child 1")',
    run: () => {},
},
// Drag and drop workspace to private
{
    trigger: 'section[data-section="workspace"] .o_article:contains("Workspace Article")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="workspace"] .o_article:contains("Workspace Article")'),
            $('section[data-section="private"]'),
        );
    },
}, {
    // Moving from section should ask for confirmation
    trigger: '.modal-footer .btn-primary',
}, {
    // Check that article moved to the private section
    trigger: 'section[data-section="private"] .o_article:contains("Workspace Article")',
    extra_trigger: 'section[data-section="workspace"]:not(:has(.o_article:contains("Workspace Article")))',
    run: () => {},
}, {
    // Show that empty section message is shown
    trigger: 'section[data-section="workspace"] .o_knowledge_empty_info',
    run: () => {},
},
// Cancel drag and drop
{
    trigger: '.o_knowledge_tree',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="private"] .o_article_name:contains("Workspace Article")'),
            $('section[data-section="workspace"] .o_section_header'),
        );
    },
}, {
    // Cancel the move
    trigger: '.modal-footer .btn-secondary',
}, {
    // Check that the article did not move
    trigger: 'section[data-section="private"] .o_article:contains("Workspace Article")',
    extra_trigger: 'section[data-section="workspace"]:not(:has(.o_article:contains("Workspace Article")))',
    run: () => {},
},
// Drag and drop private to workspace
{
    trigger: '.o_knowledge_tree',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="private"] .o_article_name:contains("Workspace Article")'),
            $('section[data-section="workspace"]'),
        );
    },
}, {
    // Moving from section should ask for confirmation
    trigger: '.modal-footer .btn-primary',
}, {
    // Check that article moved to the workspace section
    trigger: 'section[data-section="workspace"] .o_article:contains("Workspace Article")',
    extra_trigger: 'section[data-section="private"]:not(:has(.o_article:contains("Workspace Article")))',
    run: () => {},
}, {
    // Check that the empty section message disappeared
    trigger: 'section[data-section="workspace"]:not(:has(.o_knowledge_empty_info))',
    run: () => {},
},
// Drag and drop article to shared (fails)
{
    trigger: '.o_article:contains("Private Article")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="private"] .o_article:contains("Private Article")'),
            $('section[data-section="shared"]'),
        );
    },
}, {
    // Close the move cancelled modal
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal-title:contains("Move cancelled")',
},
// Resequence shared articles
{
    trigger: 'section[data-section="private"]',
    run: () => {
        makeVisible('section[data-section="private"] .o_section_create');
    },
}, {
    // Create a new shared article
    trigger: 'section[data-section="private"] .o_section_create',
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text Shared 2',
}, {
    // Share the article
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    trigger: '.o_knowledge_share_panel .btn:contains("Invite")',
}, {
    trigger: '.o_field_many2many_tags_email[name=partner_ids] input',
    run: 'text henri@knowledge.com',
}, {
    trigger: '.o-autocomplete--dropdown-item:contains("henri@")',
    extra_trigger: '.o-autocomplete--dropdown-menu.show',
}, {
    trigger: 'button:contains("Invite")',
    extra_trigger: '.o_field_tags span.o_badge_text',
}, {
    trigger: 'section[data-section="shared"] .o_article:contains("Shared Article") + .o_article:contains("Shared 2")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="shared"] .o_article_name:contains("Shared 2")'),
            $('section[data-section="shared"] .o_article_name:contains("Shared Article")'),
        );
    },
}, {
    // Check that the articles have been resequenced
    trigger: 'section[data-section="shared"] .o_article:contains("Shared 2") + .o_article:contains("Shared Article")',
    run: () => {
        makeVisible('section[data-section="private"] .o_section_create');
    },
},
// Drag and drop article above shared child
{
    // Create a new article
    trigger: 'section[data-section="private"] .o_section_create',
}, {
    // Rename the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text Moved to Share',
}, {
    trigger: '.o_article_active:contains("Moved to Share")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="private"] .o_article_name:contains("Moved to Share")'),
            $('section[data-section="shared"] .o_article_name:contains("Shared Child")'),
        );
    },
}, {
    // Moving under a shared article should ask for confirmation
    trigger: '.modal-footer .btn-primary',
}, {
    // Check that the article has been moved
    trigger: 'section[data-section="shared"] .o_article .o_article:contains("Moved to Share")',
    extra_trigger: 'section[data-section="private"]:not(:has(.o_article:contains("Moved to Share")))',
    run: () => {},
},
// Drag and drop shared child to shared
{
    trigger: '.o_knowledge_tree',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="shared"] .o_article_name:contains("Moved to Share")'),
            $('section[data-section="shared"] .o_article_name:contains("Shared Article")'),
        );
    },
}, {
    // Close the move cancelled modal
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal-title:contains("Move cancelled")',
},
// Drag and drop article to trash
{
    trigger: '.o_knowledge_tree',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="private"] .o_article_name:contains("Private Child 2")'),
            $('.o_section.o_knowledge_sidebar_trash'),
        );
    },
}, {
    // Check that article has been removed from the sidebar
    trigger: '.o_knowledge_tree:not(:has(.o_article:contains("Private Child 2")))',
    run: () => {},
},
// Drag and drop parent of active article to trash
{
    trigger: '.o_article_active:contains("Moved to Share")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="shared"] .o_article_name:contains("Shared Article")'),
            $('.o_section.o_knowledge_sidebar_trash'),
        );
    },
}, {
    // Check that article has been removed from the sidebar
    trigger: '.o_knowledge_tree:not(:has(.o_article:contains("Shared Article")))',
    run: () => {},
}, {
    // Check that user has been redirected to first accessible article
    trigger: '.o_knowledge_tree .o_article:first:has(.o_article_active)',
    run: () => {},
},
// Resequence favorites
{
    trigger: 'section[data-section="favorites"] .o_article:contains("Private Article") + .o_article:contains("Workspace Child")',
    run: () => {
        dragAndDropArticle(
            $('section[data-section="favorites"] .o_article_name:contains("Workspace Child")'),
            $('section[data-section="favorites"] .o_article_name:contains("Private Article")'),
        );
    },
}, {
    // Check that favorites have been resequenced
    trigger: 'section[data-section="favorites"] .o_article:contains("Workspace Child") + .o_article:contains("Private Article")',
    run: () => {},
}]});

return __exports;
});
;

/***********************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_template_tour.js  *
*  Lines: 40                                                           *
***********************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_template_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");


registry.category("web_tour.tours").add("knowledge_load_template", {
    url: "/web",
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(), {
            // open the Knowledge App
            trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
        }, { // click on the main "New" action
            trigger: '.o_knowledge_header .btn:contains("New")',
        }, { // open the template picker dialog
            trigger: '.o_knowledge_helper .o_knowledge_load_template',
        }, { // choose a template
            trigger: '.o_knowledge_template_selector div:contains("My Template")',
        }, { // insert the template
            trigger: 'button:contains("Load Template")'
        }, { // check that the icon has been changed
            trigger: '.o_knowledge_body .o_article_emoji:contains(📚)',
            run: () => {},
        }, { // check that the title of the article has changed
            trigger: '.o_breadcrumb_article_name_container:contains("My Template")',
            run: () => {},
        }, { // check that the body of the article has changed
            trigger: '.o_knowledge_body .note-editable:contains(Lorem ipsum dolor sit amet, consectetur adipisicing elit.)',
            run: () => {},
        }, ...endKnowledgeTour()
    ]
});

return __exports;
});
;

/********************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_tour_utils.js  *
*  Lines: 241                                                       *
********************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_tour_utils', ['@knowledge/components/sidebar/sidebar', '@web_tour/tour_service/tour_utils', '@web_editor/js/editor/odoo-editor/src/utils/utils', '@web/../tests/utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { SORTABLE_TOLERANCE } = require("@knowledge/components/sidebar/sidebar");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");
const { setSelection, boundariesIn } = require("@web_editor/js/editor/odoo-editor/src/utils/utils");
const { insertText } = require("@web/../tests/utils");

const changeInternalPermission = __exports.changeInternalPermission = (permission) => {
    const target = document.querySelector('.o_permission[aria-label="Internal Permission"]');
    target.value = permission;
    target.dispatchEvent(new Event("change"));
};

/**
 * Drag&drop an article in the sidebar
 * @param {$.Element} element
 * @param {$.Element} target
 */
const dragAndDropArticle = __exports.dragAndDropArticle = ($element, $target) => {
    const elementOffset = $element.offset();
    const targetOffset = $target.offset();
    // If the target is under the element, the cursor needs to be in the upper
    // part of the target to trigger the move. If it is above, the cursor needs
    // to be in the bottom part.
    const targetY = targetOffset.top + (targetOffset.top > elementOffset.top ? ($target.outerHeight() - 1) : 0); 

    const element = $element[0].closest("li");
    const target = $target[0];
    element.dispatchEvent(
        new PointerEvent("pointerdown", {
            bubbles: true,
            which: 1,
            clientX: elementOffset.right,
            clientY: elementOffset.top,
        })
    );

    // Initial movement starting the drag sequence
    element.dispatchEvent(
        new PointerEvent("pointermove", {
            bubbles: true,
            which: 1,
            clientX: elementOffset.right,
            clientY: elementOffset.top + SORTABLE_TOLERANCE,
        })
    );

    // Timeouts because sidebar onMove is debounced
    setTimeout(() => {
        target.dispatchEvent(
            new PointerEvent("pointermove", {
                bubbles: true,
                which: 1,
                clientX: targetOffset.right,
                clientY: targetY,
            })
        );

        setTimeout(() => {
            element.dispatchEvent(
                new PointerEvent("pointerup", {
                    bubbles: true,
                    which: 1,
                    clientX: targetOffset.right,
                    clientY: targetY,
                })
            );
        }, 200);
    }, 200);
};

/**
 * Steps to insert an articleLink for the given article, in the first editable
 * html_field found in the given container selector (should have a paragraph
 * as its last element, and the link will be inserted at the position at index
 * offset in the paragraph).
 *
 * @param {string} htmlFieldContainerSelector jquery selector for the container
 * @param {string} articleName name of the article to insert a link for
 * @param {integer} offset position of the command call in the paragraph
 * @returns {Array} tour steps
 */
__exports.appendArticleLink = appendArticleLink; function appendArticleLink(htmlFieldContainerSelector, articleName, offset=0) {
    return [{ // open the command bar
        trigger: `${htmlFieldContainerSelector} .odoo-editor-editable > p:last-child`,
        run: function () {
            openCommandBar(this.$anchor[0], offset);
        },
    }, { // click on the /article command
        trigger: '.oe-powerbox-commandName:contains(Article)',
        run: 'click',
        in_modal: false,
    }, { // select an article in the list
        trigger: `.o_select_menu_item:contains(${articleName})`,
        run: 'click',
        in_modal: false,
    }, { // wait for the choice to be registered
        trigger: `.o_select_menu_toggler_slot:contains(${articleName})`,
        run: () => {},
    }, { // click on the "Insert Link" button
        trigger: '.modal-dialog:contains(Link an Article) .modal-footer button.btn-primary',
        run: 'click'
    }];
}

/**
 * Ensure that the tour does not end on the Knowledge form view by returning to
 * the home menu.
 */
__exports.endKnowledgeTour = endKnowledgeTour; function endKnowledgeTour() {
    return [
        stepUtils.toggleHomeMenu(), {
            trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
            run: () => {},
        }
    ];
}

__exports.makeVisible = makeVisible; function makeVisible(selector) {
    const el = document.querySelector(selector);
    if (el) {
        el.style.setProperty("visibility", "visible", "important");
        el.style.setProperty("opacity", "1", "important");
        el.style.setProperty("display", "block", "important");
    }
}

/**
 * Opens the power box of the editor
 * @param {HTMLElement} paragraph
 * @param {integer} offset position of the command call in the paragraph
 */
__exports.openCommandBar = openCommandBar; function openCommandBar(paragraph, offset=0) {
    const sel = document.getSelection();
    sel.removeAllRanges();
    const range = document.createRange();
    range.setStart(paragraph, offset);
    range.setEnd(paragraph, offset);
    sel.addRange(range);
    paragraph.dispatchEvent(
        new KeyboardEvent("keydown", {
            key: "/",
        })
    );
    const slash = document.createTextNode("/");
    paragraph.prepend(slash);
    sel.removeAllRanges();
    range.setStart(slash, 1);
    range.setEnd(slash, 1);
    sel.addRange(range);
    paragraph.dispatchEvent(
        new InputEvent("input", {
            inputType: "insertText",
            data: "/",
            bubbles: true,
        })
    );
    paragraph.dispatchEvent(
        new KeyboardEvent("keyup", {
            key: "/",
        })
    );
}

__exports.createNewCommentSteps = createNewCommentSteps; function createNewCommentSteps(text) {
    return [{
        // Select some text in the first paragraph
        trigger: '.note-editable p.to-select',
        run: function () {
            setSelection(...boundariesIn(this.$anchor[0]));
        }
    }, {
        // Trigger comment creation with the editor toolbar
        trigger: '.oe-toolbar div[id="comment-line"]',
    }, {
        trigger: '.o_knowledge_comments_popover, .o_knowledge_comment_box',
        run: () => {}
    }, {
        trigger: '.o_knowledge_comments_popover .o-mail-Composer-input, .o-mail-Composer-input',
        run: async () => {
            await insertText('.o-mail-Composer-input', text || 'Hello World');
        }
    }, {
        // Send comment
        trigger: '.o_knowledge_comments_popover .o-mail-Composer-send:not([disabled=""]), .o-mail-Composer-send:not([disabled=""])'
    }, {
        trigger: '.o_knowledge_comment_box[data-id] .o_knowledge_comment_small_ui img, .o_knowledge_comment_box[data-id]',
        run: () => {}
    }, {
        trigger: '.o_knowledge_comment_box[data-id] .o_knowledge_comment_small_ui img, .o_knowledge_comment_box[data-id]',
        run: function () {
            this.$anchor[0].querySelector('.o_knowledge_comment_small_ui img')?.click();
        }
    }, {
        trigger: `.o-mail-Thread :contains(${text || 'Hello World'})`,
        run: () => {}
    },];
}

__exports.answerThreadSteps = answerThreadSteps; function answerThreadSteps(text) {
    return [
        {
            trigger: '.o_knowledge_comments_popover, .o_knowledge_comment_box',
        }, {
            trigger: '.o_knowledge_comments_popover .o-mail-Composer-input, .o-mail-Composer-input',
            run: async () => {
                await insertText('.o-mail-Composer-input', text || 'Hello World');
            }
        }, {
            // Send comment
            trigger: '.o_knowledge_comments_popover .o-mail-Composer-send:not([disabled=""]), .o-mail-Composer-send:not([disabled=""])'
        }, {
            trigger: `.o-mail-Thread :contains(${text || 'Hello World'})`,
            run: () => {}
        }, {
            trigger: '.note-editable'
        }, {
            trigger: '.o_knowledge_comment_box:not(.commenting)',
            run: () => {}
        }
    ];
}

__exports.resolveCommentSteps = resolveCommentSteps; function resolveCommentSteps() {
    return [
        {
            trigger: '.o-mail-Message-actions',
            run: () => {
                makeVisible('.o-mail-Message-actions');
            }
        }, {// Resolve Thread
            trigger: 'button[name="closeThread"]'
        }
    ];
}

return __exports;
});
;

/*******************************************************************
*  Filepath: /sign/static/tests/tours/sign_request_shared_tour.js  *
*  Lines: 99                                                       *
*******************************************************************/
odoo.define('@sign/../tests/tours/sign_request_shared_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("shared_sign_request_tour", {
    test: true,
    url: "/web",
    steps: () => [
        {
            content: "Open Sign APP",
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: "click",
        },
        {
            content: "Remove My Favorites filter",
            trigger: ".o_cp_searchview .o_facet_remove",
            run: "click",
        },
        {
            content: 'Search template "template_1_role"',
            trigger: ".o_cp_searchview input",
            run: "text template_1_role",
        },
        {
            content: "Search Document Name",
            trigger: ".o_searchview_autocomplete .o_menu_item:first",
            run: "click",
        },
        {
            content: "Share the template",
            trigger: '.o_kanban_record_bottom:first button:contains("Share"):first',
            extra_trigger: '.oe_kanban_main:first span:contains("template_1_role")',
            run: "click",
        },
        {
            content: "Go on signing page",
            trigger: ".o_field_CopyClipboardChar",
            run: function () {
                const share_link = this.$anchor.contents()[0].firstChild.textContent;
                // Retrieve the link without the origin to avoid
                // mismatch between localhost:8069 and 127.0.0.1:8069
                // when running the tour with chrome headless
                const regex = "/sign/document/mail/.*";
                const url = share_link.match(regex)[0];
                window.location.href = window.location.origin + url;
            },
        },
        {
            content: "Fill the sign item",
            trigger: "iframe input.o_sign_sign_item",
            run: "text Mitchell Admin",
        },
        {
            content: "Validate & Send Completed Document",
            trigger: ".o_validate_button",
            run: "click",
        },
        {
            content: "Fill name",
            trigger: "#o_sign_public_signer_name_input",
            extra_trigger: '.modal-title:contains("Final Validation")',
            run: "text Mitchell Admin",
        },
        {
            content: "Fill email",
            trigger: "#o_sign_public_signer_mail_input",
            run: "text mitchell.admin@public.com",
        },
        {
            content: "Validate & Send",
            trigger: '.modal-footer button:contains("Validate & Send")',
            run: "click",
        },
        {
            content: "Download Document",
            trigger: "button.btn.btn-primary",
            extra_trigger: '.modal-title:contains("Thank you!")',
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("sign_resend_expired_link_tour", {
    test: true,
    steps: () => [
        {
            trigger: ".btn.btn-primary",
            content: "Click to resend the url",
            extra_trigger: "a:contains(Send a new link)",
            run() {},
        },
    ],
});

return __exports;
});
;

/**********************************************************************
*  Filepath: /sign/static/tests/tours/sign_template_creation_tour.js  *
*  Lines: 189                                                         *
**********************************************************************/
odoo.define('@sign/../tests/tours/sign_template_creation_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function triggerDragEvent(element, type, data = {}) {
    const event = new DragEvent(type, { bubbles: true });
    for (const key in data) {
        Object.defineProperty(event, key, {
            value: data[key],
        });
    }
    element.dispatchEvent(event);
}

function dragAndDropSignItemAtHeight(type, page, height = 0.5, width = 0.5) {
    const iframe = document.querySelector("iframe");
    const iframeDocument = iframe.contentWindow.document;
    const signItemTypeButtons = iframeDocument.querySelectorAll(
        ".o_sign_field_type_toolbar_items .o_sign_field_type_button"
    );
    const from = Array.from(signItemTypeButtons).find((el) => el.innerText === type);

    const to = iframeDocument.querySelector(`.page[data-page-number="${page}"]`);
    const toPosition = to.getBoundingClientRect();
    toPosition.x += iframe.contentWindow.scrollX + to.clientWidth * width;
    toPosition.y += iframe.contentWindow.scrollY + to.clientHeight * height;

    const dataTransferObject = {};
    const dataTransferMock = {
        setData: (key, value) => {
            dataTransferObject[key] = value;
        },
        getData: (key) => {
            return dataTransferObject[key];
        },
        setDragImage: () => {},
    };

    triggerDragEvent(from, "dragstart", {
        dataTransfer: dataTransferMock,
    });

    triggerDragEvent(to, "drop", {
        pageX: toPosition.x,
        pageY: toPosition.y,
        dataTransfer: dataTransferMock,
    });

    triggerDragEvent(from, "dragend");
}

registry.category("web_tour.tours").add("sign_template_creation_tour", {
    test: true,
    url: "/web?debug=1",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Open Sign App",
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: "click",
        },
        {
            content: "Remove My Favorites filter",
            trigger: ".o_cp_searchview .o_facet_remove",
            run: "click",
        },
        {
            content: 'Search template "blank_template"',
            trigger: ".o_cp_searchview input",
            run: "text blank_template",
        },
        {
            content: "Search Document Name",
            trigger: ".o_searchview_autocomplete .o_menu_item:first",
            run: "click",
        },
        {
            content: "Enter Template Edit Mode",
            trigger: '.oe_kanban_main:first span:contains("blank_template")',
            run: "click",
        },
        {
            content: "Wait for iframe to load PDF",
            trigger: "iframe #viewerContainer",
            run: () => {},
        },
        {
            content: "Wait for page to be loaded",
            trigger: "iframe .page",
            run: () => {},
        },
        {
            content: "Drop Signature Item",
            trigger: "iframe body",
            run: function () {
                dragAndDropSignItemAtHeight("Signature", 1, 0.5, 0.25);
            },
        },
        {
            content: "Drop Name Sign Item",
            trigger: "iframe body",
            run: function () {
                dragAndDropSignItemAtHeight("Name", 1, 0.25, 0.25);
            },
        },
        {
            content: "Drop Text Sign Item",
            trigger: "iframe body",
            run: function () {
                dragAndDropSignItemAtHeight("Text", 1, 0.15, 0.25);
            },
        },
        {
            content: "Open popover on name sign item",
            trigger: 'iframe .o_sign_sign_item:contains("Name") .o_sign_item_display',
            run: "click",
        },
        {
            content: "Change responsible",
            trigger: ".o_popover .o_input_dropdown input",
            run: "text employee",
        },
        {
            content: "select employee",
            trigger: '.o_popover .o_input_dropdown .dropdown .dropdown-item:contains("Employee")',
        },
        {
            content: "Validate changes",
            trigger: ".o_popover .o_sign_validate_field_button",
        },
        {
            content: "Drop Selection Sign Item",
            trigger: "iframe body",
            run: function () {
                dragAndDropSignItemAtHeight("Selection", 1, 0.75, 0.25);
            },
        },
        {
            content: "Open popover on Selection sign item",
            trigger: 'iframe .o_sign_sign_item:contains("Selection") .o_sign_item_display',
            run: "click",
        },
        {
            content: "Write new selection option name",
            trigger: ".o_popover .o_input_dropdown input",
            run: "text option",
        },
        {
            content: "Create new selection option",
            trigger: '.o_popover .o_input_dropdown .dropdown a:contains("Create")',
        },
        {
            content: "Check option is added",
            trigger: '.o_popover #o_sign_select_options_input .o_tag_badge_text:contains("option")',
        },
        {
            content: "Validate changes",
            trigger: ".o_popover .o_sign_validate_field_button",
        },
        {
            content: "Open popover on text sign item",
            trigger: "iframe .o_sign_sign_item:contains('Text') .o_sign_item_display",
        },
        {
            content: "Change text placeholder",
            trigger: ".o_popover .o_popover_placeholder input",
            run: "text placeholder",
        },
        {
            content: "Validate changes",
            trigger: ".o_popover .o_sign_validate_field_button",
        },
        {
            content: "Change template name",
            trigger: ".o_sign_template_name_input",
            run: "text filled_template",
        },
        {
            trigger: ".breadcrumb .o_back_button",
        },
    ],
});

return __exports;
});
;

/************************************************************
*  Filepath: /sign/static/tests/tours/sign_widgets_tour.js  *
*  Lines: 85                                                *
************************************************************/
odoo.define('@sign/../tests/tours/sign_widgets_tour', ['@web/core/l10n/translation', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { _t } = require("@web/core/l10n/translation");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("sign_widgets_tour", {
    test: true,
    url: "/web",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Settings",
            trigger: 'a[data-menu-xmlid="base.menu_administration"]',
            run: "click",
        },
        {
            content: "Users",
            trigger: "div#invite_users button.o_web_settings_access_rights",
            run: "click",
        },
        {
            content: "Mitchel",
            trigger: "table.o_list_table td.o_data_cell:contains(Admin)",
            run: "click",
        },

        {
            content: "Preference tab",
            trigger: 'a.nav-link:contains("' + _t("Preferences") + '")',
            run: "click",
        },
        {
            content: "Editor loaded",
            trigger: ".note-editable",
        },
        {
            content: "Click on widget sign",
            trigger: ".o_signature:first",
            run: "click",
        },
        {
            content: "Click on auto button",
            trigger: ".o_web_sign_auto_button",
            run: "click",
        },
        {
            content: "Click on style button",
            trigger: ".o_web_sign_auto_select_style > button",
            run: "click",
        },
        {
            content: "Select a style",
            trigger: ".o_web_sign_auto_select_style .dropdown-item:nth-child(3)",
            run: "click",
        },
        {
            content: "Click on style button",
            trigger: ".o_web_sign_auto_select_style > button",
            run: "click",
        },
        {
            content: "Select a style",
            trigger: ".o_web_sign_auto_select_style .dropdown-item:nth-child(2)",
            run: "click",
        },
        {
            content: "Sign",
            trigger: 'button.btn-primary:contains("Adopt & Sign")',
            extra_trigger: "canvas.jSignature",
            run: function () {
                setTimeout(() => {
                    this.$anchor.click();
                }, 1000);
            },
        },
        ...stepUtils.saveForm(),
    ],
});

return __exports;
});
;

/*****************************************************************
*  Filepath: /sign/static/tests/tours/test_report_modal_tour.js  *
*  Lines: 43                                                     *
*****************************************************************/
odoo.define('@sign/../tests/tours/test_report_modal_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("sign_report_modal_tour", {
    test: true,
    url: "/web",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Open Sign app",
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: "click",
        },
        {
            content: "Open Reports menu",
            trigger: '.o_main_navbar button[data-menu-xmlid="sign.sign_reports"]',
            run: "click",
        },
        {
            content: "Open Green Savings Report",
            trigger: '.dropdown-item[data-menu-xmlid="sign.sign_report_green_savings"]',
            run: "click",
        },
        {
            content: "Open the modal",
            extra_trigger: 'iframe .green-savings-page a[data-bs-target=".modal_green_savings"]',
            trigger: 'iframe a:contains("How are these results calculated?")',
            run: "click",
        },
        {
            trigger: "iframe .modal_green_savings.show",
            run: () => {},
        },
    ],
});

return __exports;
});
;

/**************************************************************
*  Filepath: /sign/static/tests/tours/test_sign_flow_tour.js  *
*  Lines: 113                                                 *
**************************************************************/
odoo.define('@sign/../tests/tours/test_sign_flow_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add("test_sign_flow_tour", {
    test: true,
    url: "/web",
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            content: "Open Sign APP",
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: "click",
        },
        {
            content: "Remove My Favorites filter",
            trigger: ".o_cp_searchview .o_facet_remove",
            run: "click",
        },
        {
            content: 'Search template "template_1_roles"',
            trigger: ".o_cp_searchview input",
            run: "text template_1_role(2)",
            position: "bottom",
        },
        {
            content: "Search Document Name",
            trigger: ".o_searchview_autocomplete .o_menu_item:first",
            run: "click",
        },
        {
            content: "list view",
            trigger: "button.o_list",
            run: "click",
        },
        {
            content: "Click Sign Now",
            extra_trigger: '.o_list_button button:contains("Sign Now")',
            trigger: "button:contains('Sign Now')",
            run: "click",
        },
        {
            content: "Click sign",
            trigger: "button[name='sign_directly']",
            run: "click",
        },
        {
            content: "Click to start",
            trigger: 'iframe .o_sign_sign_item_navigator:contains("Click to start")',
            position: "bottom",
        },
        {
            trigger: "iframe input.o_sign_sign_item:focus",
            auto: true,
            run() {},
        },
        {
            content: "Fill the sign item",
            trigger: "iframe input.o_sign_sign_item",
            run: "text Mitchell Admin",
        },
        {
            content: "Click next 1",
            trigger: 'iframe .o_sign_sign_item_navigator:contains("next")',
            run: "click",
        },
        {
            content: "Click sign it",
            trigger: 'iframe .o_sign_sign_item_navigator:contains("sign it")',
            run: "click",
        },
        {
            trigger: "iframe button.o_sign_sign_item:has(> img)",
            extra_trigger: "iframe :not(:has(.o_sign_sign_item_navigator))",
            auto: true,
        },
        {
            content: "Click on auto button",
            trigger: ".o_web_sign_auto_button",
            run: "click",
        },
        {
            content: "Sign",
            trigger: 'button.btn-primary:contains("Sign all")',
            extra_trigger: "canvas.jSignature",
            run() {
                setTimeout(() => {
                    this.$anchor.click();
                }, 1000);
            },
        },
        {
            content: "Validate & Send Completed Document",
            extra_trigger: ".o_sign_validate_banner",
            trigger: "button:contains('Validate & Send Completed Document')",
            run: "click",
        },
        {
            content: "view",
            extra_trigger: ".modal-dialog",
            trigger: ".modal-footer button.btn-primary",
            alt_trigger: ".modal-footer button.btn-secondary",
            run: "click",
        },
    ],
});

return __exports;
});
;

/***************************************************************************
*  Filepath: /sign/static/tests/tours/translate_sign_instructions_tour.js  *
*  Lines: 20                                                               *
***************************************************************************/
odoo.define('@sign/../tests/tours/translate_sign_instructions_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("translate_sign_instructions", {
    test: true,
    steps: () => [
        {
            content: "Translations must be loaded",
            trigger: 'iframe .o_sign_sign_item_navigator:contains("Cliquez pour commencer")',
            run: () => null, // it's a check
        },
    ],
});

return __exports;
});
;

/*************************************************************************
*  Filepath: /planning/static/tests/tours/planning_split_shift_tours.js  *
*  Lines: 98                                                             *
*************************************************************************/
odoo.define('@planning/../tests/tours/planning_split_shift_tours', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('planning_split_shift_week', {
    url: '/web?debug=tests',
    test: true,
    steps: () => [{
    trigger: '.o_app[data-menu-xmlid="planning.planning_menu_root"]',
    content: "Let's start managing your employees' schedule!",
    position: 'bottom',
}, {
    trigger: ".scale_button_selection",
    content: "The initial default scale should be week",
    run() {
        const subjectValue = document.querySelector('.scale_button_selection').textContent;
        if (subjectValue !== "Week") {
            console.error(
                `Default scale should be week (actual: ${subjectValue})`
            );
        }
    },
},{
    trigger: ".o_searchview_dropdown_toggler",
    content: "Open Filter",
}, {
    trigger: ".o_add_custom_filter",
    content: "Click on custom filter",
}, {
    trigger: ".o_model_field_selector",
    content: "Write domain excluding open shifts",
    run() {
        const input = document.querySelector(".o_domain_selector_debug_container textarea")
        input.value = '[("resource_id", "!=", False)]';
        input.dispatchEvent(new Event("change", { bubbles: true, cancelable: false }));
    }
}, {
    trigger: ".modal-footer > .btn-primary",
    content: "Add custom filter",
}, {
    trigger: ".o_searchview_input",
    content: "Search planning shifts assigned to Aramis",
    run: "text Aramis",
}, {
    trigger: ".o_menu_item.dropdown-item > a:not(.o_expand)",
    content: "Select filter resource = Aramis",
    run: 'click',
}, {
    trigger: ".o_searchview_input",
    content: "Search planning shifts assigned to Athos",
    run: "text Athos",
}, {
    trigger: ".o_menu_item.dropdown-item > a:not(.o_expand)",
    content: "Select filter resource = Athos",
    run: 'click',
}, {
    trigger: ".o_searchview_input",
    content: "Search planning shifts assigned to Porthos",
    run: "text Porthos",
}, {
    trigger: ".o_menu_item.dropdown-item > a:not(.o_expand)",
    content: "Select filter resource = Porthos",
    run: 'click',
}, {
    trigger: ".o_gantt_pill_split_tool[data-split-tool-pill-id='__pill__1_0']",
    content: "Split the slot assigned to Aramis after one day",
    run: 'click',
}, {
    trigger: ".o_gantt_pill_wrapper[data-pill-id='__pill__4']",
    content: "Wait for the new shift to appear",
    run() {},
}, {
    trigger: ".o_gantt_pill_split_tool[data-split-tool-pill-id='__pill__3_1']",
    content: "Split the slot assigned to Athos after two days",
    run: 'click',
}, {
    trigger: ".o_gantt_pill_wrapper[data-pill-id='__pill__5']",
    content: "Wait for the new shift to appear",
    run() {},
}, {
    trigger: ".o_gantt_pill_split_tool[data-split-tool-pill-id='__pill__3_0']",
    content: "Split the first slot assigned to Athos after one day",
    run: 'click',
}, {
    trigger: ".o_gantt_pill_wrapper[data-pill-id='__pill__6']",
    content: "Wait for the new shift to appear",
    run() {},
}, {
    trigger: ".o_gantt_pill_split_tool[data-split-tool-pill-id='__pill__6_0']",
    content: "Split the first slot assigned to Porthos after one day",
    run: 'click',
}]});

return __exports;
});
;

/*******************************************************************
*  Filepath: /planning/static/tests/tours/planning_tests_tours.js  *
*  Lines: 213                                                      *
*******************************************************************/
odoo.define('@planning/../tests/tours/planning_tests_tours', ['@odoo/owl', '@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { markup } = require("@odoo/owl");
const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('planning_test_tour', {
    url: '/web',
    test: true,
    steps: () => [{
    trigger: '.o_app[data-menu-xmlid="planning.planning_menu_root"]',
    content: "Let's start managing your employees' schedule!",
    position: 'bottom',
}, {
    trigger: ".o_gantt_button_add",
    content: markup("Let's create your first <b>shift</b>."),
    id: 'project_planning_start',
}, {
    trigger: ".o_field_widget[name='resource_id'] input",
    content: markup("Assign this shift to your <b>resource</b>, or leave it open for the moment."),
    run: 'text Aaron',
}, {
    trigger: ".o-autocomplete--dropdown-item > a:contains('Aaron')",
    auto: true,
    in_modal: false,
}, {
    trigger: ".o_field_widget[name='role_id'] input",
    content: markup("Select the <b>role</b> your employee will have (<i>e.g. Chef, Bartender, Waiter, etc.</i>)."),
    run: 'text Developer',
}, {
    trigger: ".o-autocomplete--dropdown-item > a:contains('Developer')",
    auto: true,
    in_modal: false,
}, {
    trigger: ".o_field_widget[name='start_datetime'] input",
    content: "Set start datetime",
    run: function (actions) {
        const input = this.$anchor[0];
        input.value = input.value.replace(/(\d{2}:){2}\d{2}/g, '08:00:00');
        input.dispatchEvent(new InputEvent('input', {
            bubbles: true,
        }));
        input.dispatchEvent(new Event("change", { bubbles: true, cancelable: false }));
    }
}, {
    trigger: "input[data-field=end_datetime]",
    content: "Set end datetime",
    run: function (actions) {
        const input = this.$anchor[0];
        input.value = input.value.replace(/(\d{2}:){2}\d{2}/g, '11:59:59');
        input.dispatchEvent(new InputEvent('input', {
            bubbles: true,
        }));
        input.dispatchEvent(new Event("change", { bubbles: true, cancelable: false }));
    }
}, {
    trigger: "div[name='template_creation'] input",
    content: "Save this shift as a template",
    run: function (actions) {
        if (!this.$anchor.prop('checked')) {
            actions.click(this.$anchor);
        }
    },
}, {
    trigger: "button[special='save']",
    content: "Save this shift once it is ready.",
}, {
    trigger: ".o_gantt_pill :contains('11:59')",
    content: markup("<b>Drag & drop</b> your shift to reschedule it. <i>Tip: hit CTRL (or Cmd) to duplicate it instead.</i> <b>Adjust the size</b> of the shift to modify its period."),
    auto: true,
    run: function () {
        if (this.$anchor.length) {
            const expected = "8:00 AM - 11:59 AM (4h)";
            // Without the replace below, this step could break since luxon
            // (via Intl) uses sometimes U+202f instead of a simple space.
            // Note: U+202f is a narrow non-break space.
            const actual = this.$anchor[0].textContent.replace(/\u202f/g, " ");
            if (!actual.startsWith(expected)) {
                console.error("Test in gantt view doesn't start as expected. Expected : '" + expected + "', actual : '" + actual + "'");
            }
        } else {
            console.error("Not able to select pill ending at 11h59");
        }
    }
}, {
    trigger: ".o_gantt_button_send_all",
    content: markup("If you are happy with your planning, you can now <b>send</b> it to your employees."),
}, {
    trigger: "button[name='action_check_emails']",
    content: markup("<b>Publish & send</b> your planning to make it available to your employees."),
}, {
    trigger: ".o_gantt_row_header:contains('Aaron') .o_gantt_progress_bar",
    content: "See employee progress bar",
    auto: true,
    run: function () {
        const $progressbar = this.$anchor;
        if ($progressbar.length) {
            if ($progressbar[0].querySelector("span").style.width === '') {
                console.error("Progress bar should be displayed");
            }
            if (!$progressbar[0].classList.contains("o_gantt_group_success")) {
                console.error("Progress bar should be displayed in success");
            }
        } else {
            console.error("Not able to select progressbar");
        }
    }
}, {
    trigger: ".o_gantt_button_copy_previous_week",
    content: "Copy previous week if you want to follow previous week planning schedule",
    run: 'click',
}, {
    id: "planning_check_format_step",
    trigger: ".o_gantt_pill span:contains(Developer)",
    content: "Check naming format of resource and role when grouped",
    auto: true,
    run: function () {}
}, {
    trigger: ".o_gantt_button_auto_plan",
    content: "Click on Auto Plan button to assign open shifts to employees",
    run: 'click',
}, {
    id: "planning_check_format_step",
    trigger: ".o_gantt_pill.opacity-25",
    content: "Check that the filter is applied",
    auto: true,
    run: function () {},
}]});

registry.category("web_tour.tours").add('planning_shift_switching_backend', {
    url: '/web',
    test: true,
    steps: () => [{
    trigger: '.o_app[data-menu-xmlid="planning.planning_menu_root"]',
    content: "Get in the planning app",
}, {
    trigger: '.o_gantt_pill :contains("bert")',
    content: "Click on one of your shifts in the gantt view",
},
{
    trigger: ".popover-footer button",
    content: "Click on the 'Edit' button in the popover",
    run: 'click',
},
{
    trigger: 'button[name="action_switch_shift"]',
    content: "Click on the 'Switch Shift' button on the Gantt Form view modal",
}, {
    trigger: 'div.o_view_scale_selector > .scale_button_selection',
    content: 'Toggle the view scale selector',
}, {
    trigger: 'div.o_view_scale_selector > .dropdown-menu',
    content: 'Click on the dropdown button to change the scale of the gantt view',
    extra_trigger: 'div.o_view_scale_selector .o_scale_button_day',
}, {
    trigger: '.o_gantt_pill :contains("bert")',
    content: "Click on the unwanted shift in the gantt view again",
},
{
    trigger: ".popover-footer button",
    content: "Click again on the 'Edit' button in the popover",
    run: 'click',
},
{
    trigger: '.alert-warning:contains("The employee assigned would like to switch shifts with someone else.")',
    content: "Check that the warning has been shown",
}, {
    trigger: '.btn-close',
    content: "Click on the close button to hide the shift form modal",
}, {
    trigger: '.o_planning_gantt',
    isCheck: true,
}]});

registry.category("web_tour.tours").add('planning_assigning_unwanted_shift_backend', {
    url: '/web',
    test: true,
    steps: () => [{
    trigger: '.o_app[data-menu-xmlid="planning.planning_menu_root"]',
    content: "Get in the planning app",
}, {
    trigger: '.o_gantt_pill :contains("bert")',
    content: "Click on the unwanted shift of the employee",
},
{
    trigger: ".popover-footer button",
    content: "Click on the 'Edit' button in the popover",
    run: 'click',
},
{
    trigger: ".o_field_widget[name='resource_id'] input",
    content: "Assign this shift to another employee.",
    run: 'text joseph',
}, {
    trigger: ".o-autocomplete--dropdown-item > a:contains('joseph')",
    auto: true,
    in_modal: false,
}, {
    trigger: "button[special='save']",
    content: "Save this shift once it is ready.",
}, {
    trigger: '.o_gantt_pill :contains("joseph")',
    content: "Click again on the newly assigned shift",
}, {
    trigger: '.o_popover',
    content: "Check the popover opened",
    isCheck: true,
}]});

return __exports;
});
;

/************************************************************
*  Filepath: /calendar/static/tests/tours/calendar_tour.js  *
*  Lines: 172                                               *
************************************************************/
odoo.define('@calendar/../tests/tours/calendar_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

const todayDate = function () {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const day = String(now.getDate()).padStart(2, "0");

    return `${month}/${day}/${year} 10:00:00`;
};

registry.category("web_tour.tours").add("calendar_appointments_hour_tour", {
    url: "/web",
    test: true,
    steps: () => [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="calendar.mail_menu_calendar"]',
            content: "Open Calendar",
            run: "click",
        },
        {
            trigger: ".o-calendar-button-new",
            content: "Create a new event",
            run: "click",
        },
        {
            trigger: "#name_0",
            content: "Give a name to the new event",
            run: "text TEST EVENT",
        },
        {
            trigger: "#start_0",
            content: "Give a date to the new event",
            run: `text ${todayDate()}`,
        },
        {
            trigger: "#duration_0",
            content: "Give a duration to the new event",
            run: "text 02:00",
        },
        {
            trigger: ".fa-cloud-upload",
            content: "Save the new event",
            run: "click",
        },
        {
            trigger: ".o_back_button",
            content: "Go back to Calendar view",
            run: "click",
        },
        {
            trigger: '.scale_button_selection',
            content: "Click to change calendar view",
            run: "click",
        },
        {
            trigger: '.dropdown-item:contains("Month")',
            content: "Change the calendar view to Month",
            run: "click",
        },
        {
            trigger: '.fc-day-header:contains("Mon")',
            content: "Check the day is properly displayed",
        },
        {
            trigger: '.fc-time:contains("10:00")',
            content: "Check the time is properly displayed",
        },
        {
            trigger: '.o_event_title:contains("TEST EVENT")',
            content: "Check the event title",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("test_calendar_delete_tour", {
    test: true,
    steps: () => [
        {
            content: "Select filter (everybody)",
            trigger: 'div[data-value="all"] input',
        },
        {
            content: "Click on the event (focus + waiting)",
            trigger: 'a .fc-content:contains("Test Event")',
            async run() {
                $('a .fc-content:contains("Test Event")').click();
                await new Promise((r) => setTimeout(r, 1000));
                $('a .fc-content:contains("Test Event")').click();
            },
        },
        {
            content: "Delete the event",
            trigger: ".o_cw_popover_delete",
        },
        {
            content: "Validate the deletion",
            trigger: 'button:contains("Delete")',
            async run() {
                $('button:contains("Delete")').click();
                await new Promise((r) => setTimeout(r, 1000));
            },
        },
    ],
});

registry.category("web_tour.tours").add("test_calendar_decline_tour", {
    test: true,
    steps: () => [
        {
            content: "Click on the event (focus + waiting)",
            trigger: 'a .fc-content:contains("Test Event")',
            async run() {
                $('a .fc-content:contains("Test Event")').click();
                await new Promise((r) => setTimeout(r, 1000));
                $('a .fc-content:contains("Test Event")').click();
            },
        },
        {
            content: "Delete the event",
            trigger: ".o_cw_popover_delete",
        },
        {
            content: "Wait declined status",
            trigger: ".o_attendee_status_declined",
            isCheck: true,
        },
    ],
});

registry.category("web_tour.tours").add("test_calendar_decline_with_everybody_filter_tour", {
    test: true,
    steps: () => [
        {
            content: "Select filter (everybody)",
            trigger: 'div[data-value="all"] input',
        },
        {
            content: "Click on the event (focus + waiting)",
            trigger: 'a .fc-content:contains("Test Event")',
            async run() {
                $('a .fc-content:contains("Test Event")').click();
                await new Promise((r) => setTimeout(r, 1000));
                $('a .fc-content:contains("Test Event")').click();
            },
        },
        {
            content: "Delete the event",
            trigger: ".o_cw_popover_delete",
        },
        {
            content: "Select filter (everybody)",
            trigger: 'div[data-value="all"] input',
        },
        {
            content: "Wait declined status",
            trigger: ".o_attendee_status_declined",
            isCheck: true,
        },
    ],
});

return __exports;
});
;

/******************************************************************
*  Filepath: /survey/static/tests/tours/certification_failure.js  *
*  Lines: 123                                                     *
******************************************************************/
odoo.define('@survey/../tests/tours/certification_failure', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

/**
 * Speed up fade-in fade-out to avoid useless delay in tests.
*/
function patchSurveyWidget() {
    const SurveyFormWidget = odoo.loader.modules.get('@survey/js/survey_form')[Symbol.for('default')]
    SurveyFormWidget.include({
        _submitForm: function () {
            this.fadeInOutDelay = 0;
            return this._super.apply(this, arguments);
        }
    });
}

/**
 * This tour will test that, for the demo certification allowing 2 attempts, a user can
 * try and fail twice and will no longer be able to take the certification.
 */

const { registry } = require("@web/core/registry");

var patch = [{
    content: "Patching Survey Widget",
    trigger: 'body',
    run: function(){
        patchSurveyWidget();
    }
}]

var failSteps = [{ // Page-1
    content: "Clicking on Start Certification",
    trigger: 'button.btn.btn-primary.btn-lg:contains("Start Certification")',
}, { // Question: Do we sell Acoustic Bloc Screens?
    content: "Selecting answer 'No'",
    trigger: 'div.js_question-wrapper:contains("Do we sell Acoustic Bloc Screens") label:contains("No")',
}, { // Question: Select all the existing products
    content: "Ticking answer 'Fanta'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Fanta")'
}, {
    content: "Ticking answer 'Drawer'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Drawer")'
}, {
    content: "Ticking answer 'Conference chair'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Conference chair")'
}, { // Question: Select all the available customizations for our Customizable Desk
    content: "Ticking answer 'Color'",
    trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Color")'
}, {
    content: "Ticking answer 'Height'",
    trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Height")'
}, { // Question: How many versions of the Corner Desk do we have?
    content: "Selecting answer '2'",
    trigger: 'div.js_question-wrapper:contains("How many versions of the Corner Desk do we have") label:contains("2")',
}, { // Question: Do you think we have missing products in our catalog? (not rated)
    content: "Missing products",
    trigger: 'div.js_question-wrapper:contains("Do you think we have missing products in our catalog") textarea',
    run: "text I don't know products enough to be able to answer that",
}, { // Page-2 Question: How much do we sell our Cable Management Box?
    content: "Selecting answer '$80'",
    trigger: 'div.js_question-wrapper:contains("How much do we sell our Cable Management Box") label:contains("$80")',
}, { // Question: Select all the products that sell for $100 or more
    content: "Ticking answer 'Corner Desk Right Sit'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Corner Desk Right Sit")'
}, {
    content: "Ticking answer 'Desk Combination'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Desk Combination")'
}, {
    content: "Ticking answer 'Office Chair Black'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Office Chair Black")'
}, { // Question: What do you think about our prices (not rated)?
    trigger: 'div.js_question-wrapper:contains("What do you think about our prices") label:contains("Correctly priced")',
}, { // Page-3 Question: How many days is our money-back guarantee?
    content: "Inputting answer '60'",
    trigger: 'div.js_question-wrapper:contains("How many days is our money-back guarantee") input',
    run: 'text 60'
}, { // Question: If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it?
    content: "Inputting answer '01/06/2020'",
    trigger: 'div.js_question-wrapper:contains("If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it") input',
    run: 'text 01/06/2020'
}, { // Question: If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire?
    content: "Inputting answer '01/06/2021 00:00:01'",
    trigger: 'div.js_question-wrapper:contains("If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire") input',
    run: 'text 01/06/2021 00:00:01'
}, { // Question: What day to you think is best for us to start having an annual sale (not rated)?
    trigger: 'div.js_question-wrapper:contains("What day to you think is best for us to start having an annual sale (not rated)") input',
}, { // Question: What day and time do you think most customers are most likely to call customer service (not rated)?
    trigger: 'div.js_question-wrapper:contains("What day and time do you think most customers are most likely to call customer service (not rated)") input',
}, { // Question: How many chairs do you think we should aim to sell in a year (not rated)?
    content: "Inputting answer '0'",
    trigger: 'div.js_question-wrapper:contains("How many chairs do you think we should aim to sell in a year (not rated)") input',
    run: 'text 0'
}, {
    content: "Finish Survey",
    trigger: 'button[type="submit"]',
}];

var retrySteps = [{
    trigger: 'a:contains("Retry")'
}];

var lastSteps = [{
    trigger: 'h1:contains("Thank you!")',
    run: function () {
        if ($('a:contains("Retry")').length === 0) {
            $('h1:contains("Thank you!")').addClass('tour_success');
        }
    }
}, {
    trigger: 'h1.tour_success',
    isCheck: true,
}];

registry.category("web_tour.tours").add('test_certification_failure', {
    test: true,
    url: '/survey/start/4ead4bc8-b8f2-4760-a682-1fde8daaaaac',
    steps: () => [].concat(patch, failSteps, retrySteps, failSteps, lastSteps) });

return __exports;
});
;

/******************************************************************
*  Filepath: /survey/static/tests/tours/certification_success.js  *
*  Lines: 111                                                     *
******************************************************************/
odoo.define('@survey/../tests/tours/certification_success', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

/**
 * Speed up fade-in fade-out to avoid useless delay in tests.
 */
function patchSurveyWidget() {
    const SurveyFormWidget = odoo.loader.modules.get('@survey/js/survey_form')[Symbol.for('default')]
    SurveyFormWidget.include({
        _submitForm: function () {
            this.fadeInOutDelay = 0;
            return this._super.apply(this, arguments);
        }
    });
}

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_certification_success', {
    test: true,
    url: '/survey/start/4ead4bc8-b8f2-4760-a682-1fde8daaaaac',
    steps: () => [{
        content: "Patching Survey Widget",
        trigger: 'body',
        run: function(){
            patchSurveyWidget();
        }
    }, { // Page-1
        content: "Clicking on Start Certification",
        trigger: 'button.btn.btn-primary.btn-lg:contains("Start Certification")',
    }, { // Question: Do we sell Acoustic Bloc Screens?
        content: "Selecting answer 'Yes'",
        trigger: 'div.js_question-wrapper:contains("Do we sell Acoustic Bloc Screens") label:contains("Yes")',
    }, { // Question: Select all the existing products
        content: "Ticking answer 'Chair floor protection'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Chair floor protection")'
    }, {
        content: "Ticking answer 'Drawer'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Drawer")'
    }, {
        content: "Ticking answer 'Conference chair'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Conference chair")'
    }, { // Question: Select all the available customizations for our Customizable Desk
        content: "Ticking answer 'Color'",
        trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Color")'
    }, {
        content: "Ticking answer 'Legs'",
        trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Legs")'
    }, { // Question: How many versions of the Corner Desk do we have?
        content: "Selecting answer '2'",
        trigger: 'div.js_question-wrapper:contains("How many versions of the Corner Desk do we have") label:contains("2")',
    }, { // Question: Do you think we have missing products in our catalog? (not rated)
        content: "Missing products",
        trigger: 'div.js_question-wrapper:contains("Do you think we have missing products in our catalog") textarea',
        run: "text I think we should make more versions of the customizable desk, it's such an amazing product!",
    }, { // Page-2 Question: How much do we sell our Cable Management Box?
        content: "Selecting answer '$80' (wrong one)",
        trigger: 'div.js_question-wrapper:contains("How much do we sell our Cable Management Box") label:contains("$80")',
    }, { // Question: Select all the products that sell for $100 or more
        content: "Ticking answer 'Corner Desk Right Sit'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Corner Desk Right Sit")'
    }, {
        content: "Ticking answer 'Desk Combination'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Desk Combination")'
    }, {
        content: "Ticking answer 'Large Desk'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Large Desk")'
    }, { // Question: What do you think about our prices (not rated)?
        content: "Selecting answer 'Underpriced'",
        trigger: 'div.js_question-wrapper:contains("What do you think about our prices") label:contains("Underpriced")',
    }, { // Page-3 Question: How many days is our money-back guarantee?
        content: "Inputting answer '30'",
        trigger: 'div.js_question-wrapper:contains("How many days is our money-back guarantee") input',
        run: 'text 30'
    }, { // Question: If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it?
        content: "Inputting answer '01/08/2020'",
        trigger: 'div.js_question-wrapper:contains("If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it") input',
        run: 'text 01/08/2020'
    }, { // Question: If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire?
        content: "Inputting answer '01/07/2021 00:00:01'",
        trigger: 'div.js_question-wrapper:contains("If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire") input',
        run: 'text 01/07/2021 00:00:01'
    }, { // Question: What day to you think is best for us to start having an annual sale (not rated)?
        content: "Inputting answer '01/01/2021'",
        trigger: 'div.js_question-wrapper:contains("What day to you think is best for us to start having an annual sale (not rated)") input',
        run: 'text 01/01/2021'
    }, { // Question: What day and time do you think most customers are most likely to call customer service (not rated)?
        content: "Inputting answer '01/01/2021 13:00:01'",
        trigger: 'div.js_question-wrapper:contains("What day and time do you think most customers are most likely to call customer service (not rated)") input',
        run: 'text 01/01/2021 13:00:01'
    }, { // Question: How many chairs do you think we should aim to sell in a year (not rated)?
        content: "Inputting answer '1000'",
        trigger: 'div.js_question-wrapper:contains("How many chairs do you think we should aim to sell in a year (not rated)") input',
        run: 'text 1000'
    }, {
        content: "Finish Survey",
        trigger: 'button[type="submit"]',
    }, {
        content: "Thank you",
        trigger: 'h1:contains("Thank you!")',
    }, {
        content: "test passed",
        trigger: 'div:contains("Congratulations, you have passed the test!")',
        isCheck: true,
    }
]});

return __exports;
});
;

/***************************************************
*  Filepath: /survey/static/tests/tours/survey.js  *
*  Lines: 74                                       *
***************************************************/
odoo.define('@survey/../tests/tours/survey', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_survey', {
    test: true,
    url: '/survey/start/b137640d-14d4-4748-9ef6-344caaaaaae',
    steps: () => [
    // Page-1
    {
        content: 'Click on Start',
        trigger: 'button.btn:contains("Start")',
    }, {
        content: 'Answer Where do you live',
        trigger: 'div.js_question-wrapper:contains("Where do you live") input',
        run: 'text Mordor-les-bains',
    }, {
        content: 'Answer Where do you live',
        trigger: 'div.js_question-wrapper:contains("When is your date of birth") input',
        run: 'text 05/05/1980',
    }, {
        content: 'Answer How frequently do you buy products online',
        trigger: 'div.js_question-wrapper:contains("How frequently do you buy products online") label:contains("Once a month")',
    }, {
        content: 'Answer How many times did you order products on our website',
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website") input',
        run: 'text 12',
    }, {
        content: 'Submit and go to Next Page',
        trigger: 'button[value="next"]',
    },
    // Page-2
    {
        content: 'Answer Which of the following words would you use to describe our products (High Quality)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality")',
    }, {
        content: 'Answer Which of the following words would you use to describe our products (Good value for money)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money")',
    }, {
        content: 'Answer What do your think about our new eCommerce (The new layout and design is fresh and up-to-date)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") td:first',
    }, {
        content: 'Answer What do your think about our new eCommerce (It is easy to find the product that I want)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The tool to compare the products is useful to make a choice)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") td:eq(3)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The checkout process is clear and secure)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (I have added products to my wishlist)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") td:last',
    }, {
        content: 'Answer Do you have any other comments, questions, or concerns',
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: 'text This is great. Really.',
    }, {
        content: 'Click Submit and finish the survey',
        trigger: 'button[value="finish"]',
    },
    // Final page
    {
        content: 'Thank you',
        trigger: 'h1:contains("Thank you!")',
        isCheck: true,
    }
]});

return __exports;
});
;

/*********************************************************************************
*  Filepath: /survey/static/tests/tours/survey_chained_conditional_questions.js  *
*  Lines: 94                                                                     *
*********************************************************************************/
odoo.define('@survey/../tests/tours/survey_chained_conditional_questions', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { TourError } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('test_survey_chained_conditional_questions', {
    test: true,
    url: '/survey/start/3cfadce3-3f7e-41da-920d-10fa0eb19527',
    steps: () => [
    {
        content: 'Click on Start',
        trigger: 'button.btn:contains("Start")',
    }, {
        content: 'Answer Q1 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 1")',
    }, {
        content: 'Answer Q2 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q2") label:contains("Answer 1")',
        extra_trigger: 'div.js_question-wrapper:contains("Q4")',
    }, {
        content: 'Answer Q3 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q3") label:contains("Answer 1")',
    }, {
        content: 'Answer Q1 with Answer 3',  // This should hide Q2 and Q4 but not Q3.
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 3")',
    }, {
        content: 'Check that Q2 was hidden',
        trigger: 'div.js_question-wrapper:contains("Q3")',
        run : () => {
            expectHiddenQuestion("Q2");
            expectHiddenQuestion("Q4");
        },
    }, {
        content: 'Answer Q3 with Answer 2',
        trigger: 'div.js_question-wrapper:contains("Q3") label:contains("Answer 2")',
    }, {
        content: 'Answer Q1 with Answer 2',  // This should hide all other questions.
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 2")',
    }, {
        content: 'Check that only question 1 is now visible',
        trigger: 'div.js_question-wrapper:contains("Q1")',
        run : () => {
            expectHiddenQuestion("Q2", "Q2's trigger is gone.");
            expectHiddenQuestion("Q3", "No reason to show it now.");
            expectHiddenQuestion("Q4", "No reason to show it now.");
        },
    }, {
        content: 'Answer Q1 with Answer 3',  // This shows Q3.
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 3")',
    }, {
        content: 'Check that questions Q2 and Q4 are hidden',
        trigger: 'div.js_question-wrapper:contains("Q1")',
        run : () => {
            expectHiddenQuestion("Q2", "Q2 should stay hidden.");
            expectHiddenQuestion("Q4", "Q4 should stay hidden.");
        },
    }, {
        content: 'Answer Q3 with Answer 2',
        trigger: 'div.js_question-wrapper:contains("Q3") label:contains("Answer 2")',
    }, {
        content: 'Answer Q1 with Answer 2',
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 2")',
    }, {
        content: 'Check that only question 1 is now the only one visible again',
        trigger: 'div.js_question-wrapper:contains("Q1")',
        run : () => {
            expectHiddenQuestion("Q2", "Q2's trigger is gone, again.");
            expectHiddenQuestion("Q3", "As Q2's gone, so should this one.");
            expectHiddenQuestion("Q4", "No reason to show it now.");
        },
    }, {
        content: 'Click Submit and finish the survey',
        trigger: 'button[value="finish"]',
    },
    // Final page
    {
        content: 'Thank you',
        trigger: 'h1:contains("Thank you!")',
        isCheck: true,
    }

]});

__exports.expectHiddenQuestion = expectHiddenQuestion; function expectHiddenQuestion (questionTitle, msg){
    if ($(`div.js_question-wrapper.d-none:contains('${questionTitle}')`).length !== 1) {
        throw new TourError(msg);
    }
}

return __exports;
});
;

/*******************************************************************************************
*  Filepath: /survey/static/tests/tours/survey_conditional_questions_on_different_page.js  *
*  Lines: 58                                                                               *
*******************************************************************************************/
odoo.define('@survey/../tests/tours/survey_conditional_questions_on_different_page', ['@web/core/registry', '@survey/../tests/tours/survey_chained_conditional_questions'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { expectHiddenQuestion } = require("@survey/../tests/tours/survey_chained_conditional_questions");

registry.category("web_tour.tours").add('test_survey_conditional_question_on_different_page', {
    test: true,
    url: '/survey/start/1cb935bd-2399-4ed1-9e10-c649318fb4dc',
    steps: () => [
        {
            content: 'Click on Start',
            trigger: 'button.btn:contains("Start")',
        }, {
            content: 'Answer Q1 with Answer 1',
            trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 1")',
        }, {
            content: 'Go to next page',
            trigger: 'button[value="next"]',
        }, {
            content: 'Check that Q3 is visible',
            trigger: 'div.js_question-wrapper:contains("Q3")',
            isCheck: true,
        }, {
            content: 'Answer Q2 with Answer 2',
            trigger: 'div.js_question-wrapper:contains("Q2") label:contains("Answer 2")',
        }, {
            content: 'Check that Q3 is still visible',
            trigger: 'div.js_question-wrapper:contains("Q3")',
            isCheck: true,
        }, {
            content: 'Go back',
            trigger: 'button[value="previous"]',
        }, {
            content: 'Answer Q1 with Answer 2',
            trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 2")',
        }, {
            content: 'Go to next page',
            trigger: 'button[value="next"]',
        }, {
            content: 'Check that Q3 is hidden',
            trigger: 'div.js_question-wrapper:contains("Q2")',
            run : () => expectHiddenQuestion("Q3", "Q3 should be hidden as q1_a1 trigger is not selected anymore"),
        }, {
            content: 'Answer Q2 with Answer 1',
            trigger: 'div.js_question-wrapper:contains("Q2") label:contains("Answer 1")',
        }, {
            content: 'Check that Q3 is now visible again',
            trigger: 'div.js_question-wrapper:contains("Q3")',
            isCheck: true,
        }
    ],
});

return __exports;
});
;

/********************************************************
*  Filepath: /survey/static/tests/tours/survey_form.js  *
*  Lines: 281                                           *
********************************************************/
odoo.define('@survey/../tests/tours/survey_form', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('survey_tour_test_survey_form_triggers', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(),
    {
        content: 'Go to Survey',
        trigger: '.o_app[data-menu-xmlid="survey.menu_surveys"]',
    }, {
        content: "Create a new survey",
        trigger: ".o-kanban-button-new",
    }, {
        content: "Set the Survey's title",
        trigger: ".o_field_widget[name=title] textarea",
        run: "text Test survey",
    }, {
        content: "Add a first question",
        trigger: "td.o_field_x2many_list_row_add a",
    }, {
        content: "Set the first question's title",
        trigger: ".modal-content .o_field_widget[name=title] input",
        run: "text Question 1",
    },
    ...addTwoAnswers(),
    ...saveAndNew(),
    {
        content: "Set the second question's title",
        trigger: ".o_field_widget[name=title] input",
        run: "text Question 2",
        in_modal: true,
    },
    ...addTwoAnswers(),
    ...changeTab("options"),
    {
        content: "Set a trigger for the first question",
        trigger: ".o_field_widget[name=triggering_answer_ids] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the first question's first answer as trigger",
        trigger: 'ul.ui-autocomplete a:contains("Question 1 : Answer A")',
        run: 'click',
        in_modal: true,
    },
    ...changeTab("answers"),
    ...saveAndNew(),
    {
        content: "Set the third question's title",
        trigger: ".o_field_widget[name=title] input",
        run: "text Question 3",
        in_modal: true,
    },
    ...addTwoAnswers(),
    ...changeTab("options"),
    {
        content: "Set a trigger for the second question",
        trigger: ".o_field_widget[name=triggering_answer_ids] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the second question's second answer as trigger",
        trigger: 'ul.ui-autocomplete a:contains("Question 2 : Answer B")',
        run: 'click',
        in_modal: true,
    },
    ...stepUtils.saveForm(),
    {
        content: "Check that Question 2 has 'normal' trigger icon",
        trigger: "tr:contains('Question 2') button i.fa-code-fork",
        isCheck: true,
    }, {
        content: "Check that Question 3 has 'normal' trigger icon",
        trigger: "tr:contains('Question 3') button i.fa-code-fork",
        isCheck: true,
    }, {
        content: "Move Question 3 above its trigger (Question 2)",
        trigger: "tr.o_data_row:nth-child(3) td[name=sequence]",
        run: "drag_and_drop_native div[name=question_and_page_ids] table tbody tr:nth-child(2)",
    }, {
        content: "Check that Question 3 has 'warning' trigger icon",
        trigger: "tr:contains('Question 3') button i.fa-exclamation-triangle",
        isCheck: true,
    }, {
        content: "Open that question to check the server's misplacement evaluation agrees",
        trigger: "tr.o_data_row td:contains('Question 3')",
        run: "click",
    }, {
        content: "Check that an alert is shown",
        trigger: ".o_form_sheet_bg div:first-child.alert-warning:contains('positioned before some or all of its triggers')",
        in_modal: true,
    },
    ...changeTab("options"),
    {
        content: "Remove invalid trigger",
        trigger: ".o_field_widget[name=triggering_answer_ids] span:contains('Question 2') a.o_delete",
        run: "click",
        in_modal: true,
    }, {
        content: "Check that the alert is gone",
        trigger: `.o_form_sheet_bg div:first-child:not(.alert-warning).o_form_sheet`,
        in_modal: true,
        isCheck: true,
    }, {
        content: "Choose a new valid trigger",
        trigger: ".o_field_widget[name=triggering_answer_ids] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the first question's second answer as trigger, then",
        trigger: 'ul.ui-autocomplete a:contains("Question 1 : Answer B")',
        run: 'click',
    },
    ...stepUtils.saveForm(),
    {
        content: "Check that Question 3 has its 'normal' trigger icon back",
        trigger: "tr:contains('Question 3') button i.fa-code-fork",
        isCheck: true,
    }, {
        content: "Move Question 3 back below Question 2",
        trigger: "tr.o_data_row:nth-child(2) td[name=sequence]",
        run: "drag_and_drop_native div[name=question_and_page_ids] table tbody tr:nth-child(3)",
    }, {
        content: "Open that question again",
        trigger: "tr.o_data_row td:contains('Question 3')",
        run: "click",
    },
    ...changeTab("options"),
    {
        content: "Add a second trigger to confirm we can now use Question 2 again",
        trigger: ".modal-content .o_field_widget[name=triggering_answer_ids] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Add the second question's second answer as trigger, then",
        trigger: '.modal-content ul.ui-autocomplete a:contains("Question 2 : Answer B")',
        run: "click",
    },
    ...stepUtils.saveForm(),
    // Move question 1 below question 3,
    {
        content: "Move Question 1 back below Question 3",
        trigger: "tr.o_data_row:nth-child(1) td[name=sequence]",
        run: "drag_and_drop_native div[name=question_and_page_ids] table tbody tr:nth-child(3)",
    }, {
        content: "Check that Question 3 has 'warning' trigger icon",
        trigger: "tr:contains('Question 3') button i.fa-exclamation-triangle",
        isCheck: true,
    }, {
        content: "Open that question again",
        trigger: "tr.o_data_row td:contains('Question 3')",
        run: "click",
    }, {
        content: "Check that an alert is shown also when only one trigger is misplaced",
        trigger: ".o_form_sheet_bg div:first-child.alert-warning:contains('positioned before some or all of its triggers')",
        in_modal: true,
    },
    ...changeTab("options"),
    {
        content: "Remove temporarily used trigger",
        trigger: ".o_field_widget[name=triggering_answer_ids] span:contains('Question 1') a.o_delete",
        run: "click",
        in_modal: true,
    }, {
        content: "Check that the alert is gone in this case too",
        trigger: `.o_form_sheet_bg div:first-child:not(.alert-warning).o_form_sheet`,
        in_modal: true,
        isCheck: true,
    },
    ...stepUtils.saveForm(),
    {
        content: "Check that Question 3 has its 'normal' trigger icon back",
        trigger: "tr:contains('Question 3') button i.fa-code-fork",
        isCheck: true,
    }, {
        content: "Move Question 1 back above Question 2",
        trigger: "tr.o_data_row:nth-child(3) td[name=sequence]",
        run: "drag_and_drop_native div[name=question_and_page_ids] table tbody tr:nth-child(1)",
    },
    // Deleting trigger answers or whole question gracefully remove the trigger automatically
    {
        content: "Open Question 2 again",
        trigger: "tr.o_data_row td:contains('Question 2')",
        run: "click",
    }, {
        content: "Delete Answer B",
        trigger: "div[name=suggested_answer_ids] tr:contains('Answer B') button[name=delete]",
    },
    ...stepUtils.saveForm(),
    {
        content: "Check that Question 3 no longer has a trigger icon",
        trigger: "div[name=question_and_page_ids] tr:contains('Question 3') div.o_widget_survey_question_trigger:not(:has(button))",
        allowInvisible: true,
        isCheck: true,
    }, {
        content: "Check that Question 2 however still has a trigger icon",
        trigger: "tr:contains('Question 2') button i.fa-code-fork",
        isCheck: true,
    }, {
        content: "Delete Question 1",
        trigger: "tr:contains('Question 1') button[name=delete]",
        run: "click",
    }, {
        content: "Check that now Question 2 too does no longer have a trigger icon",
        trigger: "tr:contains('Question 2') div.o_widget_survey_question_trigger:not(:has(button))",
        allowInvisible: true,
        isCheck: true,
    }, {
        content: 'Go back to Kanban View',
        trigger: '[data-menu-xmlid="survey.menu_survey_form"]',
    }, {
        content: "Check that we arrived on the kanban view",
        trigger: ".o-kanban-button-new",
        isCheck: true,
    }
]});

function addTwoAnswers() {
    return [
        {
            content: "Add the first answer",
            trigger: "div[name=suggested_answer_ids] .o_field_x2many_list_row_add a",
            in_modal: true,
        }, {
            trigger: 'tr.o_selected_row div[name=value] input',
            run: 'text Answer A',
            in_modal: true,
        }, {
            content: "Add the second answer",
            trigger: "div[name=suggested_answer_ids] .o_field_x2many_list_row_add a",
            in_modal: true,
        }, {
            trigger: 'tr:nth-child(2).o_selected_row div[name=value] input',
            run: 'text Answer B',
            in_modal: true,
        }
    ];
}

function saveAndNew() {
    return [
        {
            content: "Click Save & New",
            trigger: "button.o_form_button_save_new",
            in_modal: true,
        }, {
            content: "Wait for the dialog to render new question form",
            // suggested_answer_ids required even though in_modal is specified...
            trigger: "div[name=suggested_answer_ids] .o_list_table tbody tr:first-child:not(.o_data_row)", // empty answers list
            in_modal: true,
            isCheck: true,
        }
    ];
}


function changeTab(tabName) {
    // Currently, .modal-content is required even though "in_modal"
    return [
        {
            content: `Go to ${tabName} tab`,
            trigger: `.modal-content a[name=${tabName}].nav-link`,
            in_modal: true
        }, {
            content: `Wait for tab ${tabName} tab`,
            trigger: `.modal-content a[name=${tabName}].nav-link.active`,
            in_modal: true,
            isCheck: true,
        }
    ];
}

return __exports;
});
;

/***********************************************************
*  Filepath: /survey/static/tests/tours/survey_prefill.js  *
*  Lines: 158                                              *
***********************************************************/
odoo.define('@survey/../tests/tours/survey_prefill', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_survey_prefill', {
    test: true,
    url: '/survey/start/b137640d-14d4-4748-9ef6-344caaaaaae',
    steps: () => [{      // Page-1
        trigger: 'button.btn.btn-primary.btn-lg:contains("Start Survey")',
    }, { // Question: Where do you live?
        trigger: 'div.js_question-wrapper:contains("Where do you live?") input',
        run: 'text Grand-Rosiere',
    }, { // Question: When is your date of birth?
        trigger: 'div.js_question-wrapper:contains("When is your date of birth?") input',
        run: 'text 05/05/1980',
    }, { // Question: How frequently do you buy products online?
        trigger: 'div.js_question-wrapper:contains("How frequently do you buy products online?") label:contains("Once a week")',
    }, { // Question: How many times did you order products on our website?
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website?") input',
        run: 'text 42',
    }, {
        content: 'Click on Next Page',
        trigger: 'button[value="next"]',
    },
    // Page-2
    { // Question: Which of the following words would you use to describe our products?
        content: 'Answer Which of the following words would you use to describe our products (High Quality)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality")',
    }, {
        content: 'Answer Which of the following words would you use to describe our products (Good value for money)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money")',
    }, {
        content: 'Answer What do your think about our new eCommerce (The new layout and design is fresh and up-to-date)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") td:first',
    }, {
        content: 'Answer What do your think about our new eCommerce (It is easy to find the product that I want)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The tool to compare the products is useful to make a choice)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") td:eq(3)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The checkout process is clear and secure)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (I have added products to my wishlist)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") td:last',
    }, {
        content: 'Answer Do you have any other comments, questions, or concerns',
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: 'text Is the prefill working?',
    }, {
        // Go back to previous page
        content: 'Click on the previous page name in the breadcrumb',
        trigger: 'ol.breadcrumb a:first',
    }, {
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website?") input',
        run: function () {
            var $inputQ3 = $('div.js_question-wrapper:contains("How many times did you order products on our website?") input');
            if ($inputQ3.val() === '42.0') {
                $('.o_survey_title').addClass('prefilled');
            }
        }
    }, {
        trigger: '.o_survey_title.prefilled',
        run: function () {
            // check that all the answers are prefilled in Page 1
            var $inputQ1 = $('div.js_question-wrapper:contains("Where do you live?") input');
            if ($inputQ1.val() !== 'Grand-Rosiere') {
                return;
            }

            var $inputQ2 = $('div.js_question-wrapper:contains("When is your date of birth?") input');
            if ($inputQ2.val() !== '05/05/1980') {
                return;
            }

            var $inputQ3 = $('div.js_question-wrapper:contains("How frequently do you buy products online?") label:contains("Once a week") input');
            if (!$inputQ3.is(':checked')) {
                return;
            }

            var $inputQ4 = $('div.js_question-wrapper:contains("How many times did you order products on our website?") input');
            if ($inputQ4.val() !== '42.0') {
                return;
            }

            $('.o_survey_title').addClass('tour_success');
        }
    }, {
        trigger: '.o_survey_title.tour_success'
    }, {
        content: 'Click on Next Page',
        trigger: 'button[value="next"]',
    }, {
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: function () {
            var $inputQ3 = $('div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea');
            if ($inputQ3.val() === "Is the prefill working?") {
                $('.o_survey_title').addClass('prefilled2');
            }
        }
    }, {
        trigger: '.o_survey_title.prefilled2',
        run: function () {
            // check that all the answers are prefilled in Page 2
            var $input1Q1 = $('div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality") input');
            if (!$input1Q1.is(':checked')) {
                return;
            }

            var $input2Q1 = $('div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money") input');
            if (!$input2Q1.is(':checked')) {
                return;
            }

            var $input1Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") input:first');
            if (!$input1Q2.is(':checked')) {
                return;
            }

            var $input2Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") input:eq(2)');
            if (!$input2Q2.is(':checked')) {
                return;
            }

            var $input3Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") input:eq(3)');
            if (!$input3Q2.is(':checked')) {
                return;
            }

            var $input4Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") input:eq(2)');
            if (!$input4Q2.is(':checked')) {
                return;
            }

            var $input5Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") input:last');
            if (!$input5Q2.is(':checked')) {
                return;
            }

            var $inputQ3 = $('div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea');
            if ($inputQ3.val() !== "Is the prefill working?") {
                return;
            }

            $('.o_survey_title').addClass('tour_success_2');
        }
    }, {
        trigger: '.o_survey_title.tour_success_2',
        isCheck: true,
    }
]});

return __exports;
});
;

/*******************************************************************************
*  Filepath: /survey/static/tests/tours/survey_roaming_mandatory_questions.js  *
*  Lines: 80                                                                   *
*******************************************************************************/
odoo.define('@survey/../tests/tours/survey_roaming_mandatory_questions', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require('@web/core/registry');

registry.category('web_tour.tours').add('test_survey_roaming_mandatory_questions', {
    test: true,
    url: '/survey/start/853ebb30-40f2-43bf-a95a-bbf0e367a365',
    steps: () => [{
        content: 'Click on Start',
        trigger: 'button.btn:contains("Start")',
    }, {
        content: 'Skip question Q1',
        trigger: 'button.btn:contains("Continue")',
    }, {
        content: 'Skip question Q2',
        extra_trigger: 'div.js_question-wrapper:contains("Q2")',
        trigger: 'button.btn:contains("Continue")',
    }, {
        content: 'Check if Q3 button is Submit',
        trigger: 'button.btn:contains("Submit")',
        isCheck: true,
    }, {
        content: 'Go back to Q2',
        trigger: 'button.btn[value="previous"]',
    }, {
        content: 'Check if the alert box is present',
        trigger: 'div.o_survey_question_error span',
        isCheck: true,
    }, {
        content: 'Skip question Q2 again',
        trigger: 'button.btn:contains("Continue")',
    }, {
        content: 'Answer Q3',
        trigger: 'div.js_question-wrapper:contains("Q3") label:contains("Answer 1")',
    }, {
        content: 'Click on Submit',
        trigger: 'button.btn:contains("Submit")',
    }, {
        content: 'Check if question is Q1',
        trigger: 'div.js_question-wrapper:contains("Q1")',
        isCheck: true,
    }, {
        content: 'Click on "Next Skipped" button',
        trigger: 'button.btn:contains("Next Skipped")',
    }, {
        content: 'Check if question is Q2',
        trigger: 'div.js_question-wrapper:contains("Q2")',
        isCheck: true,
    }, {
        content: 'Click on "Next Skipped" button',
        trigger: 'button.btn:contains("Next Skipped")',
    }, {
        content: 'Check if question is Q1 again (should loop on skipped questions)',
        trigger: 'div.js_question-wrapper:contains("Q1")',
        isCheck: true,
    }, {
        content: 'Answer Q1',
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 2")',
    }, {
        content: 'Check if the visible question is the skipped question Q2',
        trigger: 'div.js_question-wrapper:contains("Q2")',
        isCheck: true,
    }, {
        content: 'Answer Q2',
        trigger: 'div.js_question-wrapper:contains("Q2") label:contains("Answer 3")',
    }, {
        content: 'Click on Submit',
        trigger: 'button.btn:contains("Submit")',
    }, {
        content: 'Check if the survey is done',
        trigger: 'div.o_survey_finished h1:contains("Thank you!")',
        isCheck: true,
    }],
});

return __exports;
});
;

/***********************************************************************
*  Filepath: /survey/static/tests/tours/survey_session_manage_test.js  *
*  Lines: 45                                                           *
***********************************************************************/
odoo.define('@survey/../tests/tours/survey_session_manage_test', [], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

function patchSessionManager() {
    const { DateTime } = luxon;
    const SessionManager = odoo.loader.modules.get('@survey/js/survey_session_manage')[Symbol.for('default')]
    /**
     * Small override for test/tour purposes.
     */
    SessionManager.include({
        /**
         * - Trigger the fetch of answer results immediately at the start.
         * (Instead of wasting 2 seconds waiting after the start).
         * - Set the fade in/out time to 1 ms to avoid unnecessary delays.
         * - Avoid refreshing the results every 2 seconds
         */
        start: function () {
            var self = this;
            return this._super.apply(this, arguments)
                .then(this._refreshResults.bind(this))
                .then(function () {
                    self.fadeInOutTime = 1;
                    clearInterval(self.resultsRefreshInterval);
                });
        },

        /**
         * Force the timer to "now" to avoid introducing potential test breaking
         * timely variables (rpc/small server delay/...) if the start_question_time flickers.
         */
        _startTimer: function () {
            this.$el.data('timer', DateTime.utc());
            return this._super.apply(this, arguments);
        }
    })
};



__exports[Symbol.for("default")] = patchSessionManager;

return __exports;
});
;

/***********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_manage.js  *
*  Lines: 344                                                          *
***********************************************************************/
odoo.define('@survey/../tests/tours/survey_tour_session_manage', ['@web/core/registry', '@web/core/utils/arrays', '@web_tour/tour_service/tour_utils', '@survey/../tests/tours/survey_tour_session_tools'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { zip } = require("@web/core/utils/arrays");
const { TourError } = require("@web_tour/tour_service/tour_utils");
const { accessSurveysteps } = require("@survey/../tests/tours/survey_tour_session_tools");

let rootWidget = null;

/**
 * Since the chart is rendered using SVG, we can't use jQuery triggers to check if everything
 * is correctly rendered.
 * This helper method returns the chart data (Chartjs framework specific) in the following structure:
 * [{ value, backgroundColor, labelColor }]
 */
const getChartData = () => {
    const chartData = [];
    const surveyManagePublicWidget = rootWidget.publicWidgets.find((widget) => {
        return widget.$el.hasClass('o_survey_session_manage');
    });

    if (!surveyManagePublicWidget) {
        return chartData;
    }

    surveyManagePublicWidget.resultsChart.chart.data.datasets[0].data.forEach((value, index)=> {
        chartData.push({
            value: value,
            backgroundColor: surveyManagePublicWidget.resultsChart._getBackgroundColor({dataIndex: index}),
            labelColor: surveyManagePublicWidget.resultsChart._getLabelColor({dataIndex: index}),
        });
    });

    return chartData;
};

const nextScreen = () => {
    const e = $.Event('keydown');
    e.key = "ArrowRight";
    $(document).trigger(e);
};

const previousScreen = () => {
    const e = $.Event('keydown');
    e.key = "ArrowLeft";
    $(document).trigger(e);
};

const REGULAR_ANSWER_COLOR = '#212529';
const CORRECT_ANSWER_COLOR = '#2CBB70';
const WRONG_ANSWER_COLOR = '#D9534F';

const INDEX_TO_ORDINAL = {
    0: 'First',
    1: 'Second',
    2: 'Third',
    3: 'Fourth',
};

/**
 * Check answer appearance (opacity and color).
 *
 * @param {string} answerLabel
 * @param {{backgroundColor: string, labelColor: string, value?: number}} shownAnswer
 * @param {"correct"|"incorrect"|"regular"} expectedAnswerType
 */
const checkAnswerAppearance = (answerLabel, shownAnswer, expectedAnswerType) => {
    if (expectedAnswerType === 'correct') {
        if (!shownAnswer.backgroundColor.includes('0.8') || shownAnswer.labelColor !== CORRECT_ANSWER_COLOR) {
            throw new TourError(`${answerLabel} should be shown as "correct"!`);
        }
    } else if (expectedAnswerType === 'incorrect') {
        if (!shownAnswer.backgroundColor.includes('0.2') || shownAnswer.labelColor !== WRONG_ANSWER_COLOR) {
            throw new TourError(`${answerLabel} should be shown as "incorrect"!`);
        }
    } else if (expectedAnswerType === 'regular') {
        if (!shownAnswer.backgroundColor.includes('0.8') || shownAnswer.labelColor !== REGULAR_ANSWER_COLOR) {
            throw new TourError(`${answerLabel} should not be shown as "correct" or "incorrect"!`);
        }
    } else {
        throw new Error(`Unsupported answer type.`);
    }
};

const checkAnswerValue = (answerLabel, shownAnswerValue, expectedAnswerValue) => {
    if (shownAnswerValue !== expectedAnswerValue) {
        throw new TourError(expectedAnswerValue === 0 ?
            `${answerLabel} should not be picked by any user!` :
            `${answerLabel} should be picked by ${expectedAnswerValue} users!`
        );
    }
};

/**
 * Check the answers count, values and appearance.
 *
 * @param {{value: number, backgroundColor: string, color: string}[]} chartData Data returned by `getChartData`.
 * @param {{value: number, type: "correct" | "incorrect" | "regular"}[]} expectedAnswersData
 */
const checkAnswers = (chartData, expectedAnswersData) => {
    checkAnswersCount(chartData, expectedAnswersData.length);

    zip(chartData, expectedAnswersData).forEach(([shownAnswerData, expectedAnswerData], answerIndex) => {
        const answerLabel = `${INDEX_TO_ORDINAL[answerIndex]} answer`;
        checkAnswerValue(answerLabel, shownAnswerData.value, expectedAnswerData.value);
        checkAnswerAppearance(answerLabel, shownAnswerData, expectedAnswerData.type);
    });
};

const checkAnswersAllZeros = (chartData) => {
    if (chartData.find(answerData => answerData !== 0).length) {
        throw new TourError('Chart data should all be 0!');
    }
};

const checkAnswersCount = (chartData, expectedCount) => {
    if (chartData.length !== expectedCount) {
        throw new TourError(`Chart data should contain ${expectedCount} records!`);
    }
};

/**
 * Tour that will test the whole survey session from the host point of view.
 *
 * Break down of the main points:
 * - Open the 'session manager' (the session was already created by a previous tour)
 * - Display the nickname question, and move to the next one (as answers are not displayed)
 * - Check answers are correctly displayed for the 3 'simple' question types (text, date, datetime)
 * - Move to the choice question and check that answers are displayed
 *   (The check is rather complex, see 'getChartData' for details)
 * - If everything is correctly displayed, move to the next question
 * - On the scored choice question, check that the screens are correctly chained:
 *   no results displayed -> results displayed -> correct/incorrect answers -> leaderboard
 * - On the scored + timed multiple choice question, check the same than previous question,
 *   except that the results are supposed to be displayed automatically when the question timer runs out
 * - Test the 'back' behavior and check that screens are reversed correctly
 * - Check that our final leaderboard is correct based on attendees answers
 * - Close the survey session
 */
registry.category("web_tour.tours").add('test_survey_session_manage_tour', {
    url: "/web",
    test: true,
    steps: () => [].concat(accessSurveysteps, [{
    trigger: 'button[name="action_open_session_manager"]',
}, {
    trigger: 'h1:contains("Nickname")',
    isCheck: true // check nickname question is displayed
}, {
    trigger: 'body',
    run: async () => { rootWidget = await odoo.loader.modules.get('root.widget'); }
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: 'h1:contains("Text Question")',
    isCheck: true // check text question is displayed
}, {
    trigger: '.o_survey_session_progress_small:contains("3 / 3")',
    isCheck: true // check we have 3 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 1 is the best")',
    isCheck: true // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 2 rulez")',
    isCheck: true // check attendee 2 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 3 will crush you")',
    isCheck: true // check attendee 3 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: '.o_survey_session_progress_small:contains("2 / 3")',
    isCheck: true // check we have 2 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("10/10/2010")',
    isCheck: true // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("11/11/2011")',
    isCheck: true // check attendee 2 answer is displayed
}, {
    trigger: 'h1',
    run: previousScreen
}, {
    trigger: 'h1:contains("Text Question")',
    isCheck: true // check text question is displayed
}, {
    trigger: '.o_survey_session_progress_small:contains("3 / 3")',
    isCheck: true // check we have 3 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 1 is the best")',
    isCheck: true // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 2 rulez")',
    isCheck: true // check attendee 2 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 3 will crush you")',
    isCheck: true // check attendee 3 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: '.o_survey_session_progress_small:contains("2 / 3")',
    isCheck: true // check we have 2 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("10/10/2010")',
    isCheck: true // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("11/11/2011")',
    isCheck: true // check attendee 2 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: '.o_survey_session_progress_small:contains("2 / 3")',
    isCheck: true // check we have 2 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("10/10/2010 10:00:00")',
    isCheck: true // check attendee 2 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("11/11/2011 15:55:55")',
    isCheck: true // check attendee 3 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: 'h1:contains("Regular Simple Choice")',
    // Wait for answers' data to be fetched (see commit message).
    extra_trigger: '.o_survey_session_progress_small[style*="width: 100%"]',
    run: () => {
        checkAnswers(getChartData(), [
            {value: 2, type: "regular"},
            {value: 1, type: "regular"},
            {value: 0, type: "regular"},
        ]);
        nextScreen();
    }
}, {
    trigger: 'h1:contains("Scored Simple Choice")',
    run: () => {
        const chartData = getChartData();
        checkAnswersCount(chartData, 4);
        checkAnswersAllZeros(chartData);

        nextScreen();
    }
}, {
    trigger: 'h1:contains("Scored Simple Choice")',
    // Wait for progressbar to be updated ("late" enough DOM change after onNext() is triggered).
    extra_trigger: '.o_survey_session_progress_small[style*="width: 100%"]',
    run: () => {
        checkAnswers(getChartData(), [
            {value: 1, type: "regular"},
            {value: 1, type: "regular"},
            {value: 1, type: "regular"},
            {value: 0, type: "regular"},
        ]);
        nextScreen();
    }
}, {
    trigger: 'h1:contains("Scored Simple Choice")',
    // Wait for Button to be updated ("late" enough DOM change after onNext() is triggered).
    extra_trigger: '.o_survey_session_navigation_next_label:contains("Show Leaderboard")',
    run: () => {
        checkAnswers(getChartData(), [
            {value: 1, type: "correct"},
            {value: 1, type: "incorrect"},
            {value: 1, type: "incorrect"},
            {value: 0, type: "incorrect"},
        ]);
        nextScreen();
        nextScreen();
    }
}, {
    trigger: 'h1:contains("Timed Scored Multiple Choice")',
    run: ()=> {
        const chartData = getChartData();
        checkAnswersCount(chartData, 3);
        checkAnswersAllZeros(chartData);

        // after 1 second, results are displayed automatically because question timer runs out
        // we add 1 extra second because of the way the timer works:
        // it only triggers the time_up event 1 second AFTER the delay is passed
        setTimeout(() => {
            checkAnswers(getChartData(), [
                {value: 2, type: "regular"},
                {value: 2, type: "regular"},
                {value: 1, type: "regular"},
            ]);

            nextScreen();
            checkAnswers(getChartData(), [
                {value: 2, type: "correct"},
                {value: 2, type: "correct"},
                {value: 1, type: "incorrect"},
            ]);

            nextScreen();
        }, 2100);
    }
}, {
    trigger: 'h1:contains("Final Leaderboard")',
    isCheck: true // Final Leaderboard is displayed
}, {
    trigger: 'h1',
    run: () => {
        // previous screen testing
        previousScreen();
        checkAnswers(getChartData(), [
            {value: 2, type: "correct"},
            {value: 2, type: "correct"},
            {value: 1, type: "incorrect"},
        ]);

        previousScreen();
        checkAnswers(getChartData(), [
            {value: 2, type: "regular"},
            {value: 2, type: "regular"},
            {value: 1, type: "regular"},
        ]);

        previousScreen();
        checkAnswersAllZeros(getChartData());

        // Now we go forward to the "Final Leaderboard" again (3 times)
        for (let i = 0; i < 3; i++) {
            nextScreen();
        }
    }
}, {
    trigger: 'h1:contains("Final Leaderboard")',
    isCheck: true // Final Leaderboard is displayed
}, {
    trigger: '.o_survey_session_close:has("i.fa-close")'
}, {
    trigger: 'button[name="action_start_session"]',
    isCheck: true // check that we can start another session
}])});

return __exports;
});
;

/**********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_start.js  *
*  Lines: 52                                                          *
**********************************************************************/
odoo.define('@survey/../tests/tours/survey_tour_session_start', ['@web/core/registry', '@survey/../tests/tours/survey_tour_session_tools'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { accessSurveysteps } = require("@survey/../tests/tours/survey_tour_session_tools");

/**
 * Small tour that will open the session manager and check
 * that the attendees are accounted for, then start the session
 * by going to the first question.
 */
registry.category("web_tour.tours").add('test_survey_session_start_tour', {
    url: "/web",
    test: true,
    steps: () => [].concat(accessSurveysteps, [{
    trigger: 'button[name="action_open_session_manager"]',
}, {
    trigger: '.o_survey_session_attendees_count:contains("3")',
    run: function () {
        /* We want to test 2 things: (1) that the attendees count is right
           on the rendered xml template and (2) that the attendees count
           gets correctly updated every 2 seconds via JS.

           This step did verify the one on the xml template, we now change
           the value back to 0 to test that in 2 seconds it'll be updated
           by JS.

           The "waitrpc" class just serves to rule out concurrency issues
           between this step's run and the next step's trigger. */
        const elem = document.querySelector('.o_survey_session_attendees_count');
        elem.classList.add("waitrpc");
        elem.textContent = '0';
    }
}, {
    trigger: '.o_survey_session_attendees_count.waitrpc:contains("3")',
    isCheck: true
}, {
    trigger: 'h1',
    run: function () {
        var e = $.Event('keydown');
        e.key = "ArrowRight";
        $(document).trigger(e); // start session
    }
}, {
    trigger: 'h1:contains("Nickname")',
    run: function () {} // check first question is displayed
}])});

return __exports;
});
;

/**********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_tools.js  *
*  Lines: 27                                                          *
**********************************************************************/
odoo.define('@survey/../tests/tours/survey_tour_session_tools', ['@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { stepUtils } = require("@web_tour/tour_service/tour_utils");

/**
 * Tool that gathers common steps to every 'survey session' tours.
 */
const accessSurveysteps = __exports.accessSurveysteps = [
    stepUtils.showAppsMenuItem(),
    {
        trigger: '.o_app[data-menu-xmlid="survey.menu_surveys"]',
        edition: "community",
    },
    {
        trigger: '.o_app[data-menu-xmlid="survey.menu_surveys"]',
        edition: "enterprise",
    },
    {
        trigger: '.oe_kanban_card:contains("User Session Survey")',
    },
];

return __exports;
});
;

/***********************************************************
*  Filepath: /hr_skills/static/tests/tours/skills_tour.js  *
*  Lines: 156                                              *
***********************************************************/
odoo.define('@hr_skills/../tests/tours/skills_tour', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

registry.category("web_tour.tours").add('hr_skills_tour', {
    test: true,
    url: '/web',
    steps: () => [
    stepUtils.showAppsMenuItem(),
    {
        content: "Open Employees app",
        trigger: ".o_app[data-menu-xmlid='hr.menu_hr_root']",
    },
    {
        content: "Create a new employee",
        trigger: ".o-kanban-button-new",
    },
    {
        content: "Pick a name",
        trigger: ".o_field_widget[name='name'] input",
        run: "text Jony McHallyFace",
    },
    {
        content: "Save",
        trigger: ".o_form_button_save",
    },
    {
        content: "Add a new Resume experience",
        trigger: ".o_field_resume_one2many tr.o_resume_group_header button.btn-secondary",
    },
    {
        content: "Enter some company name",
        trigger: ".modal-body .o_field_widget[name='name'] input",
        run: "text Mamie Rock",
    },
    {
        content: "Set start date",
        trigger: ".o_field_widget[name='date_start'] input",
        run: "text 12/05/2017",
    },
    {
        content: "Give some description",
        trigger: ".o_field_widget[name='description'] textarea",
        run: "text Sang some songs and played some music",
    },
    {
        content: "Save it",
        trigger: ".o_form_button_save",
        in_modal: true,
        run: "click",
    },
    {
        content: "Edit newly created experience",
        trigger: ".o_resume_line_title:contains('Mamie Rock')",
        run: "click",
    },
    {
        content: "Change type",
        trigger: ".o_field_widget[name='line_type_id'] input",
        run: "text Experience",
    },
    {
        content: "Choose experience",
        trigger: '.ui-autocomplete .ui-menu-item a:contains("Experience")',
        run: "click",
    },
    {
        content: "Save experience change",
        trigger: ".o_form_button_save",
        in_modal: true,
        run: "click",
    },
    {
        content: "Add a new Skill",
        trigger: ".o_field_skills_one2many button:contains('Pick a skill from the list')",
    },
    {
        content: "Select Music",
        trigger: ".o_field_widget[name='skill_type_id'] label:contains('Best Music')",
        run: "click",
    },
    {
        content: "Select a song",
        trigger: ".o_field_widget[name='skill_id'] input",
        run: "text Fortun",
    },
    {
        content: "Choose the song",
        trigger: '.ui-autocomplete .ui-menu-item a:contains("Fortunate Son")',
        run: "click",
    },
    {
        content: "Select a level",
        trigger: ".o_field_widget[name='skill_level_id'] input",
        run: "text Level",
    },
    {
        content: "Choose the level",
        trigger: '.ui-autocomplete .ui-menu-item a:contains("Level 2")',
        run: "click",
    },
    {
        content: "Save new skill",
        trigger: ".o_form_button_save",
        in_modal: true,
        run: "click",
    },
    {
        content: "Check if item is added",
        trigger: ".o_data_row td.o_data_cell:contains('Fortunate Son')",
        run: () => {},
    },
    {
        content: "Add a new Skill",
        trigger: ".o_field_skills_one2many button:contains('ADD')",
    },
    {
        content: "Select a song", // "Music" should be already selected
        trigger: ".o_field_widget[name='skill_id'] input",
        run: "text Mary",
    },
    {
        content: "Choose the song",
        trigger: '.ui-autocomplete .ui-menu-item a:contains("Oh Mary")',
        run: "click",
    },
    {
        content: "Select a level",
        trigger: ".o_field_widget[name='skill_level_id'] input",
        run: "text Level 7",
    },
    {
        content: "Choose the level",
        trigger: '.ui-autocomplete .ui-menu-item a:contains("Level 7")',
        run: "click",
    },
    {
        content: "Save new skill",
        trigger: ".o_form_button_save",
        in_modal: true,
        run: "click",
    },
    {
        content: "Check if item is added",
        trigger: ".o_data_row td.o_data_cell:contains('Oh Mary')",
        run: () => {},
    },
    ...stepUtils.saveForm(),
]});

return __exports;
});
;

/***************************************************************************************
*  Filepath: /sale_external_tax/static/tests/tours/sale_external_optional_products.js  *
*  Lines: 44                                                                           *
***************************************************************************************/
odoo.define('@sale_external_tax/../tests/tours/sale_external_optional_products', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

// This tour relies on data created on the Python test.
registry.category("web_tour.tours").add('sale_external_optional_products', {
    test: true,
    url: '/my/quotes',
    steps: () => [
    {
        content: "open the test SO",
        trigger: 'a:containsExact("test")',
    },
    {
        content: "add the optional product",
        trigger: '.js_add_optional_products',
    },
    {
        content: "increase the quantity of the optional product by 1",
        extra_trigger: 'li a:contains("Communication history")', // Element on the left
        trigger: '.js_update_line_json:nth(1)',
    },
    {
        content: "wait for the quantity to be updated",
        trigger: 'input.js_quantity:propValue(2.0)',
        extra_trigger: 'li a:contains("Communication history")',
        run() {},
    },
    {
        content: "delete the optional line",
        trigger: '.js_update_line_json:nth(2)',
    },
    {
        content: "wait for line to be deleted and show up again in optional products",
        trigger: '.js_add_optional_products',
        run() {}, // it should not click
    },
]});

return __exports;
});
;

/**************************************************************************************
*  Filepath: /mail_enterprise/static/tests/tours/discuss_channel_expand_test_tour.js  *
*  Lines: 41                                                                          *
**************************************************************************************/
odoo.define('@mail_enterprise/../tests/tours/discuss_channel_expand_test_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/* @odoo-module */

const { registry } = require("@web/core/registry");

/**
 * This tour depends on data created by python test in charge of launching it.
 * It is not intended to work when launched from interface. It is needed to test
 * an action (action manager) which is not possible to test with QUnit.
 * @see mail_enterprise/tests/test_discuss_channel_expand.py
 */
registry
    .category("web_tour.tours")
    .add("mail_enterprise/static/tests/tours/discuss_channel_expand_test_tour.js", {
        test: true,
        steps: () => [
            {
                content:
                    "Click on 'Open Actions Menu' in the chat window header to show expand button",
                trigger:
                    '.o-mail-ChatWindow:contains("test-mail-channel-expand-tour") [title="Open Actions Menu"]',
            },
            {
                content: "Click on expand button to open channel in Discuss",
                trigger:
                    '.o-mail-ChatWindow:contains("test-mail-channel-expand-tour") [title="Open in Discuss"]',
            },
            {
                content:
                    "Check that first message of #test-mail-channel-expand-tour is shown in Discuss app",
                trigger:
                    '.o-mail-Discuss-content .o-mail-Message-body:contains("test-message-mail-channel-expand-tour")',
                run: () => {},
            },
        ],
    });

return __exports;
});
;

/***************************************************
*  Filepath: /auth_totp/static/tests/totp_flow.js  *
*  Lines: 344                                      *
***************************************************/
odoo.define('@auth_totp/../tests/totp_flow', ['@web/core/network/rpc_service', '@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { jsonrpc } = require("@web/core/network/rpc_service");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function openRoot() {
    return [{
        content: "return to client root to avoid race condition",
        trigger: 'body',
        run() {
            $('body').addClass('wait');
            window.location = '/web';
        }
    }, {
        content: "wait for client reload",
        trigger: 'body:not(.wait)',
        run() {}
    }];
}
function openUserProfileAtSecurityTab() {
    return [{
        content: 'Open user account menu',
        trigger: '.o_user_menu .dropdown-toggle',
        run: 'click',
    }, {
        content: "Open preferences / profile screen",
        trigger: '[data-menu=settings]',
        run: 'click',
    }, {
        content: "Switch to security tab",
        trigger: 'a[role=tab]:contains("Account Security")',
        run: 'click',
    }];
}

/**
 * Checks that the TOTP button is in the specified state (true = enabled =
 * can disable, false = disabled = can enable), then closes the profile dialog
 * if it's one (= hr not installed).
 *
 * If no totp state is provided, just checks that the toggle exists.
 */
function closeProfileDialog({content, totp_state}) {
    let trigger;
    switch (totp_state) {
    case true: trigger = 'button[name=action_totp_disable]'; break;
    case false: trigger = 'button[name=action_totp_enable_wizard]'; break;
    case undefined: trigger = 'button.o_auth_2fa_btn'; break;
    default: throw new Error(`Invalid totp state ${totp_state}`)
    }

    return [{
        content,
        trigger,
        run() {
            const $modal = this.$anchor.parents('.o_dialog');
            if ($modal.length) {
                $modal.find('button[name=preference_cancel]').click()
            }
        }
    }, {
        trigger: 'body',
        async run() {
            while (document.querySelector('.o_dialog')) {
                await Promise.resolve();
            }
            this.$anchor.addClass('dialog-closed');
        },
    }, {
        trigger: 'body.dialog-closed',
        run() {},
    }];
}

registry.category("web_tour.tours").add('totp_tour_setup', {
    test: true,
    url: '/web',
    steps: () => [...openUserProfileAtSecurityTab(), {
    content: "Open totp wizard",
    trigger: 'button[name=action_totp_enable_wizard]',
}, {
    content: "Check that we have to enter enhanced security mode and input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text demo',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check the wizard has opened",
    trigger: 'li:contains("When requested to do so")',
    run() {}
}, {
    content: "Get secret from collapsed div",
    trigger: 'a:contains("Cannot scan it?")',
    async run(helpers) {
        const $secret = this.$anchor.closest('div').find('[name=secret] span:first-child');
        const $copyBtn = $secret.find('button');
        $copyBtn.remove();
        const token = await jsonrpc('/totphook', {
            secret: $secret.text()
        });
        helpers.text(token, '[name=code] input');
        helpers.click('button.btn-primary:contains(Activate)');
        $('body').addClass('got-token')
    }
}, {
    content: 'wait for rpc',
    trigger: 'body.got-token',
    run() {}
},
...openRoot(),
...openUserProfileAtSecurityTab(),
...closeProfileDialog({
    content: "Check that the button has changed",
    totp_state: true,
}),
]});

registry.category("web_tour.tours").add('totp_login_enabled', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    async run(helpers) {
        // TODO: if tours are ever async-aware the click should get moved out,
        //       but currently there's no great way to make the tour wait until
        //       we've retrieved and set the token: `:empty()` is aboutthe text
        //       content of the HTML element, not the JS value property. We
        //       could set a class but that's really no better than
        //       procedurally clicking the button after we've set the input.
        const token = await jsonrpc('/totphook');
        helpers.text(token);
        helpers.click('button:contains("Log in")');
    }
}, {
    content: "check we're logged in",
    trigger: ".o_user_menu .dropdown-toggle",
    run() {}
}]});

registry.category("web_tour.tours").add('totp_login_device', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "check remember device box",
    trigger: 'label[for=switch-remember]',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    async run(helpers) {
        const token = await jsonrpc('/totphook')
        helpers.text(token);
        helpers.click('button:contains("Log in")');
    }
}, {
    content: "check we're logged in",
    trigger: ".o_user_menu .dropdown-toggle",
    run: 'click',
}, {
    content: "click the Log out button",
    trigger: '.dropdown-item[data-menu=logout]',
}, {
    content: "check that we're back on the login page or go to it",
    trigger: 'input#login, a:contains(Log in)'
}, {
    content: "input login again",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password again',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button again",
    trigger: 'button:contains("Log in")',
},  {
    content: "check we're logged in without 2FA",
    trigger: ".o_user_menu .dropdown-toggle",
    run() {}
},
// now go and disable two-factor authentication would be annoying to do in a separate tour
// because we'd need to login & totp again as HttpCase.authenticate can't
// succeed w/ totp enabled
...openUserProfileAtSecurityTab(),
{
    content: "Open totp wizard",
    trigger: 'button[name=action_totp_disable]',
}, {
    content: "Check that we have to enter enhanced security mode and input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text demo',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
},
...openRoot(),
...openUserProfileAtSecurityTab(),
...closeProfileDialog({
    content: "Check that the button has changed",
    totp_state: false
}),
]});

registry.category("web_tour.tours").add('totp_login_disabled', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
},
// normally we'd end the tour here as it's all we care about but there are a
// bunch of ongoing queries from the loading of the web client which cause
// issues, so go and open the preferences / profile screen to make sure
// everything settles down
...openUserProfileAtSecurityTab(),
// close the dialog if that makes sense
...closeProfileDialog({})
]});

const columns = {};
registry.category("web_tour.tours").add('totp_admin_disables', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), {
    content: 'Go to settings',
    trigger: '[data-menu-xmlid="base.menu_administration"]'
}, {
    content: 'Wait for page',
    trigger: '.o_menu_brand:contains("Settings")',
    run() {}
}, {
    content: "Open Users menu",
    trigger: '[data-menu-xmlid="base.menu_users"]'
}, {
    content: "Open Users view",
    trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
    run(helpers) {
        // funny story: the users view we're trying to reach, sometimes we're
        // already there, but if we re-click the next step executes before the
        // action has the time to re-load, the one after that doesn't, and our
        // selection get discarded by the action reloading, so here try to
        // see if we're already on the users action through the breadcrumb and
        // just close the menu if so
        const $crumb = $('.breadcrumb');
        if ($crumb.text().indexOf('Users') === -1) {
            // on general settings page, click menu
            helpers.click();
        } else {
            // else close menu
            helpers.click($('[data-menu-xmlid="base.menu_users"]'));
        }
    }
}, {
    content: "Find Demo User",
    trigger: 'td.o_data_cell:contains("demo")',
    run(helpers) {
        const $titles = this.$anchor.closest('table').find('tr:first th');
        for (let i=0; i<$titles.length; ++i) {
            columns[$titles[i].getAttribute('data-name')] = i;
        }
        const $row = this.$anchor.closest('tr');
        const sel = $row.find('.o_list_record_selector input[type=checkbox]');
        helpers.click(sel);
    }
}, {
    content: "Open Actions menu",
    trigger: 'button.dropdown-toggle:contains("Action")'
}, {
    content: "Select totp remover",
    trigger: 'span.dropdown-item:contains(Disable two-factor authentication)'
}, { // enhanced security yo
    content: "Check that we have to enter enhanced security mode & input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text admin',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(demo)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, ...closeProfileDialog({
    content: "check that demo user has been de-totp'd",
    totp_state: false,
}),
]})

return __exports;
});
;

/********************************************************
*  Filepath: /auth_totp_mail/static/tests/totp_flow.js  *
*  Lines: 82                                            *
********************************************************/
odoo.define('@auth_totp_mail/../tests/totp_flow', ['@web/core/registry', '@web_tour/tour_service/tour_utils'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/tour_service/tour_utils");

function openAccountSettingsTab() {
    return [{
        content: 'Go to settings',
        trigger: '[data-menu-xmlid="base.menu_administration"]'
    }, {
        content: 'Wait for page',
        trigger: '.o_menu_brand:contains("Settings")',
        run: () => {}
    }, {
        content: "Open Users menu",
        trigger: '[data-menu-xmlid="base.menu_users"]'
    }, {
        content: "Open Users view",
        trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
        run: function (helpers) {
            // funny story: the users view we're trying to reach, sometimes we're
            // already there, but if we re-click the next step executes before the
            // action has the time to re-load, the one after that doesn't, and our
            // selection get discarded by the action reloading, so here try to
            // see if we're already on the users action through the breadcrumb and
            // just close the menu if so
            const $crumb = $('.breadcrumb');
            if ($crumb.text().indexOf('Users') === -1) {
                // on general settings page, click menu
                helpers.click();
            } else {
                // else close menu
                helpers.click($('[data-menu-xmlid="base.menu_users"]'));
            }
        }
    }];
}

registry.category("web_tour.tours").add('totp_admin_self_invite', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), ...openAccountSettingsTab(), {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(admin)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, {
    content: "check that user cannot invite themselves to use 2FA.",
    trigger: "body",
    run: function () {
        const inviteBtn = $('button:contains(Invite to use 2FA)')[0];
        if (!inviteBtn) {
            $('body').addClass('CannotInviteYourself');
        }
    }
}, {
    content: "check that user cannot invite themself.",
    trigger: "body.CannotInviteYourself",
    isCheck: true,
}]});

registry.category("web_tour.tours").add('totp_admin_invite', {
    test: true,
    url: '/web',
    steps: () => [stepUtils.showAppsMenuItem(), ...openAccountSettingsTab(), {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(demo)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, {
    content: "check that demo user can be invited to use 2FA.",
    trigger: "button:contains(Invite to use 2FA)",
    isCheck: true,
}]});

return __exports;
});
;

/************************************************************
*  Filepath: /auth_totp_portal/static/tests/totp_portal.js  *
*  Lines: 128                                               *
************************************************************/
odoo.define('@auth_totp_portal/../tests/totp_portal', ['@web/core/registry', '@web/core/network/rpc_service'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { jsonrpc } = require("@web/core/network/rpc_service");

registry.category("web_tour.tours").add('totportal_tour_setup', {
    test: true,
    url: '/my/security',
    steps: () => [{
    content: "Open totp wizard",
    trigger: 'button#auth_totp_portal_enable',
}, {
    content: "Check that we have to enter enhanced security mode",
    trigger: 'div:contains("enter your password")',
    run: () => {},
}, {
    content: "Input password",
    trigger: '[name=password]',
    run: 'text portal', // FIXME: better way to do this?
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check the wizard has opened",
    trigger: 'li:contains("scan the barcode below")',
    run: () => {}
}, {
    content: "Get secret from collapsed div",
    trigger: 'a:contains("Cannot scan it?")',
    run: async function(helpers) {
        const secret = this.$anchor.closest('div').find('span[name="secret"]').text();
        const token = await jsonrpc('/totphook', {
            secret
        });
        helpers._text(helpers._get_action_values('input[name=code]'), token);
        helpers._click(helpers._get_action_values('button.btn-primary:contains(Activate)'));
    }
}, {
    content: "Check that the button has changed",
    trigger: 'button:contains(Disable two-factor authentication)',
    run: () => {}
}]});

registry.category("web_tour.tours").add('totportal_login_enabled', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text portal',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text portal',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    run: async function (helpers) {
        const token = await jsonrpc('/totphook');
        helpers._text(helpers._get_action_values(), token);
        // FIXME: is there a way to put the button as its own step trigger without
        //        the tour straight blowing through and not waiting for this?
        helpers._click(helpers._get_action_values('button:contains("Log in")'));
    }
}, {
    content: "check we're logged in",
    trigger: "h3:contains(My account)",
    run: () => {}
}, {
    content: "go back to security",
    trigger: "a:contains(Security)",
},{
    content: "Open totp wizard",
    trigger: 'button#auth_totp_portal_disable',
}, {
    content: "Check that we have to enter enhanced security mode",
    trigger: 'div:contains("enter your password")',
    run: () => {},
}, {
    content: "Input password",
    trigger: '[name=password]',
    run: 'text portal', // FIXME: better way to do this?
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check that the button has changed",
    trigger: 'button:contains(Enable two-factor authentication)',
    run: () => {}
}]});

registry.category("web_tour.tours").add('totportal_login_disabled', {
    test: true,
    url: '/',
    steps: () => [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text portal',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text portal',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "check we're logged in",
    trigger: "h3:contains(My account)",
    run: () => {}
}]});

return __exports;
});
;

/*****************************************************************************
*  Filepath: /project_enterprise/static/tests/tours/task_gantt_tour_test.js  *
*  Lines: 75                                                                 *
*****************************************************************************/
odoo.define('@project_enterprise/../tests/tours/task_gantt_tour_test', ['@web/core/registry', '@project/../tests/tours/project_tour', '@web/core/utils/patch'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

/**
 * Add custom steps to go to map and gantt view in Project app
 */
const { registry } = require("@web/core/registry");
require("@project/../tests/tours/project_tour");
const { patch } = require("@web/core/utils/patch");

function openProjectUpdateAndReturnToTasks(view, viewClass) {
    return [{
            trigger: '.o_project_updates_breadcrumb',
            content: 'Open Project Update from view : ' + view,
            extra_trigger: "." + viewClass,
        }, {
            trigger: ".o-kanban-button-new",
            content: "Create a new update from project task view : " + view,
            extra_trigger: '.o_project_update_kanban_view',
        }, {
            trigger: "button.o_form_button_cancel",
            content: "Discard project update from project task view : " + view,
        }, {
            trigger: ".o_switch_view.o_list",
            content: "Go to list of project update from view " + view,
        }, {
            trigger: '.o_back_button',
            content: 'Go back to the task view : ' + view,
            // extra_trigger: '.o_list_table', // FIXME: [XBO] uncomment it when sample data will be displayed after discarding creation of project update record.
        },
    ];
}

patch(registry.category("web_tour.tours").get("project_test_tour"), {
    steps() {
        const originalSteps = super.steps();
        const taskCreationStepIndex = originalSteps.findIndex((step) => step.id === "quick_create_tasks");

        originalSteps.splice(taskCreationStepIndex + 1, 0, {
            trigger: '.o_switch_view.o_gantt',
            content: 'Open Gantt View',
        }, {
            trigger: '.o_gantt_button_add',
            content: 'Add a task in gantt',
        });

        originalSteps.splice(originalSteps.length, 0, {
            trigger: ".o_gantt_progress_bar",
            content: "See user progress bar",
            run: function () {
                const $progressbar = $(".o_gantt_progress_bar:eq(0)");
                if ($progressbar.length) {
                    if ($progressbar.find("span:eq(0)")[0].style.width === '') {
                        console.error("Progress bar should be displayed");
                    }
                    if (!$progressbar[0].classList.contains("o_gantt_group_danger")) {
                        console.error("Progress bar should be displayed in danger");
                    }
                } else {
                    console.error("Not able to select progressbar");
                }
            }
        }, ...openProjectUpdateAndReturnToTasks("Gantt", "o_gantt_view"), {
            trigger: '.o_switch_view.o_map',
            content: 'Open Map View',
        }, ...openProjectUpdateAndReturnToTasks("Map", "o_map_view"));

        return originalSteps;
    }
});

return __exports;
});
;

/**********************************************************************
*  Filepath: /sale_planning/static/tests/tours/sale_planning_tour.js  *
*  Lines: 30                                                          *
**********************************************************************/
odoo.define('@sale_planning/../tests/tours/sale_planning_tour', ['@web/core/registry'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

const planningTestTour = registry.category("web_tour.tours").get("planning_test_tour");

registry.category("web_tour.tours").add('sale_planning_test_tour', {
    url: '/web',
    test: true,
    steps: () => [
        ...planningTestTour.steps(), {
            trigger: ".o_gantt_cell.o_gantt_hoverable",
            content: "Click on magnify icon to see list of sale order",
        }, {
            trigger: "tr.o_data_row td[data-tooltip='Junior Developer']",
            content: "Select the slot and plan orders",
            run: 'click',
        }, {
            trigger: ".o_gantt_pill span:contains(Junior Developer)",
            content: "Check the naming format when SO is selected from magnify icon",
            run: function () {},
        },
    ],
});

return __exports;
});
;

/***************************************************************
*  Filepath: /sale_project/static/tests/tours/project_tour.js  *
*  Lines: 27                                                   *
***************************************************************/
odoo.define('@sale_project/../tests/tours/project_tour', ['@web/core/registry', '@project/../tests/tours/project_tour', '@web/core/utils/patch'], function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

/**
 * Add custom step to check allow_billable during project creation
 * to be able to set a partner on project/tasks.
 */
const { registry } = require("@web/core/registry");
require("@project/../tests/tours/project_tour");
const { patch } = require("@web/core/utils/patch");

patch(registry.category("web_tour.tours").get("project_test_tour"), {
    steps() {
        const originalSteps = super.steps();
        const projectCreationStepIndex = originalSteps.findIndex((step) => step.id === "project_creation");
        originalSteps.splice(projectCreationStepIndex, 0, {
            trigger: "div[name='allow_billable'] input",
        });

        return originalSteps;
    }
})

return __exports;
});


//# sourceMappingURL=/web/assets/7b27bbb/web.assets_tests.js.map