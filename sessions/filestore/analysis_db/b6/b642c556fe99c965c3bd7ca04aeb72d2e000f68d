)]}'
{"version": 3, "sources": ["/knowledge/static/src/js/wysiwyg.js", "/knowledge/static/src/js/knowledge_wysiwyg.js", "/knowledge/static/src/js/knowledge_clipboard_whitelist.js"], "mappingsbxGA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA", "sourcesContent": ["/** @odoo-module **/\n\nimport { Component } from '@odoo/owl';\nimport { renderToElement } from \"@web/core/utils/render\";\nimport { Wysiwyg } from '@web_editor/js/wysiwyg/wysiwyg';\nimport { PromptEmbeddedViewNameDialog } from '@knowledge/components/prompt_embedded_view_name_dialog/prompt_embedded_view_name_dialog';\nimport {\n    isSelectionInSelectors,\n    preserveCursor,\n    setCursorEnd,\n} from \"@web_editor/js/editor/odoo-editor/src/utils/utils\";\nimport { VideoSelectorDialog } from '@knowledge/components/video_selector_dialog/video_selector_dialog';\nimport { ArticleSelectionBehaviorDialog } from '@knowledge/components/behaviors/article_behavior_dialog/article_behavior_dialog';\nimport {\n    encodeDataBehaviorProps,\n} from \"@knowledge/js/knowledge_utils\";\nimport { patch } from \"@web/core/utils/patch\";\nimport { _t } from \"@web/core/l10n/translation\";\nimport { KnowledgeMediaDialog } from '@knowledge/components/media_dialog/knowledge_media_dialog';\n\npatch(Wysiwyg.prototype, {\n    /**\n     * @override\n     */\n    async resetEditor() {\n        await super.resetEditor(...arguments);\n        this.$editable[0].dispatchEvent(new Event('mount_knowledge_behaviors'));\n    },\n    /**\n     * @override\n     */\n    _getEditorOptions() {\n        const finalOptions = super._getEditorOptions(...arguments);\n        const onHistoryResetFromSteps = finalOptions.onHistoryResetFromSteps;\n        finalOptions.onHistoryResetFromSteps = () => {\n            onHistoryResetFromSteps();\n            if (this._onHistoryResetFromSteps) {\n                this._onHistoryResetFromSteps();\n            }\n        };\n        return {\n            allowCommandFile: true,\n            ...finalOptions,\n        };\n    },\n    /**\n     * @override\n     * @returns {Array[Object]}\n     */\n    _getPowerboxOptions() {\n        const options = super._getPowerboxOptions();\n        const {commands, categories} = options;\n        categories.push({ name: _t('Media'), priority: 50 });\n        commands.push({\n            category: _t('Media'),\n            name: _t('Article'),\n            priority: 10,\n            description: _t('Link an article'),\n            fontawesome: 'fa-file',\n            isDisabled: () => this.options.isWebsite || this.options.inIframe,\n            callback: () => {\n                this._insertArticleLink();\n            },\n        });\n\n        if (this.options.knowledgeCommands) {\n            categories.push(\n                { name: _t('Knowledge'), priority: 11 },\n                { name: _t('Knowledge Databases'), priority: 10 }\n            );\n\n            commands.push({\n                category: _t('Knowledge'),\n                name: _t('File'),\n                priority: 20,\n                description: _t('Upload a file'),\n                fontawesome: 'fa-file',\n                isDisabled: () => isSelectionInSelectors('.o_knowledge_behavior_anchor') || !this.options.allowCommandFile,\n                callback: () => {\n                    this.openMediaDialog({\n                        noVideos: true,\n                        noImages: true,\n                        noIcons: true,\n                        noDocuments: true,\n                        MediaDialog: KnowledgeMediaDialog,\n                    });\n                }\n            }, {\n                category: _t('Knowledge'),\n                name: _t('Clipboard'),\n                priority: 10,\n                description: _t('Add a clipboard section'),\n                fontawesome: 'fa-pencil-square',\n                isDisabled: () => isSelectionInSelectors('.o_knowledge_behavior_anchor'),\n                callback: () => {\n                    this._insertTemplate();\n                },\n            }, {\n                category: _t('Knowledge'),\n                name: _t('Table Of Content'),\n                priority: 30,\n                description: _t('Highlight the structure of this article'),\n                fontawesome: 'fa-bookmark',\n                isDisabled: () => isSelectionInSelectors('.o_knowledge_behavior_anchor, table'),\n                callback: () => {\n                    this._insertTableOfContent();\n                },\n            }, {\n                category: _t('Knowledge Databases'),\n                name: _t('Item Kanban'),\n                priority: 40,\n                description: _t('Insert a Kanban view of article items'),\n                fontawesome: 'fa-th-large',\n                isDisabled: () => isSelectionInSelectors('.o_knowledge_behavior_anchor, .o_editor_banner, table'),\n                callback: () => {\n                    const restoreSelection = preserveCursor(this.odooEditor.document);\n                    const viewType = 'kanban';\n                    this._openEmbeddedViewDialog(viewType, async (name) => {\n                        await this.orm.call(\n                            'knowledge.article',\n                            'create_default_item_stages',\n                            [[this.options.recordInfo.res_id]],\n                        );\n                        this._insertEmbeddedView('knowledge.knowledge_article_item_action_stages', undefined, viewType, name, restoreSelection, {\n                            active_id: this.options.recordInfo.res_id,\n                            default_parent_id: this.options.recordInfo.res_id,\n                            default_is_article_item: true,\n                        });\n                    }, restoreSelection);\n                }\n            }, {\n                category: _t('Knowledge Databases'),\n                name: _t('Item Cards'),\n                priority: 39,\n                description: _t('Insert a Card view of article items'),\n                fontawesome: 'fa-address-card',\n                isDisabled: () => isSelectionInSelectors('.o_editor_banner, .o_knowledge_behavior_anchor, table'),\n                callback: () => {\n                    const restoreSelection = preserveCursor(this.odooEditor.document);\n                    const viewType = 'kanban';\n                    this._openEmbeddedViewDialog(viewType, name => {\n                        this._insertEmbeddedView('knowledge.knowledge_article_item_action', undefined, viewType, name, restoreSelection, {\n                            active_id: this.options.recordInfo.res_id,\n                            default_parent_id: this.options.recordInfo.res_id,\n                            default_is_article_item: true,\n                        });\n                    }, restoreSelection);\n                }\n            }, {\n                category: _t('Knowledge Databases'),\n                name: _t('Item List'),\n                priority: 50,\n                description: _t('Insert a List view of article items'),\n                fontawesome: 'fa-th-list',\n                isDisabled: () => isSelectionInSelectors('.o_editor_banner, .o_knowledge_behavior_anchor, table'),\n                callback: () => {\n                    const restoreSelection = preserveCursor(this.odooEditor.document);\n                    const viewType = 'list';\n                    this._openEmbeddedViewDialog(viewType, name => {\n                        this._insertEmbeddedView('knowledge.knowledge_article_item_action', undefined, viewType, name, restoreSelection, {\n                            active_id: this.options.recordInfo.res_id,\n                            default_parent_id: this.options.recordInfo.res_id,\n                            default_is_article_item: true,\n                        });\n                    }, restoreSelection);\n                }\n            }, {\n                category: _t('Knowledge Databases'),\n                name: _t('Item Calendar'),\n                priority: 29,\n                description: _t('Insert a Calendar view of article items'),\n                fontawesome: 'fa-calendar-plus-o',\n                isDisabled: () => isSelectionInSelectors('.o_knowledge_behavior_anchor, table'),\n                callback: this._insertItemCalendar.bind(this),\n            }, {\n                category: _t('Knowledge'),\n                name: _t('Index'),\n                priority: 60,\n                description: _t('Show nested articles'),\n                fontawesome: 'fa-list',\n                isDisabled: () => isSelectionInSelectors('.o_knowledge_behavior_anchor, table'),\n                callback: () => {\n                    this._insertArticlesStructure(false);\n                }\n            }, {\n                category: _t('Media'),\n                name: _t('Video'),\n                priority: 70,\n                description: _t('Insert a Video'),\n                fontawesome: 'fa-play',\n                callback: () => {\n                    const restoreSelection = preserveCursor(this.odooEditor.document);\n                    this._openVideoSelectorDialog(media => {\n                        this._insertVideo(media, restoreSelection);\n                    });\n                }\n            });\n        }\n        return {...options, commands, categories};\n    },\n    /**\n     * mail is a dependency of Knowledge and @see MailIceServer are a model from\n     * mail. When Knowledge is installed, this is always true, meaning that\n     * portal users have access to the collaborative mode.\n     * @override\n     */\n    _hasICEServers() {\n        return true;\n    },\n    /**\n     * Notify @see FieldHtmlInjector that behaviors need to be injected\n     * @see KnowledgeBehavior\n     *\n     * @param {Element} anchor blueprint for the behavior to be inserted\n     * @param {Function} restoreSelection Instructions on where to insert it\n     * @param {Function} insert Instructions on how to insert it if it needs\n     *                   custom handling\n     */\n    _notifyNewBehavior(anchor, restoreSelection, insert = null) {\n        const type = Array.from(anchor.classList).find(className => className.startsWith('o_knowledge_behavior_type_'));\n        this.$editable[0].dispatchEvent(new CustomEvent('mount_knowledge_behaviors', { detail: { behaviorData: {\n            anchor,\n            behaviorType: type,\n            shouldSetCursor: true,\n            restoreSelection,\n            behaviorStatus: 'new',\n            insert,\n        }}}));\n    },\n    /**\n     * Insert a /toc block (table of content)\n     */\n    _insertTableOfContent: function () {\n        const restoreSelection = preserveCursor(this.odooEditor.document);\n        const tableOfContentBlock = renderToElement('knowledge.AbstractBehaviorBlueprint', {\n            behaviorType: \"o_knowledge_behavior_type_toc\",\n        });\n        this._notifyNewBehavior(tableOfContentBlock, restoreSelection);\n    },\n    /**\n     * Insert a /structure block.\n     * It will list all the articles that are direct children of this one.\n     * @param {boolean} childrenOnly\n     */\n    _insertArticlesStructure: function () {\n        const restoreSelection = preserveCursor(this.odooEditor.document);\n        const articlesStructureBlock = renderToElement('knowledge.ArticlesStructureBehaviorBlueprint');\n        this._notifyNewBehavior(articlesStructureBlock, restoreSelection);\n    },\n    /**\n     * Insert a /clipboard block\n     */\n    _insertTemplate() {\n        const restoreSelection = preserveCursor(this.odooEditor.document);\n        const templateBlock = renderToElement('knowledge.AbstractBehaviorBlueprint', {\n            behaviorType: \"o_knowledge_behavior_type_template\",\n        });\n        this._notifyNewBehavior(templateBlock, restoreSelection);\n    },\n    /**\n     * Insert a /article block (through a dialog)\n     */\n    _insertArticleLink: function () {\n        const restoreSelection = preserveCursor(this.odooEditor.document);\n        Component.env.services.dialog.add(ArticleSelectionBehaviorDialog, {\n            title: _t('Link an Article'),\n            confirmLabel: _t('Insert Link'),\n            articleSelected: article => {\n                const articleLinkBlock = renderToElement('knowledge.ArticleBehaviorBlueprint', {\n                    href: '/knowledge/article/' + article.articleId,\n                    data: encodeDataBehaviorProps({\n                        article_id: article.articleId,\n                        display_name: article.displayName,\n                    }),\n                });\n                const nameNode = document.createTextNode(article.display_name);\n                articleLinkBlock.appendChild(nameNode);\n                this._notifyNewBehavior(articleLinkBlock, restoreSelection);\n            },\n            parentArticleId: this.options.recordInfo.res_model === 'knowledge.article' ? this.options.recordInfo.res_id : undefined\n        }, {\n            onClose: () => {\n                restoreSelection();\n            }\n        });\n    },\n    /**\n     * Inserts a view in the editor\n     * @param {String} [actWindowId] - action xml id (specify either this or\n     *                 the object)\n     * @param {Object} [actWindowObject] - ActionDescription as specified by\n     *                 @see action_service\n     * @param {String} viewType - View type\n     * @param {String} name - Name\n     * @param {Function} restoreSelection - function to restore the selection\n     *                   to insert the embedded view where the user typed the\n     *                   command.\n     * @param {Object} context - Context\n     * @param {Object} additionalProps - props to pass to the view when loading\n     *                 it.\n     */\n    _insertEmbeddedView: async function (\n        actWindowXMLId, actWindowObject, viewType, name, restoreSelection,\n        context={}, additionalViewProps=undefined\n    ) {\n        const actionWindow = actWindowXMLId ? { action_xml_id: actWindowXMLId } : { act_window: actWindowObject };\n        const props = {\n            ...actionWindow,\n            display_name: name,\n            view_type: viewType,\n            context,\n        };\n        if (additionalViewProps) {\n            props.additionalViewProps = additionalViewProps;\n        }\n        const behaviorProps = encodeDataBehaviorProps(props);\n        const embeddedViewBlock = renderToElement('knowledge.EmbeddedViewBehaviorBlueprint', {\n            behaviorProps,\n            action_help: actionWindow.act_window?.help,\n        });\n        this._notifyNewBehavior(embeddedViewBlock, restoreSelection);\n        this.env.model.root.update({'full_width': true});\n    },\n    /**\n     * Inserts a video in the editor\n     * @param {Object} media\n     * @param {function} restoreSelection\n     */\n    _insertVideo: function (media, restoreSelection) {\n        const videoBlock = renderToElement('knowledge.VideoBehaviorBlueprint', {\n            behaviorProps: encodeDataBehaviorProps({\n                videoId: media.videoId,\n                platform: media.platform,\n                params: media.params || {}\n            })\n        });\n        this._notifyNewBehavior(videoBlock, restoreSelection);\n    },\n    /**\n     * Insert a behaviorBlueprint programatically. If the wysiwyg is a part of a\n     * collaborative peer to peer connection, ensure that the behaviorBlueprint\n     * is properly appended even when the content is reset by the collaboration.\n     *\n     * @param {HTMLElement} behaviorBlueprint element to append to the editable\n     */\n    appendBehaviorBlueprint(behaviorBlueprint) {\n        const restoreSelection = () => {\n            // Set the cursor to the end of the article by not normalizing the position.\n            // By not normalizing we ensure that we will use the article\u015b body as the container\n            // and not an invisible character.\n            return setCursorEnd(this.odooEditor.editable, false);\n        }\n        const insert = (anchor) => {\n            const fragment = this.odooEditor.document.createDocumentFragment();\n            // Add a P after the Behavior to be able to continue typing\n            // after it\n            const p = this.odooEditor.document.createElement('p');\n            p.append(this.odooEditor.document.createElement('br'));\n            fragment.append(anchor, p);\n            const insertedNodes = this.odooEditor.execCommand('insert', fragment);\n            if (insertedNodes) {\n                insertedNodes[0].scrollIntoView();\n                return insertedNodes;\n            }\n        };\n        // Clone behaviorBlueprint to be sure that the nodes are not modified\n        // during the first insertion attempt and that the correct nodes\n        // are inserted the second time.\n        this._notifyNewBehavior(behaviorBlueprint.cloneNode(true), restoreSelection, (anchor) => {\n            const insertedNodes = insert(anchor);\n            this._onHistoryResetFromSteps = () => {\n                this._notifyNewBehavior(behaviorBlueprint.cloneNode(true), restoreSelection, insert);\n                this._onHistoryResetFromSteps = undefined;\n            };\n            return insertedNodes;\n        });\n        if (behaviorBlueprint.classList.contains('o_knowledge_behavior_type_embedded_view')) {\n            this.env.model.root.update({'full_width': true});\n        }\n    },\n    /**\n     * Notify a new @see FileBehavior when selecting a file in a\n     * @see MediaDialog\n     * @see KnowledgeMediaDialog\n     *\n     * @override\n     */\n    _onMediaDialogSave(params, element) {\n        if (!element?.querySelector('.o_knowledge_behavior_anchor')) {\n            return super._onMediaDialogSave(...arguments);\n        }\n        params.restoreSelection();\n        this._notifyNewBehavior(element, params.restoreSelection);\n    },\n    /**\n     * Inserts the dialog allowing the user to specify name for the embedded view.\n     * @param {String} viewType\n     * @param {Function} save\n     */\n    _openEmbeddedViewDialog: function (viewType, save, onClose) {\n        Component.env.services.dialog.add(PromptEmbeddedViewNameDialog, {\n            isNew: true,\n            viewType: viewType,\n            save: save\n        }, {\n            onClose: onClose || (() => {}),\n        });\n    },\n\n    /**\n     * Inserts an item calendar view\n     */\n    _insertItemCalendar: function () {\n        const { ItemCalendarPropsDialog } = odoo.loader.modules.get(\"@knowledge/components/item_calendar_props_dialog/item_calendar_props_dialog\");\n        const restoreSelection = preserveCursor(this.odooEditor.document);\n        // Shows a dialog allowing the user to set the itemCalendarProps\n        // (properties used by the itemCalendar view)\n        Component.env.services.dialog.add(ItemCalendarPropsDialog, {\n            isNew: true,\n            knowledgeArticleId: this.options.recordInfo.res_id,\n            saveItemCalendarProps: (name, itemCalendarProps) => {\n                this._insertEmbeddedView('knowledge.knowledge_article_action_item_calendar', undefined, 'calendar', name, restoreSelection, {\n                    active_id: this.options.recordInfo.res_id,\n                    default_parent_id: this.options.recordInfo.res_id,\n                    default_icon: '\ud83d\udcc4',\n                    default_is_article_item: true,\n                }, {\n                    itemCalendarProps,\n                });\n            }\n        }, {\n            onClose: () => {\n                restoreSelection();\n            }\n        });\n    },\n\n    /**\n     * Inserts a dialog allowing the user to insert a video\n     * @param {function} save\n     */\n    _openVideoSelectorDialog: function (save) {\n        Component.env.services.dialog.add(VideoSelectorDialog, { save });\n    }\n});\n", "/** @odoo-module */\n\nimport { _t } from \"@web/core/l10n/translation\";\nimport { isEmptyBlock } from \"@web_editor/js/editor/odoo-editor/src/OdooEditor\";\nimport { Wysiwyg } from \"@web_editor/js/wysiwyg/wysiwyg\";\nimport { useBus } from '@web/core/utils/hooks';\nimport {\n    isZWS,\n    getDeepRange,\n    getSelectedNodes,\n    closestElement,\n} from \"@web_editor/js/editor/odoo-editor/src/utils/utils\";\nimport { ChatGPTPromptDialog } from '@web_editor/js/wysiwyg/widgets/chatgpt_prompt_dialog';\nimport { useRef } from '@odoo/owl';\n\n/**\n * This widget will extend Wysiwyg and contain all code that are specific to\n * Knowledge and that should not be included in the global Wysiwyg instance.\n *\n * Note: The utils functions of the OdooEditor are included in a different bundle\n * asset than 'web.assets_backend'. We can therefore not import them in the\n * backend code of Knowledge. This widget will be allow us to use them.\n */\nexport class KnowledgeWysiwyg extends Wysiwyg {\n    static template = 'knowledge.KnowledgeWysiwyg';\n\n    setup() {\n        super.setup(...arguments);\n        useBus(this.env.bus, 'KNOWLEDGE_WYSIWYG:HISTORY_STEP', () => this.odooEditor.historyStep());\n        this.knowledgeCommentsToolbarBtnRef = useRef('knowledgeCommentsToolbarBtn');\n    }\n\n    /**\n     * This function enables the user to generate an article using ChatGPT.\n     * We search inside of the generated content if we have a title.\n     * If we find one then we put it inside of an H1 in order to have it as the article's\n     * title.\n     * Otherwise we put a blank H1 in the generated content so that the user can add\n     * one later.\n     */\n    generateArticle() {\n        this.env.services.dialog.add(ChatGPTPromptDialog, {\n            initialPrompt: _t('Write an article about'),\n            insert: (content) => {\n                const generatedContentTitle = content.querySelector('h1,h2');\n                const articleTitle = document.createElement('h1');\n                if (generatedContentTitle && generatedContentTitle.tagName !== 'H1') {\n                    articleTitle.innerText = generatedContentTitle.innerText;\n                    generatedContentTitle.replaceWith(articleTitle);\n                } else if (!generatedContentTitle) {\n                    articleTitle.innerHTML = '<br>';\n                    content.prepend(articleTitle);\n                }\n\n                const divElement = document.createElement('div');\n                divElement.appendChild(content);\n                this.odooEditor.resetContent(divElement.innerHTML);\n            }\n        });\n    }\n\n    /**\n     * Configure the new buttons added inside the knowledge toolbar.\n     * @override\n     * @param {*} options\n     */\n    _configureToolbar(options) {\n        this.knowledgeCommentsToolbarBtnRef.el?.addEventListener('click', () => {\n            getDeepRange(this.$editable[0], { splitText: true, select: true, correctTripleClick: true });\n            const selectedNodes = getSelectedNodes(this.$editable[0])\n                .filter(selectedNode => selectedNode.nodeType === Node.TEXT_NODE && closestElement(selectedNode).isContentEditable);\n            this.env.bus.trigger('KNOWLEDGE:CREATE_COMMENT_THREAD', {selectedNodes});\n        });\n        super._configureToolbar(...arguments);\n    }\n\n    _onSelectionChange() {\n        const selection = document.getSelection();\n        if (selection.type === \"None\") {\n            super._onSelectionChange(...arguments);\n            return;\n        }\n        const selectedNodes = getSelectedNodes(this.$editable[0]);\n        const btnHidden = selectedNodes.length && selectedNodes.every((node) => isZWS(node) || !closestElement(node)?.isContentEditable);\n        this.knowledgeCommentsToolbarBtnRef.el?.classList.toggle('d-none', btnHidden);\n        super._onSelectionChange(...arguments);\n    }\n\n    /**\n     * @override\n     */\n    async startEdition() {\n        await super.startEdition(...arguments);\n        this.odooEditor.options.renderingClasses = [...this.odooEditor.options.renderingClasses, 'focused-comment'];\n    }\n\n    /**\n     * Checks if the editable zone of the editor is empty.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        return this.$editable[0].children.length === 1 && isEmptyBlock(this.$editable[0].firstElementChild);\n    }\n}\n", "/** @odoo-module */\n\nimport { CLIPBOARD_WHITELISTS } from '@web_editor/js/editor/odoo-editor/src/OdooEditor';\n\n/**\n * Allow @see o_knowledge_ classes to be preserved in the editor on paste.\n */\nCLIPBOARD_WHITELISTS.classes.push(/^o_knowledge_/);\n"], "file": "/web/assets/a255856/knowledge.assets_wysiwyg.js", "sourceRoot": "../../../"}